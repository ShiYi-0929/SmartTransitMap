{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { performRoadAnalysis, getRoadVisualizationData, getRoadNetworkMetrics } from '@/api/traffic';\nexport default {\n  name: 'TrafficRoad',\n  data() {\n    return {\n      isLoading: false,\n      mapLoaded: false,\n      map: null,\n      // 分析配置\n      analysisConfig: {\n        analysis_type: 'comprehensive',\n        segment_types: ['all'],\n        aggregation_level: 'segment',\n        include_patterns: true,\n        min_vehicles: 10\n      },\n      // 可视化配置\n      visualizationType: 'speed',\n      // 分析数据\n      analysisData: null,\n      visualizationData: null,\n      networkMetrics: null,\n      // 图表数据\n      speedDistributions: [],\n      flowPatterns: [],\n      // 路段数据\n      segmentDetails: [],\n      selectedSegment: null,\n      // 分页\n      currentPage: 1,\n      pageSize: 10,\n      // 图例信息\n      legendInfo: null\n    };\n  },\n  computed: {\n    activeSegments() {\n      return this.analysisData?.analysis?.segments_data?.length || 0;\n    },\n    avgSpeed() {\n      const summary = this.analysisData?.analysis?.network_summary;\n      return summary?.network_avg_speed?.toFixed(1) || 'N/A';\n    },\n    avgFlow() {\n      if (!this.segmentDetails || this.segmentDetails.length === 0) return 'N/A';\n      const totalFlow = this.segmentDetails.reduce((sum, s) => sum + (s.flow_rate || 0), 0);\n      return (totalFlow / this.segmentDetails.length).toFixed(0);\n    },\n    bottleneckCount() {\n      return this.analysisData?.analysis?.bottleneck_segments?.length || 0;\n    },\n    paginatedSegments() {\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = start + this.pageSize;\n      return this.segmentDetails.slice(start, end);\n    },\n    totalPages() {\n      return Math.ceil(this.segmentDetails.length / this.pageSize);\n    }\n  },\n  mounted() {\n    this.initializeComponent();\n  },\n  methods: {\n    async initializeComponent() {\n      try {\n        await this.initializeMap();\n        await this.performAnalysis();\n      } catch (error) {\n        console.error('初始化路段分析组件失败:', error);\n      }\n    },\n    async initializeMap() {\n      try {\n        // 尝试初始化高德地图\n        if (typeof AMap !== 'undefined') {\n          this.map = new AMap.Map('road-analysis-map', {\n            zoom: 11,\n            center: [116.397, 39.916],\n            mapStyle: 'amap://styles/blue'\n          });\n          this.mapLoaded = true;\n        } else {\n          console.warn('高德地图API未加载，使用Canvas降级模式');\n          this.mapLoaded = false;\n          this.initializeFallbackCanvas();\n        }\n      } catch (error) {\n        console.warn('地图初始化失败，使用Canvas降级模式:', error);\n        this.mapLoaded = false;\n        this.initializeFallbackCanvas();\n      }\n    },\n    initializeFallbackCanvas() {\n      this.$nextTick(() => {\n        const canvas = this.$refs.fallbackCanvas;\n        if (canvas) {\n          const ctx = canvas.getContext('2d');\n          ctx.fillStyle = '#f0f0f0';\n          ctx.fillRect(0, 0, 800, 600);\n          ctx.fillStyle = '#666';\n          ctx.font = '16px Arial';\n          ctx.textAlign = 'center';\n          ctx.fillText('路段分析地图', 400, 300);\n          ctx.fillText('(Canvas降级模式)', 400, 320);\n        }\n      });\n    },\n    async performAnalysis() {\n      this.isLoading = true;\n      try {\n        // 执行路段分析\n        const analysisResult = await performRoadAnalysis(this.analysisConfig);\n        if (analysisResult.success) {\n          this.analysisData = analysisResult;\n          this.speedDistributions = analysisResult.speed_distributions || [];\n          this.flowPatterns = analysisResult.flow_patterns || [];\n\n          // 构建路段详情数据\n          this.buildSegmentDetails();\n\n          // 获取网络指标\n          await this.loadNetworkMetrics();\n\n          // 更新可视化\n          await this.updateVisualization();\n          this.$message.success('路段分析完成');\n        } else {\n          this.$message.error(`分析失败: ${analysisResult.message}`);\n        }\n      } catch (error) {\n        console.error('路段分析失败:', error);\n        this.$message.error('分析过程中发生错误');\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    buildSegmentDetails() {\n      if (!this.analysisData) return;\n      const segments = this.analysisData.analysis?.segments_data || [];\n      const trafficData = this.analysisData.traffic_data || [];\n\n      // 创建路段到交通数据的映射\n      const trafficMap = {};\n      trafficData.forEach(data => {\n        if (!trafficMap[data.segment_id]) {\n          trafficMap[data.segment_id] = [];\n        }\n        trafficMap[data.segment_id].push(data);\n      });\n\n      // 构建详情数据\n      this.segmentDetails = segments.map(segment => {\n        const traffic = trafficMap[segment.segment_id] || [];\n        const avgTraffic = this.calculateAverageTraffic(traffic);\n        return {\n          ...segment,\n          ...avgTraffic\n        };\n      });\n    },\n    calculateAverageTraffic(trafficList) {\n      if (!trafficList || trafficList.length === 0) {\n        return {\n          avg_speed: 0,\n          flow_rate: 0,\n          congestion_level: 'unknown'\n        };\n      }\n      const avgSpeed = trafficList.reduce((sum, t) => sum + t.avg_speed, 0) / trafficList.length;\n      const avgFlow = trafficList.reduce((sum, t) => sum + t.flow_rate, 0) / trafficList.length;\n\n      // 取最常见的拥堵等级\n      const congestionCounts = {};\n      trafficList.forEach(t => {\n        congestionCounts[t.congestion_level] = (congestionCounts[t.congestion_level] || 0) + 1;\n      });\n      const mostCommonCongestion = Object.keys(congestionCounts).reduce((a, b) => congestionCounts[a] > congestionCounts[b] ? a : b);\n      return {\n        avg_speed: avgSpeed,\n        flow_rate: avgFlow,\n        congestion_level: mostCommonCongestion\n      };\n    },\n    async loadNetworkMetrics() {\n      try {\n        const metricsResult = await getRoadNetworkMetrics();\n        if (metricsResult.success) {\n          this.networkMetrics = metricsResult.metrics;\n        }\n      } catch (error) {\n        console.error('加载网络指标失败:', error);\n      }\n    },\n    async updateVisualization() {\n      try {\n        const params = {\n          visualization_type: this.visualizationType,\n          time_range: {\n            start: Date.now() / 1000 - 3600,\n            end: Date.now() / 1000\n          }\n        };\n        const vizResult = await getRoadVisualizationData(params);\n        if (vizResult.success) {\n          this.visualizationData = vizResult.visualization_data;\n          this.legendInfo = vizResult.legend_info;\n\n          // 更新地图显示\n          this.renderSegmentsOnMap();\n        }\n      } catch (error) {\n        console.error('更新可视化失败:', error);\n      }\n    },\n    renderSegmentsOnMap() {\n      if (!this.visualizationData) return;\n      if (this.mapLoaded && this.map) {\n        this.renderSegmentsOnAMap();\n      } else {\n        this.renderSegmentsOnCanvas();\n      }\n    },\n    renderSegmentsOnAMap() {\n      // 清除现有图层\n      this.map.clearMap();\n      const segments = this.visualizationData.segments || [];\n      segments.forEach(segment => {\n        const startPoint = [segment.start_point.lng, segment.start_point.lat];\n        const endPoint = [segment.end_point.lng, segment.end_point.lat];\n        const polyline = new AMap.Polyline({\n          path: [startPoint, endPoint],\n          strokeColor: segment.color,\n          strokeWeight: 4,\n          strokeOpacity: 0.8\n        });\n        this.map.add(polyline);\n\n        // 添加点击事件\n        polyline.on('click', () => {\n          this.showSegmentInfo(segment);\n        });\n      });\n\n      // 调整地图视野\n      if (segments.length > 0) {\n        const bounds = new AMap.Bounds();\n        segments.forEach(segment => {\n          bounds.extend([segment.start_point.lng, segment.start_point.lat]);\n          bounds.extend([segment.end_point.lng, segment.end_point.lat]);\n        });\n        this.map.setBounds(bounds);\n      }\n    },\n    renderSegmentsOnCanvas() {\n      const canvas = this.$refs.fallbackCanvas;\n      if (!canvas) return;\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, 800, 600);\n\n      // 绘制背景\n      ctx.fillStyle = '#f8f9fa';\n      ctx.fillRect(0, 0, 800, 600);\n\n      // 绘制路段（简化显示）\n      const segments = this.visualizationData.segments || [];\n      if (segments.length > 0) {\n        segments.forEach((segment, index) => {\n          const x = index % 10 * 80 + 40;\n          const y = Math.floor(index / 10) * 60 + 40;\n          ctx.fillStyle = segment.color;\n          ctx.fillRect(x, y, 60, 40);\n          ctx.fillStyle = '#333';\n          ctx.font = '10px Arial';\n          ctx.fillText(segment.segment_id.slice(-4), x + 5, y + 15);\n          ctx.fillText(`${segment.value}`, x + 5, y + 30);\n        });\n      }\n\n      // 绘制标题\n      ctx.fillStyle = '#333';\n      ctx.font = '16px Arial';\n      ctx.fillText('路段可视化 (Canvas模式)', 20, 25);\n    },\n    async onConfigChange() {\n      // 延迟执行分析，避免频繁请求\n      clearTimeout(this.configChangeTimer);\n      this.configChangeTimer = setTimeout(() => {\n        this.performAnalysis();\n      }, 1000);\n    },\n    async onVisualizationChange() {\n      await this.updateVisualization();\n    },\n    async refreshVisualization() {\n      await this.updateVisualization();\n    },\n    selectSegment(segment) {\n      this.selectedSegment = segment;\n    },\n    focusOnSegment(segment) {\n      if (this.mapLoaded && this.map) {\n        const center = [(segment.start_point.lng + segment.end_point.lng) / 2, (segment.start_point.lat + segment.end_point.lat) / 2];\n        this.map.setCenter(center);\n        this.map.setZoom(15);\n      }\n      this.selectSegment(segment);\n      this.$message.success(`已定位到路段: ${segment.segment_id}`);\n    },\n    showSegmentInfo(segment) {\n      this.$message.info(`路段 ${segment.segment_id}: ${segment.value}`);\n    },\n    exportData() {\n      if (!this.analysisData) return;\n      const data = {\n        analysis_summary: this.analysisData.analysis,\n        segment_details: this.segmentDetails,\n        network_metrics: this.networkMetrics,\n        export_time: new Date().toISOString()\n      };\n      const blob = new Blob([JSON.stringify(data, null, 2)], {\n        type: 'application/json'\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `road_analysis_${Date.now()}.json`;\n      a.click();\n      URL.revokeObjectURL(url);\n      this.$message.success('数据导出成功');\n    },\n    getRoadTypeLabel(type) {\n      const labels = {\n        highway: '高速公路',\n        arterial: '主干道',\n        urban: '城市道路',\n        local: '支路'\n      };\n      return labels[type] || type;\n    },\n    getCongestionLabel(level) {\n      const labels = {\n        free: '畅通',\n        moderate: '缓慢',\n        heavy: '拥堵',\n        jam: '严重拥堵'\n      };\n      return labels[level] || level;\n    },\n    getFlowPolylinePoints() {\n      if (!this.flowPatterns || this.flowPatterns.length === 0) return '';\n      const maxFlow = Math.max(...this.flowPatterns.map(p => p.avg_flow));\n      return this.flowPatterns.map(pattern => {\n        const x = pattern.hour * 30;\n        const y = 180 - pattern.avg_flow / maxFlow * 160;\n        return `${x},${y}`;\n      }).join(' ');\n    },\n    getCongestionPolylinePoints() {\n      if (!this.flowPatterns || this.flowPatterns.length === 0) return '';\n      return this.flowPatterns.map(pattern => {\n        const x = pattern.hour * 30;\n        const y = 180 - pattern.congestion_index * 160;\n        return `${x},${y}`;\n      }).join(' ');\n    }\n  }\n};","map":{"version":3,"names":["performRoadAnalysis","getRoadVisualizationData","getRoadNetworkMetrics","name","data","isLoading","mapLoaded","map","analysisConfig","analysis_type","segment_types","aggregation_level","include_patterns","min_vehicles","visualizationType","analysisData","visualizationData","networkMetrics","speedDistributions","flowPatterns","segmentDetails","selectedSegment","currentPage","pageSize","legendInfo","computed","activeSegments","analysis","segments_data","length","avgSpeed","summary","network_summary","network_avg_speed","toFixed","avgFlow","totalFlow","reduce","sum","s","flow_rate","bottleneckCount","bottleneck_segments","paginatedSegments","start","end","slice","totalPages","Math","ceil","mounted","initializeComponent","methods","initializeMap","performAnalysis","error","console","AMap","Map","zoom","center","mapStyle","warn","initializeFallbackCanvas","$nextTick","canvas","$refs","fallbackCanvas","ctx","getContext","fillStyle","fillRect","font","textAlign","fillText","analysisResult","success","speed_distributions","flow_patterns","buildSegmentDetails","loadNetworkMetrics","updateVisualization","$message","message","segments","trafficData","traffic_data","trafficMap","forEach","segment_id","push","segment","traffic","avgTraffic","calculateAverageTraffic","trafficList","avg_speed","congestion_level","t","congestionCounts","mostCommonCongestion","Object","keys","a","b","metricsResult","metrics","params","visualization_type","time_range","Date","now","vizResult","visualization_data","legend_info","renderSegmentsOnMap","renderSegmentsOnAMap","renderSegmentsOnCanvas","clearMap","startPoint","start_point","lng","lat","endPoint","end_point","polyline","Polyline","path","strokeColor","color","strokeWeight","strokeOpacity","add","on","showSegmentInfo","bounds","Bounds","extend","setBounds","clearRect","index","x","y","floor","value","onConfigChange","clearTimeout","configChangeTimer","setTimeout","onVisualizationChange","refreshVisualization","selectSegment","focusOnSegment","setCenter","setZoom","info","exportData","analysis_summary","segment_details","network_metrics","export_time","toISOString","blob","Blob","JSON","stringify","type","url","URL","createObjectURL","document","createElement","href","download","click","revokeObjectURL","getRoadTypeLabel","labels","highway","arterial","urban","local","getCongestionLabel","level","free","moderate","heavy","jam","getFlowPolylinePoints","maxFlow","max","p","avg_flow","pattern","hour","join","getCongestionPolylinePoints","congestion_index"],"sources":["E:\\hhh\\frontend\\src\\modules\\trafficVisualization\\TrafficRoad.vue"],"sourcesContent":["<template>\r\n  <div class=\"road-segment-analysis\">\r\n    <!-- 标题栏 -->\r\n    <div class=\"analysis-header\">\r\n      <h2>路段数据分析</h2>\r\n      <p class=\"subtitle\">展示不同路段的通行状况、速度、距离等指标</p>\r\n    </div>\r\n\r\n    <!-- 控制面板 -->\r\n    <div class=\"control-panel\">\r\n      <div class=\"panel-row\">\r\n        <!-- 分析类型选择 -->\r\n        <div class=\"control-group\">\r\n          <label>分析类型:</label>\r\n          <select v-model=\"analysisConfig.analysis_type\" @change=\"onConfigChange\">\r\n            <option value=\"comprehensive\">综合分析</option>\r\n            <option value=\"speed\">速度分析</option>\r\n            <option value=\"flow\">流量分析</option>\r\n            <option value=\"congestion\">拥堵分析</option>\r\n          </select>\r\n        </div>\r\n\r\n        <!-- 路段类型筛选 -->\r\n        <div class=\"control-group\">\r\n          <label>路段类型:</label>\r\n          <select v-model=\"analysisConfig.segment_types[0]\" @change=\"onConfigChange\">\r\n            <option value=\"all\">全部路段</option>\r\n            <option value=\"highway\">高速公路</option>\r\n            <option value=\"arterial\">主干道</option>\r\n            <option value=\"urban\">城市道路</option>\r\n            <option value=\"local\">支路</option>\r\n          </select>\r\n        </div>\r\n\r\n        <!-- 可视化类型 -->\r\n        <div class=\"control-group\">\r\n          <label>可视化:</label>\r\n          <select v-model=\"visualizationType\" @change=\"onVisualizationChange\">\r\n            <option value=\"speed\">速度分布</option>\r\n            <option value=\"flow\">流量分布</option>\r\n            <option value=\"congestion\">拥堵程度</option>\r\n            <option value=\"efficiency\">运行效率</option>\r\n          </select>\r\n        </div>\r\n\r\n        <!-- 最小车辆数 -->\r\n        <div class=\"control-group\">\r\n          <label>最小车辆数:</label>\r\n          <input \r\n            type=\"number\" \r\n            v-model.number=\"analysisConfig.min_vehicles\" \r\n            min=\"1\" \r\n            max=\"50\"\r\n            @change=\"onConfigChange\"\r\n          />\r\n        </div>\r\n\r\n        <!-- 分析按钮 -->\r\n        <div class=\"control-group\">\r\n          <button \r\n            @click=\"performAnalysis\" \r\n            :disabled=\"isLoading\"\r\n            class=\"analyze-btn\"\r\n          >\r\n            {{ isLoading ? '分析中...' : '开始分析' }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 统计卡片 -->\r\n    <div class=\"stats-cards\" v-if=\"analysisData\">\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-value\">{{ analysisData.analysis?.total_segments || 0 }}</div>\r\n        <div class=\"stat-label\">总路段数</div>\r\n      </div>\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-value\">{{ activeSegments }}</div>\r\n        <div class=\"stat-label\">活跃路段</div>\r\n      </div>\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-value\">{{ avgSpeed }}</div>\r\n        <div class=\"stat-label\">平均速度 (km/h)</div>\r\n      </div>\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-value\">{{ avgFlow }}</div>\r\n        <div class=\"stat-label\">平均流量 (veh/h)</div>\r\n      </div>\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-value\">{{ bottleneckCount }}</div>\r\n        <div class=\"stat-label\">瓶颈路段</div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 主要内容区域 -->\r\n    <div class=\"main-content\">\r\n      <!-- 地图可视化区域 -->\r\n      <div class=\"map-section\">\r\n        <div class=\"map-header\">\r\n          <h3>路段可视化地图</h3>\r\n          <div class=\"map-controls\">\r\n            <button @click=\"refreshVisualization\" :disabled=\"isLoading\">\r\n              刷新可视化\r\n            </button>\r\n            <button @click=\"exportData\" :disabled=\"!analysisData\">\r\n              导出数据\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- 地图容器 -->\r\n        <div class=\"map-container\">\r\n          <div \r\n            id=\"road-analysis-map\" \r\n            class=\"map-canvas\"\r\n            v-show=\"mapLoaded\"\r\n          ></div>\r\n          <div \r\n            v-show=\"!mapLoaded\" \r\n            class=\"map-fallback\"\r\n          >\r\n            <canvas \r\n              ref=\"fallbackCanvas\"\r\n              class=\"fallback-canvas\"\r\n              width=\"800\"\r\n              height=\"600\"\r\n            ></canvas>\r\n            <div class=\"canvas-overlay\">\r\n              <p>地图加载中，使用Canvas降级显示</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 图例 -->\r\n        <div class=\"legend\" v-if=\"legendInfo && legendInfo.ranges\">\r\n          <h4>{{ legendInfo.title }}</h4>\r\n          <div class=\"legend-items\">\r\n            <div \r\n              v-for=\"(range, index) in legendInfo.ranges\" \r\n              :key=\"index\"\r\n              class=\"legend-item\"\r\n            >\r\n              <div \r\n                class=\"legend-color\" \r\n                :style=\"{ backgroundColor: range.color }\"\r\n              ></div>\r\n              <span class=\"legend-label\">{{ range.label }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 数据分析面板 -->\r\n      <div class=\"analysis-panel\">\r\n        <!-- 速度分布图表 -->\r\n        <div class=\"chart-section\" v-if=\"speedDistributions && speedDistributions.length > 0\">\r\n          <h3>速度分布</h3>\r\n          <div class=\"speed-chart\">\r\n            <div \r\n              v-for=\"dist in speedDistributions\" \r\n              :key=\"dist.speed_range\"\r\n              class=\"speed-bar\"\r\n            >\r\n              <div class=\"bar-container\">\r\n                <div \r\n                  class=\"bar-fill\"\r\n                  :style=\"{ width: dist.percentage + '%' }\"\r\n                ></div>\r\n                <span class=\"bar-label\">{{ dist.speed_range }}</span>\r\n              </div>\r\n              <div class=\"bar-value\">{{ dist.percentage.toFixed(1) }}%</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 流量模式图表 -->\r\n        <div class=\"chart-section\" v-if=\"flowPatterns && flowPatterns.length > 0\">\r\n          <h3>24小时流量模式</h3>\r\n          <div class=\"flow-chart\">\r\n            <svg width=\"100%\" height=\"200\" viewBox=\"0 0 800 200\">\r\n              <g transform=\"translate(40,20)\">\r\n                <!-- 背景网格 -->\r\n                <g class=\"grid\">\r\n                  <line v-for=\"i in 5\" :key=\"'h'+i\" \r\n                        :x1=\"0\" :x2=\"720\" \r\n                        :y1=\"i*36\" :y2=\"i*36\" \r\n                        stroke=\"#e0e0e0\" stroke-width=\"1\"/>\r\n                  <line v-for=\"i in 25\" :key=\"'v'+i\" \r\n                        :x1=\"i*30\" :x2=\"i*30\" \r\n                        :y1=\"0\" :y2=\"180\" \r\n                        stroke=\"#e0e0e0\" stroke-width=\"0.5\"/>\r\n                </g>\r\n                \r\n                <!-- 流量曲线 -->\r\n                <polyline \r\n                  :points=\"getFlowPolylinePoints()\"\r\n                  fill=\"none\" \r\n                  stroke=\"#2196F3\" \r\n                  stroke-width=\"2\"\r\n                />\r\n                \r\n                <!-- 拥堵指数曲线 -->\r\n                <polyline \r\n                  :points=\"getCongestionPolylinePoints()\"\r\n                  fill=\"none\" \r\n                  stroke=\"#F44336\" \r\n                  stroke-width=\"2\"\r\n                />\r\n                \r\n                <!-- X轴标签 -->\r\n                <g class=\"x-axis\">\r\n                  <text v-for=\"hour in [0,6,12,18,24]\" :key=\"hour\"\r\n                        :x=\"hour*30\" y=\"195\" \r\n                        text-anchor=\"middle\" \r\n                        font-size=\"12\" \r\n                        fill=\"#666\">\r\n                    {{ hour }}:00\r\n                  </text>\r\n                </g>\r\n              </g>\r\n            </svg>\r\n            <div class=\"chart-legend\">\r\n              <span class=\"legend-item\">\r\n                <span class=\"legend-line flow\"></span>\r\n                流量\r\n              </span>\r\n              <span class=\"legend-item\">\r\n                <span class=\"legend-line congestion\"></span>\r\n                拥堵指数\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 路段详情列表 -->\r\n        <div class=\"segments-list\" v-if=\"segmentDetails && segmentDetails.length > 0\">\r\n          <h3>路段详情</h3>\r\n          <div class=\"segments-table\">\r\n            <div class=\"table-header\">\r\n              <div class=\"col-id\">路段ID</div>\r\n              <div class=\"col-type\">类型</div>\r\n              <div class=\"col-length\">长度(km)</div>\r\n              <div class=\"col-speed\">平均速度</div>\r\n              <div class=\"col-flow\">流量</div>\r\n              <div class=\"col-congestion\">拥堵状态</div>\r\n              <div class=\"col-action\">操作</div>\r\n            </div>\r\n            <div class=\"table-body\">\r\n              <div \r\n                v-for=\"segment in paginatedSegments\" \r\n                :key=\"segment.segment_id\"\r\n                class=\"table-row\"\r\n                @click=\"selectSegment(segment)\"\r\n                :class=\"{ active: selectedSegment?.segment_id === segment.segment_id }\"\r\n              >\r\n                <div class=\"col-id\">{{ segment.segment_id }}</div>\r\n                <div class=\"col-type\">{{ getRoadTypeLabel(segment.road_type) }}</div>\r\n                <div class=\"col-length\">{{ segment.segment_length?.toFixed(3) || 'N/A' }}</div>\r\n                <div class=\"col-speed\">{{ segment.avg_speed?.toFixed(1) || 'N/A' }}</div>\r\n                <div class=\"col-flow\">{{ segment.flow_rate?.toFixed(0) || 'N/A' }}</div>\r\n                <div class=\"col-congestion\">\r\n                  <span :class=\"'congestion-' + segment.congestion_level\">\r\n                    {{ getCongestionLabel(segment.congestion_level) }}\r\n                  </span>\r\n                </div>\r\n                <div class=\"col-action\">\r\n                  <button @click.stop=\"focusOnSegment(segment)\" class=\"focus-btn\">\r\n                    定位\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <!-- 分页控制 -->\r\n            <div class=\"pagination\" v-if=\"totalPages > 1\">\r\n              <button \r\n                @click=\"currentPage = Math.max(1, currentPage - 1)\"\r\n                :disabled=\"currentPage === 1\"\r\n              >\r\n                上一页\r\n              </button>\r\n              <span>{{ currentPage }} / {{ totalPages }}</span>\r\n              <button \r\n                @click=\"currentPage = Math.min(totalPages, currentPage + 1)\"\r\n                :disabled=\"currentPage === totalPages\"\r\n              >\r\n                下一页\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 网络指标摘要 -->\r\n        <div class=\"network-summary\" v-if=\"networkMetrics\">\r\n          <h3>路网指标摘要</h3>\r\n          <div class=\"metrics-grid\">\r\n            <div class=\"metric-item\">\r\n              <div class=\"metric-label\">网络平均速度</div>\r\n              <div class=\"metric-value\">{{ networkMetrics.traffic_performance?.avg_speed?.toFixed(1) || 'N/A' }} km/h</div>\r\n            </div>\r\n            <div class=\"metric-item\">\r\n              <div class=\"metric-label\">网络利用率</div>\r\n              <div class=\"metric-value\">{{ networkMetrics.efficiency_indicators?.network_utilization?.toFixed(1) || 'N/A' }}%</div>\r\n            </div>\r\n            <div class=\"metric-item\">\r\n              <div class=\"metric-label\">畅通率</div>\r\n              <div class=\"metric-value\">{{ networkMetrics.efficiency_indicators?.free_flow_percentage?.toFixed(1) || 'N/A' }}%</div>\r\n            </div>\r\n            <div class=\"metric-item\">\r\n              <div class=\"metric-label\">瓶颈率</div>\r\n              <div class=\"metric-value\">{{ networkMetrics.efficiency_indicators?.bottleneck_rate?.toFixed(1) || 'N/A' }}%</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 加载遮罩 -->\r\n    <div v-if=\"isLoading\" class=\"loading-overlay\">\r\n      <div class=\"loading-spinner\"></div>\r\n      <p>正在分析路段数据，请稍候...</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { \r\n  performRoadAnalysis, \r\n  getRoadVisualizationData, \r\n  getRoadNetworkMetrics \r\n} from '@/api/traffic'\r\n\r\nexport default {\r\n  name: 'TrafficRoad',\r\n  data() {\r\n    return {\r\n      isLoading: false,\r\n      mapLoaded: false,\r\n      map: null,\r\n      \r\n      // 分析配置\r\n      analysisConfig: {\r\n        analysis_type: 'comprehensive',\r\n        segment_types: ['all'],\r\n        aggregation_level: 'segment',\r\n        include_patterns: true,\r\n        min_vehicles: 10\r\n      },\r\n      \r\n      // 可视化配置\r\n      visualizationType: 'speed',\r\n      \r\n      // 分析数据\r\n      analysisData: null,\r\n      visualizationData: null,\r\n      networkMetrics: null,\r\n      \r\n      // 图表数据\r\n      speedDistributions: [],\r\n      flowPatterns: [],\r\n      \r\n      // 路段数据\r\n      segmentDetails: [],\r\n      selectedSegment: null,\r\n      \r\n      // 分页\r\n      currentPage: 1,\r\n      pageSize: 10,\r\n      \r\n      // 图例信息\r\n      legendInfo: null\r\n    }\r\n  },\r\n  \r\n  computed: {\r\n    activeSegments() {\r\n      return this.analysisData?.analysis?.segments_data?.length || 0\r\n    },\r\n    \r\n    avgSpeed() {\r\n      const summary = this.analysisData?.analysis?.network_summary\r\n      return summary?.network_avg_speed?.toFixed(1) || 'N/A'\r\n    },\r\n    \r\n    avgFlow() {\r\n      if (!this.segmentDetails || this.segmentDetails.length === 0) return 'N/A'\r\n      const totalFlow = this.segmentDetails.reduce((sum, s) => sum + (s.flow_rate || 0), 0)\r\n      return (totalFlow / this.segmentDetails.length).toFixed(0)\r\n    },\r\n    \r\n    bottleneckCount() {\r\n      return this.analysisData?.analysis?.bottleneck_segments?.length || 0\r\n    },\r\n    \r\n    paginatedSegments() {\r\n      const start = (this.currentPage - 1) * this.pageSize\r\n      const end = start + this.pageSize\r\n      return this.segmentDetails.slice(start, end)\r\n    },\r\n    \r\n    totalPages() {\r\n      return Math.ceil(this.segmentDetails.length / this.pageSize)\r\n    }\r\n  },\r\n  \r\n  mounted() {\r\n    this.initializeComponent()\r\n  },\r\n  \r\n  methods: {\r\n    async initializeComponent() {\r\n      try {\r\n        await this.initializeMap()\r\n        await this.performAnalysis()\r\n      } catch (error) {\r\n        console.error('初始化路段分析组件失败:', error)\r\n      }\r\n    },\r\n    \r\n    async initializeMap() {\r\n      try {\r\n        // 尝试初始化高德地图\r\n        if (typeof AMap !== 'undefined') {\r\n          this.map = new AMap.Map('road-analysis-map', {\r\n            zoom: 11,\r\n            center: [116.397, 39.916],\r\n            mapStyle: 'amap://styles/blue'\r\n          })\r\n          this.mapLoaded = true\r\n        } else {\r\n          console.warn('高德地图API未加载，使用Canvas降级模式')\r\n          this.mapLoaded = false\r\n          this.initializeFallbackCanvas()\r\n        }\r\n      } catch (error) {\r\n        console.warn('地图初始化失败，使用Canvas降级模式:', error)\r\n        this.mapLoaded = false\r\n        this.initializeFallbackCanvas()\r\n      }\r\n    },\r\n    \r\n    initializeFallbackCanvas() {\r\n      this.$nextTick(() => {\r\n        const canvas = this.$refs.fallbackCanvas\r\n        if (canvas) {\r\n          const ctx = canvas.getContext('2d')\r\n          ctx.fillStyle = '#f0f0f0'\r\n          ctx.fillRect(0, 0, 800, 600)\r\n          \r\n          ctx.fillStyle = '#666'\r\n          ctx.font = '16px Arial'\r\n          ctx.textAlign = 'center'\r\n          ctx.fillText('路段分析地图', 400, 300)\r\n          ctx.fillText('(Canvas降级模式)', 400, 320)\r\n        }\r\n      })\r\n    },\r\n    \r\n    async performAnalysis() {\r\n      this.isLoading = true\r\n      try {\r\n        // 执行路段分析\r\n        const analysisResult = await performRoadAnalysis(this.analysisConfig)\r\n        \r\n        if (analysisResult.success) {\r\n          this.analysisData = analysisResult\r\n          this.speedDistributions = analysisResult.speed_distributions || []\r\n          this.flowPatterns = analysisResult.flow_patterns || []\r\n          \r\n          // 构建路段详情数据\r\n          this.buildSegmentDetails()\r\n          \r\n          // 获取网络指标\r\n          await this.loadNetworkMetrics()\r\n          \r\n          // 更新可视化\r\n          await this.updateVisualization()\r\n          \r\n          this.$message.success('路段分析完成')\r\n        } else {\r\n          this.$message.error(`分析失败: ${analysisResult.message}`)\r\n        }\r\n      } catch (error) {\r\n        console.error('路段分析失败:', error)\r\n        this.$message.error('分析过程中发生错误')\r\n      } finally {\r\n        this.isLoading = false\r\n      }\r\n    },\r\n    \r\n    buildSegmentDetails() {\r\n      if (!this.analysisData) return\r\n      \r\n      const segments = this.analysisData.analysis?.segments_data || []\r\n      const trafficData = this.analysisData.traffic_data || []\r\n      \r\n      // 创建路段到交通数据的映射\r\n      const trafficMap = {}\r\n      trafficData.forEach(data => {\r\n        if (!trafficMap[data.segment_id]) {\r\n          trafficMap[data.segment_id] = []\r\n        }\r\n        trafficMap[data.segment_id].push(data)\r\n      })\r\n      \r\n      // 构建详情数据\r\n      this.segmentDetails = segments.map(segment => {\r\n        const traffic = trafficMap[segment.segment_id] || []\r\n        const avgTraffic = this.calculateAverageTraffic(traffic)\r\n        \r\n        return {\r\n          ...segment,\r\n          ...avgTraffic\r\n        }\r\n      })\r\n    },\r\n    \r\n    calculateAverageTraffic(trafficList) {\r\n      if (!trafficList || trafficList.length === 0) {\r\n        return {\r\n          avg_speed: 0,\r\n          flow_rate: 0,\r\n          congestion_level: 'unknown'\r\n        }\r\n      }\r\n      \r\n      const avgSpeed = trafficList.reduce((sum, t) => sum + t.avg_speed, 0) / trafficList.length\r\n      const avgFlow = trafficList.reduce((sum, t) => sum + t.flow_rate, 0) / trafficList.length\r\n      \r\n      // 取最常见的拥堵等级\r\n      const congestionCounts = {}\r\n      trafficList.forEach(t => {\r\n        congestionCounts[t.congestion_level] = (congestionCounts[t.congestion_level] || 0) + 1\r\n      })\r\n      \r\n      const mostCommonCongestion = Object.keys(congestionCounts).reduce((a, b) => \r\n        congestionCounts[a] > congestionCounts[b] ? a : b\r\n      )\r\n      \r\n      return {\r\n        avg_speed: avgSpeed,\r\n        flow_rate: avgFlow,\r\n        congestion_level: mostCommonCongestion\r\n      }\r\n    },\r\n    \r\n    async loadNetworkMetrics() {\r\n      try {\r\n        const metricsResult = await getRoadNetworkMetrics()\r\n        if (metricsResult.success) {\r\n          this.networkMetrics = metricsResult.metrics\r\n        }\r\n      } catch (error) {\r\n        console.error('加载网络指标失败:', error)\r\n      }\r\n    },\r\n    \r\n    async updateVisualization() {\r\n      try {\r\n        const params = {\r\n          visualization_type: this.visualizationType,\r\n          time_range: {\r\n            start: Date.now() / 1000 - 3600,\r\n            end: Date.now() / 1000\r\n          }\r\n        }\r\n        \r\n        const vizResult = await getRoadVisualizationData(params)\r\n        \r\n        if (vizResult.success) {\r\n          this.visualizationData = vizResult.visualization_data\r\n          this.legendInfo = vizResult.legend_info\r\n          \r\n          // 更新地图显示\r\n          this.renderSegmentsOnMap()\r\n        }\r\n      } catch (error) {\r\n        console.error('更新可视化失败:', error)\r\n      }\r\n    },\r\n    \r\n    renderSegmentsOnMap() {\r\n      if (!this.visualizationData) return\r\n      \r\n      if (this.mapLoaded && this.map) {\r\n        this.renderSegmentsOnAMap()\r\n      } else {\r\n        this.renderSegmentsOnCanvas()\r\n      }\r\n    },\r\n    \r\n    renderSegmentsOnAMap() {\r\n      // 清除现有图层\r\n      this.map.clearMap()\r\n      \r\n      const segments = this.visualizationData.segments || []\r\n      \r\n      segments.forEach(segment => {\r\n        const startPoint = [segment.start_point.lng, segment.start_point.lat]\r\n        const endPoint = [segment.end_point.lng, segment.end_point.lat]\r\n        \r\n        const polyline = new AMap.Polyline({\r\n          path: [startPoint, endPoint],\r\n          strokeColor: segment.color,\r\n          strokeWeight: 4,\r\n          strokeOpacity: 0.8\r\n        })\r\n        \r\n        this.map.add(polyline)\r\n        \r\n        // 添加点击事件\r\n        polyline.on('click', () => {\r\n          this.showSegmentInfo(segment)\r\n        })\r\n      })\r\n      \r\n      // 调整地图视野\r\n      if (segments.length > 0) {\r\n        const bounds = new AMap.Bounds()\r\n        segments.forEach(segment => {\r\n          bounds.extend([segment.start_point.lng, segment.start_point.lat])\r\n          bounds.extend([segment.end_point.lng, segment.end_point.lat])\r\n        })\r\n        this.map.setBounds(bounds)\r\n      }\r\n    },\r\n    \r\n    renderSegmentsOnCanvas() {\r\n      const canvas = this.$refs.fallbackCanvas\r\n      if (!canvas) return\r\n      \r\n      const ctx = canvas.getContext('2d')\r\n      ctx.clearRect(0, 0, 800, 600)\r\n      \r\n      // 绘制背景\r\n      ctx.fillStyle = '#f8f9fa'\r\n      ctx.fillRect(0, 0, 800, 600)\r\n      \r\n      // 绘制路段（简化显示）\r\n      const segments = this.visualizationData.segments || []\r\n      \r\n      if (segments.length > 0) {\r\n        segments.forEach((segment, index) => {\r\n          const x = (index % 10) * 80 + 40\r\n          const y = Math.floor(index / 10) * 60 + 40\r\n          \r\n          ctx.fillStyle = segment.color\r\n          ctx.fillRect(x, y, 60, 40)\r\n          \r\n          ctx.fillStyle = '#333'\r\n          ctx.font = '10px Arial'\r\n          ctx.fillText(segment.segment_id.slice(-4), x + 5, y + 15)\r\n          ctx.fillText(`${segment.value}`, x + 5, y + 30)\r\n        })\r\n      }\r\n      \r\n      // 绘制标题\r\n      ctx.fillStyle = '#333'\r\n      ctx.font = '16px Arial'\r\n      ctx.fillText('路段可视化 (Canvas模式)', 20, 25)\r\n    },\r\n    \r\n    async onConfigChange() {\r\n      // 延迟执行分析，避免频繁请求\r\n      clearTimeout(this.configChangeTimer)\r\n      this.configChangeTimer = setTimeout(() => {\r\n        this.performAnalysis()\r\n      }, 1000)\r\n    },\r\n    \r\n    async onVisualizationChange() {\r\n      await this.updateVisualization()\r\n    },\r\n    \r\n    async refreshVisualization() {\r\n      await this.updateVisualization()\r\n    },\r\n    \r\n    selectSegment(segment) {\r\n      this.selectedSegment = segment\r\n    },\r\n    \r\n    focusOnSegment(segment) {\r\n      if (this.mapLoaded && this.map) {\r\n        const center = [\r\n          (segment.start_point.lng + segment.end_point.lng) / 2,\r\n          (segment.start_point.lat + segment.end_point.lat) / 2\r\n        ]\r\n        this.map.setCenter(center)\r\n        this.map.setZoom(15)\r\n      }\r\n      \r\n      this.selectSegment(segment)\r\n      this.$message.success(`已定位到路段: ${segment.segment_id}`)\r\n    },\r\n    \r\n    showSegmentInfo(segment) {\r\n      this.$message.info(`路段 ${segment.segment_id}: ${segment.value}`)\r\n    },\r\n    \r\n    exportData() {\r\n      if (!this.analysisData) return\r\n      \r\n      const data = {\r\n        analysis_summary: this.analysisData.analysis,\r\n        segment_details: this.segmentDetails,\r\n        network_metrics: this.networkMetrics,\r\n        export_time: new Date().toISOString()\r\n      }\r\n      \r\n      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' })\r\n      const url = URL.createObjectURL(blob)\r\n      const a = document.createElement('a')\r\n      a.href = url\r\n      a.download = `road_analysis_${Date.now()}.json`\r\n      a.click()\r\n      URL.revokeObjectURL(url)\r\n      \r\n      this.$message.success('数据导出成功')\r\n    },\r\n    \r\n    getRoadTypeLabel(type) {\r\n      const labels = {\r\n        highway: '高速公路',\r\n        arterial: '主干道',\r\n        urban: '城市道路',\r\n        local: '支路'\r\n      }\r\n      return labels[type] || type\r\n    },\r\n    \r\n    getCongestionLabel(level) {\r\n      const labels = {\r\n        free: '畅通',\r\n        moderate: '缓慢',\r\n        heavy: '拥堵',\r\n        jam: '严重拥堵'\r\n      }\r\n      return labels[level] || level\r\n    },\r\n    \r\n    getFlowPolylinePoints() {\r\n      if (!this.flowPatterns || this.flowPatterns.length === 0) return ''\r\n      \r\n      const maxFlow = Math.max(...this.flowPatterns.map(p => p.avg_flow))\r\n      return this.flowPatterns.map(pattern => {\r\n        const x = pattern.hour * 30\r\n        const y = 180 - (pattern.avg_flow / maxFlow * 160)\r\n        return `${x},${y}`\r\n      }).join(' ')\r\n    },\r\n    \r\n    getCongestionPolylinePoints() {\r\n      if (!this.flowPatterns || this.flowPatterns.length === 0) return ''\r\n      \r\n      return this.flowPatterns.map(pattern => {\r\n        const x = pattern.hour * 30\r\n        const y = 180 - (pattern.congestion_index * 160)\r\n        return `${x},${y}`\r\n      }).join(' ')\r\n    }\r\n  }\r\n}\r\n</script> \r\n\r\n<style scoped>\r\n.road-segment-analysis {\r\n  padding: 20px;\r\n  background: #f8f9fa;\r\n  min-height: 100vh;\r\n}\r\n\r\n.analysis-header {\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.analysis-header h2 {\r\n  color: #2c3e50;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.subtitle {\r\n  color: #7f8c8d;\r\n  margin: 0;\r\n}\r\n\r\n.control-panel {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.panel-row {\r\n  display: flex;\r\n  gap: 20px;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n}\r\n\r\n.control-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n}\r\n\r\n.control-group label {\r\n  font-size: 12px;\r\n  color: #666;\r\n  font-weight: 500;\r\n}\r\n\r\n.control-group select,\r\n.control-group input {\r\n  padding: 8px 12px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n}\r\n\r\n.analyze-btn {\r\n  padding: 8px 16px;\r\n  background: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  margin-top: 20px;\r\n}\r\n\r\n.analyze-btn:disabled {\r\n  background: #ccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.stats-cards {\r\n  display: flex;\r\n  gap: 20px;\r\n  margin-bottom: 20px;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.stat-card {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  text-align: center;\r\n  flex: 1;\r\n  min-width: 120px;\r\n}\r\n\r\n.stat-value {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  color: #2c3e50;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.stat-label {\r\n  font-size: 12px;\r\n  color: #7f8c8d;\r\n}\r\n\r\n.main-content {\r\n  display: grid;\r\n  grid-template-columns: 2fr 1fr;\r\n  gap: 20px;\r\n}\r\n\r\n.map-section {\r\n  background: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  overflow: hidden;\r\n}\r\n\r\n.map-header {\r\n  padding: 15px;\r\n  border-bottom: 1px solid #eee;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.map-header h3 {\r\n  margin: 0;\r\n  color: #2c3e50;\r\n}\r\n\r\n.map-controls {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.map-controls button {\r\n  padding: 6px 12px;\r\n  border: 1px solid #ddd;\r\n  background: white;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 12px;\r\n}\r\n\r\n.map-container {\r\n  position: relative;\r\n  height: 400px;\r\n}\r\n\r\n.map-canvas,\r\n.map-fallback {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.fallback-canvas {\r\n  display: block;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.canvas-overlay {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  background: rgba(255,255,255,0.9);\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  font-size: 12px;\r\n  color: #666;\r\n}\r\n\r\n.legend {\r\n  padding: 15px;\r\n  border-top: 1px solid #eee;\r\n}\r\n\r\n.legend h4 {\r\n  margin: 0 0 10px 0;\r\n  color: #2c3e50;\r\n  font-size: 14px;\r\n}\r\n\r\n.legend-items {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n}\r\n\r\n.legend-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n  font-size: 12px;\r\n}\r\n\r\n.legend-color {\r\n  width: 16px;\r\n  height: 16px;\r\n  border-radius: 2px;\r\n}\r\n\r\n.analysis-panel {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n}\r\n\r\n.chart-section {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n}\r\n\r\n.chart-section h3 {\r\n  margin: 0 0 15px 0;\r\n  color: #2c3e50;\r\n  font-size: 16px;\r\n}\r\n\r\n.speed-chart {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n}\r\n\r\n.speed-bar {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n}\r\n\r\n.bar-container {\r\n  flex: 1;\r\n  position: relative;\r\n  height: 24px;\r\n  background: #f5f5f5;\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n}\r\n\r\n.bar-fill {\r\n  height: 100%;\r\n  background: linear-gradient(90deg, #4CAF50, #2196F3);\r\n  border-radius: 12px;\r\n  transition: width 0.3s ease;\r\n}\r\n\r\n.bar-label {\r\n  position: absolute;\r\n  left: 8px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  font-size: 11px;\r\n  color: #333;\r\n  font-weight: 500;\r\n}\r\n\r\n.bar-value {\r\n  min-width: 40px;\r\n  font-size: 12px;\r\n  color: #666;\r\n  text-align: right;\r\n}\r\n\r\n.flow-chart {\r\n  margin-top: 10px;\r\n}\r\n\r\n.chart-legend {\r\n  display: flex;\r\n  gap: 20px;\r\n  margin-top: 10px;\r\n  justify-content: center;\r\n}\r\n\r\n.legend-line {\r\n  display: inline-block;\r\n  width: 20px;\r\n  height: 2px;\r\n  margin-right: 5px;\r\n}\r\n\r\n.legend-line.flow {\r\n  background: #2196F3;\r\n}\r\n\r\n.legend-line.congestion {\r\n  background: #F44336;\r\n}\r\n\r\n.segments-list {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n}\r\n\r\n.segments-table {\r\n  border: 1px solid #eee;\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n}\r\n\r\n.table-header,\r\n.table-row {\r\n  display: grid;\r\n  grid-template-columns: 80px 60px 70px 70px 60px 80px 50px;\r\n  align-items: center;\r\n}\r\n\r\n.table-header {\r\n  background: #f8f9fa;\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  color: #2c3e50;\r\n  padding: 12px 8px;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.table-row {\r\n  padding: 10px 8px;\r\n  border-bottom: 1px solid #f0f0f0;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n  font-size: 12px;\r\n}\r\n\r\n.table-row:hover {\r\n  background: #f8f9fa;\r\n}\r\n\r\n.table-row.active {\r\n  background: #e3f2fd;\r\n}\r\n\r\n.table-row > div {\r\n  padding: 0 4px;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n}\r\n\r\n.congestion-free { color: #4CAF50; }\r\n.congestion-moderate { color: #FF9800; }\r\n.congestion-heavy { color: #F44336; }\r\n.congestion-jam { color: #D32F2F; }\r\n\r\n.focus-btn {\r\n  padding: 4px 8px;\r\n  background: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n  font-size: 10px;\r\n}\r\n\r\n.pagination {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 10px;\r\n  padding: 15px;\r\n  background: #f8f9fa;\r\n}\r\n\r\n.pagination button {\r\n  padding: 6px 12px;\r\n  border: 1px solid #ddd;\r\n  background: white;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 12px;\r\n}\r\n\r\n.pagination button:disabled {\r\n  background: #f5f5f5;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.network-summary {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n}\r\n\r\n.metrics-grid {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 15px;\r\n}\r\n\r\n.metric-item {\r\n  text-align: center;\r\n}\r\n\r\n.metric-label {\r\n  font-size: 12px;\r\n  color: #666;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.metric-value {\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  color: #2c3e50;\r\n}\r\n\r\n.loading-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: rgba(0,0,0,0.5);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: white;\r\n  z-index: 1000;\r\n}\r\n\r\n.loading-spinner {\r\n  width: 40px;\r\n  height: 40px;\r\n  border: 4px solid rgba(255,255,255,0.3);\r\n  border-top: 4px solid white;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n@media (max-width: 1200px) {\r\n  .main-content {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .panel-row {\r\n    justify-content: center;\r\n  }\r\n  \r\n  .stats-cards {\r\n    justify-content: center;\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .table-header,\r\n  .table-row {\r\n    grid-template-columns: 1fr;\r\n    gap: 5px;\r\n  }\r\n  \r\n  .table-header > div,\r\n  .table-row > div {\r\n    padding: 5px;\r\n  }\r\n  \r\n  .metrics-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}