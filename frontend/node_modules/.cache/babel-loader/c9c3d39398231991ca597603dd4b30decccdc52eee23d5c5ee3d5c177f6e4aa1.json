{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createVNode as _createVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"space-y-6 tech-bg\"\n};\nconst _hoisted_2 = {\n  class: \"container mx-auto px-4\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"alert alert-danger mt-3\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" 查询控制面板 \"), _createVNode($setup[\"TrafficQueryPanel\"], {\n    modelValue: $setup.queryParams,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.queryParams = $event),\n    loading: $setup.loading,\n    onQuery: $setup.submitQuery,\n    onClear: $setup.resetQuery\n  }, null, 8 /* PROPS */, [\"modelValue\", \"loading\"]), _createCommentVNode(\" 错误提示 \"), $setup.showError ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _toDisplayString($setup.errorMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 地图显示区域 \"), _createVNode($setup[\"TrafficMapPanel\"], {\n    data: $setup.trafficData,\n    \"view-type\": $setup.queryParams.viewType,\n    \"map-style\": $setup.queryParams.mapStyle,\n    loading: $setup.loading,\n    \"vehicle-id\": $setup.queryParams.vehicleId\n  }, null, 8 /* PROPS */, [\"data\", \"view-type\", \"map-style\", \"loading\", \"vehicle-id\"]), _createCommentVNode(\" 数据统计面板 \"), $setup.trafficData.length > 0 ? (_openBlock(), _createBlock($setup[\"TrafficStatsPanel\"], {\n    key: 1,\n    totalCount: $setup.trafficData.length,\n    timeSpan: $setup.timeSpan,\n    coverageArea: $setup.coverageArea,\n    activeVehicles: $setup.activeVehicles,\n    averageSpeed: $setup.averageSpeed,\n    totalDistance: $setup.totalDistance,\n    lastUpdate: $setup.lastUpdate\n  }, null, 8 /* PROPS */, [\"totalCount\", \"timeSpan\", \"coverageArea\", \"activeVehicles\", \"averageSpeed\", \"totalDistance\", \"lastUpdate\"])) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_createVNode","$setup","queryParams","$event","loading","onQuery","submitQuery","onClear","resetQuery","showError","_hoisted_3","_toDisplayString","errorMessage","data","trafficData","viewType","mapStyle","vehicleId","length","_createBlock","totalCount","timeSpan","coverageArea","activeVehicles","averageSpeed","totalDistance","lastUpdate"],"sources":["E:\\hhh\\frontend\\src\\modules\\trafficVisualization\\TrafficOverview.vue"],"sourcesContent":["<template>\r\n  <div class=\"space-y-6 tech-bg\">\r\n    <div class=\"container mx-auto px-4\">\r\n      <!-- 查询控制面板 -->\r\n      <TrafficQueryPanel\r\n        v-model=\"queryParams\"\r\n        :loading=\"loading\"\r\n        @query=\"submitQuery\"\r\n        @clear=\"resetQuery\"\r\n      />\r\n      \r\n      <!-- 错误提示 -->\r\n      <div v-if=\"showError\" class=\"alert alert-danger mt-3\">\r\n        {{ errorMessage }}\r\n      </div>\r\n      \r\n      <!-- 地图显示区域 -->\r\n      <TrafficMapPanel\r\n        :data=\"trafficData\"\r\n        :view-type=\"queryParams.viewType\"\r\n        :map-style=\"queryParams.mapStyle\"\r\n        :loading=\"loading\"\r\n        :vehicle-id=\"queryParams.vehicleId\"\r\n      />\r\n      \r\n      <!-- 数据统计面板 -->\r\n      <TrafficStatsPanel\r\n        v-if=\"trafficData.length > 0\"\r\n        :totalCount=\"trafficData.length\"\r\n        :timeSpan=\"timeSpan\"\r\n        :coverageArea=\"coverageArea\"\r\n        :activeVehicles=\"activeVehicles\"\r\n        :averageSpeed=\"averageSpeed\"\r\n        :totalDistance=\"totalDistance\"\r\n        :lastUpdate=\"lastUpdate\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted } from 'vue'\r\nimport TrafficQueryPanel from './TrafficQueryPanel.vue'\r\nimport TrafficMapPanel from './TrafficMapPanel.vue'\r\nimport TrafficStatsPanel from './TrafficStatsPanel.vue'\r\nimport { getTrafficVisualization } from '@/api/traffic'\r\nimport axios from 'axios'\r\n\r\nconst loading = ref(false)\r\nconst trafficData = ref([])\r\nconst currentMapView = ref('distribution')\r\nconst queryParams = ref({\r\n  startTime: '2013-09-13T08:00',\r\n  endTime: '2013-09-13T12:00',\r\n  vehicleId: '',\r\n  viewType: 'distribution',\r\n  mapStyle: 'blue'\r\n})\r\nconst mapViews = [\r\n  { key: 'distribution', name: '分布视图' },\r\n  { key: 'trajectory', name: '轨迹视图' },\r\n  { key: 'heatmap', name: '热力图' }\r\n]\r\nconst timeSpan = computed(() => {\r\n  if (!queryParams.value.startTime || !queryParams.value.endTime) return '-'\r\n  const start = new Date(queryParams.value.startTime)\r\n  const end = new Date(queryParams.value.endTime)\r\n  const hours = Math.round((end - start) / (1000 * 60 * 60))\r\n  return `${hours} 小时`\r\n})\r\nconst coverageArea = computed(() => {\r\n  return trafficData.value.length > 0 ? '济南市区' : '-'\r\n})\r\nconst activeVehicles = computed(() => {\r\n  const uniqueVehicles = new Set(trafficData.value.map(item => item.vehicleId))\r\n  return uniqueVehicles.size\r\n})\r\nconst averageSpeed = computed(() => {\r\n  if (trafficData.value.length === 0) return 0\r\n  const totalSpeed = trafficData.value.reduce((sum, item) => sum + (item.speed || 0), 0)\r\n  return Math.round(totalSpeed / trafficData.value.length)\r\n})\r\nconst totalDistance = computed(() => {\r\n  return Math.round(trafficData.value.length * 0.5) // 模拟计算\r\n})\r\nconst lastUpdate = computed(() => {\r\n  return new Date().toLocaleTimeString()\r\n})\r\n\r\n// 错误提示状态\r\nconst errorMessage = ref('')\r\nconst showError = ref(false)\r\n\r\n// 地图相关\r\nlet map = null\r\n\r\nconst submitQuery = async () => {\r\n  // 清除之前的错误\r\n  errorMessage.value = ''\r\n  showError.value = false\r\n  \r\n  // 检查必填字段\r\n  if (!queryParams.value.startTime || !queryParams.value.endTime) {\r\n    errorMessage.value = '请选择查询时间范围'\r\n    showError.value = true\r\n    return\r\n  }\r\n  \r\n  // 转换为UTC时间戳\r\n  const startTimeUTC = convertToUTC(queryParams.value.startTime)\r\n  const endTimeUTC = convertToUTC(queryParams.value.endTime)\r\n  \r\n  // 定义数据集的有效时间范围\r\n  const minValidTime = 1378944000  // 2013-09-12 00:00:00 UTC\r\n  const maxValidTime = 1379548799  // 2013-09-18 23:59:59 UTC\r\n  \r\n  // 验证时间范围\r\n  if (startTimeUTC < minValidTime || startTimeUTC > maxValidTime || \r\n      endTimeUTC < minValidTime || endTimeUTC > maxValidTime) {\r\n    // 时间超出范围，显示错误\r\n    errorMessage.value = '查询时间超出数据集范围（2013年9月12日至9月18日）'\r\n    showError.value = true\r\n    return // 阻止查询继续\r\n  }\r\n  \r\n  // 时间范围有效，继续查询\r\n  loading.value = true\r\n  try {\r\n    // 使用更新后的API函数\r\n    const response = await getTrafficVisualization(\r\n      startTimeUTC,\r\n      endTimeUTC,\r\n      queryParams.value.viewType,\r\n      queryParams.value.vehicleId || null,\r\n      queryParams.value.mapStyle\r\n    )\r\n    \r\n    if (response.data.success) {\r\n      trafficData.value = response.data.data\r\n    } else {\r\n      errorMessage.value = response.data.message || '查询失败'\r\n      showError.value = true\r\n    }\r\n  } catch (error) {\r\n    errorMessage.value = `查询失败: ${error.message}`\r\n    showError.value = true\r\n    console.error('API请求错误:', error)\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\nconst resetQuery = () => {\r\n  queryParams.value.startTime = \"2013-09-13T08:00\"\r\n  queryParams.value.endTime = \"2013-09-13T12:00\"\r\n  queryParams.value.vehicleId = \"\"\r\n  queryParams.value.viewType = 'distribution'\r\n  queryParams.value.mapStyle = 'blue'\r\n  \r\n  errorMessage.value = ''\r\n  showError.value = false\r\n  trafficData.value = []\r\n}\r\n\r\n// 初始化地图\r\nfunction initMap() {\r\n  if (window.AMap) {\r\n    map = new window.AMap.Map('traffic-map', {\r\n      zoom: 13,\r\n      center: [117.000923, 36.675807], // 济南市中心坐标\r\n      mapStyle: 'amap://styles/blue'\r\n    })\r\n  } else {\r\n    console.error('AMap is not loaded')\r\n  }\r\n}\r\n\r\n// 更新地图\r\nfunction updateMap() {\r\n  if (!map || !trafficData.value) return\r\n  \r\n  // 清除之前的标记\r\n  map.clearMap()\r\n  \r\n  // 根据视图类型更新地图\r\n  if (queryParams.value.viewType === 'distribution') {\r\n    renderDistributionView()\r\n  } else if (queryParams.value.viewType === 'trajectory') {\r\n    renderTrajectoryView()\r\n  } else if (queryParams.value.viewType === 'heatmap') {\r\n    renderHeatmapView()\r\n  }\r\n}\r\n\r\n// 渲染分布视图\r\nfunction renderDistributionView() {\r\n  if (!map || !trafficData.value) return\r\n  \r\n  const markers = []\r\n  \r\n  trafficData.value.forEach(point => {\r\n    const marker = new window.AMap.Marker({\r\n      position: [point.lng, point.lat],\r\n      title: `车辆ID: ${point.vehicle_id}`\r\n    })\r\n    markers.push(marker)\r\n  })\r\n  \r\n  map.add(markers)\r\n  \r\n  // 调整视图以包含所有标记\r\n  if (markers.length > 0) {\r\n    map.setFitView(markers)\r\n  }\r\n}\r\n\r\n// 渲染轨迹视图\r\nfunction renderTrajectoryView() {\r\n  if (!map || !trafficData.value) return\r\n  \r\n  trafficData.value.forEach(track => {\r\n    if (!track.points || track.points.length < 2) return\r\n    \r\n    const path = track.points.map(point => [point.lng, point.lat])\r\n    \r\n    const polyline = new window.AMap.Polyline({\r\n      path: path,\r\n      strokeColor: '#3366FF',\r\n      strokeWeight: 5,\r\n      strokeOpacity: 0.8\r\n    })\r\n    \r\n    map.add(polyline)\r\n    \r\n    // 添加起点和终点标记\r\n    const startMarker = new window.AMap.Marker({\r\n      position: path[0],\r\n      title: '起点',\r\n      icon: 'https://webapi.amap.com/theme/v1.3/markers/n/start.png'\r\n    })\r\n    \r\n    const endMarker = new window.AMap.Marker({\r\n      position: path[path.length - 1],\r\n      title: '终点',\r\n      icon: 'https://webapi.amap.com/theme/v1.3/markers/n/end.png'\r\n    })\r\n    \r\n    map.add([startMarker, endMarker])\r\n  })\r\n  \r\n  // 调整视图\r\n  map.setFitView()\r\n}\r\n\r\n// 渲染热力图\r\nfunction renderHeatmapView() {\r\n  if (!map || !trafficData.value || !window.AMap.HeatMap) return\r\n  \r\n  const heatmap = new window.AMap.HeatMap(map, {\r\n    radius: 25,\r\n    opacity: [0, 0.8]\r\n  })\r\n  \r\n  const points = trafficData.value.map(point => {\r\n    return {\r\n      lng: point.lng,\r\n      lat: point.lat,\r\n      count: point.count || 1\r\n    }\r\n  })\r\n  \r\n  heatmap.setDataSet({\r\n    data: points,\r\n    max: 100\r\n  })\r\n}\r\n\r\n// 地图控制\r\nfunction zoomIn() {\r\n  if (map) map.zoomIn()\r\n}\r\n\r\nfunction zoomOut() {\r\n  if (map) map.zoomOut()\r\n}\r\n\r\nfunction resetMap() {\r\n  if (map) {\r\n    map.setZoom(13)\r\n    map.setCenter([117.000923, 36.675807])\r\n  }\r\n}\r\n\r\n// 前端时间转换函数\r\nfunction convertToUTC(dateString) {\r\n  if (!dateString) return 0\r\n  try {\r\n    const date = new Date(dateString)\r\n    return Math.floor(date.getTime() / 1000) // 转换为秒级时间戳\r\n  } catch (error) {\r\n    console.error('时间转换错误:', error)\r\n    return 0\r\n  }\r\n}\r\n\r\n// 设置日期选择器的最小和最大值\r\nconst minDate = \"2013-09-12T00:00\"\r\nconst maxDate = \"2013-09-18T23:59\"\r\n\r\nonMounted(() => {\r\n  // 设置默认值为数据集范围内的时间（优化后的4小时范围）\r\n  queryParams.value.startTime = \"2013-09-13T08:00\"\r\n  queryParams.value.endTime = \"2013-09-13T12:00\"\r\n  \r\n  // 初始化地图\r\n  initMap()\r\n  \r\n  // 加载高德地图API\r\n  if (!window.AMap) {\r\n    const script = document.createElement('script')\r\n    script.src = 'https://webapi.amap.com/maps?v=2.0&key=ac9b745946df9aee02cf0515319407df&plugin=AMap.HeatMap'\r\n    script.async = true\r\n    script.onload = () => {\r\n      initMap()\r\n    }\r\n    document.head.appendChild(script)\r\n  }\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.tech-bg {\r\n  background: linear-gradient(135deg, #0a2342 0%, #183b6b 100%);\r\n  min-height: 100vh;\r\n  padding: 32px 0;\r\n}\r\n.container {\r\n  max-width: 1280px;\r\n}\r\n.card-tech {\r\n  background: rgba(10, 35, 66, 0.95);\r\n  border: 1.5px solid #183b6b;\r\n  border-radius: 18px;\r\n  box-shadow: 0 4px 32px 0 rgba(0, 207, 255, 0.08);\r\n}\r\n.input-tech {\r\n  background: #122b45;\r\n  color: #fff;\r\n  border: 1px solid #00cfff;\r\n  border-radius: 8px;\r\n  padding: 8px 12px;\r\n  outline: none;\r\n  transition: border 0.2s, box-shadow 0.2s;\r\n}\r\n.input-tech:focus {\r\n  border: 1.5px solid #00cfff;\r\n  box-shadow: 0 0 0 2px #00cfff33;\r\n}\r\n.btn-tech {\r\n  background: linear-gradient(90deg, #00cfff 0%, #1e90ff 100%);\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 8px;\r\n  font-weight: 600;\r\n  padding: 8px 24px;\r\n  box-shadow: 0 2px 8px 0 #00cfff33;\r\n  transition: background 0.2s, box-shadow 0.2s;\r\n}\r\n.btn-tech:hover {\r\n  background: linear-gradient(90deg, #1e90ff 0%, #00cfff 100%);\r\n  box-shadow: 0 4px 16px 0 #00cfff44;\r\n}\r\n.btn-tech-secondary {\r\n  background: #183b6b;\r\n  color: #fff;\r\n  border: 1px solid #00cfff;\r\n  border-radius: 8px;\r\n  font-weight: 600;\r\n  padding: 8px 24px;\r\n  transition: background 0.2s, box-shadow 0.2s;\r\n}\r\n.btn-tech-secondary:hover {\r\n  background: #122b45;\r\n  color: #00cfff;\r\n}\r\n\r\n.alert {\r\n  margin-bottom: 20px;\r\n  padding: 12px 16px;\r\n  border-radius: 4px;\r\n}\r\n\r\n.alert-danger {\r\n  background-color: #f8d7da;\r\n  color: #721c24;\r\n  border: 1px solid #f5c6cb;\r\n}\r\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAmB;;EACvBA,KAAK,EAAC;AAAwB;;;EAUXA,KAAK,EAAC;;;uBAXhCC,mBAAA,CAoCM,OApCNC,UAoCM,GAnCJC,mBAAA,CAkCM,OAlCNC,UAkCM,GAjCJC,mBAAA,YAAe,EACfC,YAAA,CAKEC,MAAA;gBAJSA,MAAA,CAAAC,WAAW;+DAAXD,MAAA,CAAAC,WAAW,GAAAC,MAAA;IACnBC,OAAO,EAAEH,MAAA,CAAAG,OAAO;IAChBC,OAAK,EAAEJ,MAAA,CAAAK,WAAW;IAClBC,OAAK,EAAEN,MAAA,CAAAO;sDAGVT,mBAAA,UAAa,EACFE,MAAA,CAAAQ,SAAS,I,cAApBd,mBAAA,CAEM,OAFNe,UAEM,EAAAC,gBAAA,CADDV,MAAA,CAAAW,YAAY,oB,mCAGjBb,mBAAA,YAAe,EACfC,YAAA,CAMEC,MAAA;IALCY,IAAI,EAAEZ,MAAA,CAAAa,WAAW;IACjB,WAAS,EAAEb,MAAA,CAAAC,WAAW,CAACa,QAAQ;IAC/B,WAAS,EAAEd,MAAA,CAAAC,WAAW,CAACc,QAAQ;IAC/BZ,OAAO,EAAEH,MAAA,CAAAG,OAAO;IAChB,YAAU,EAAEH,MAAA,CAAAC,WAAW,CAACe;wFAG3BlB,mBAAA,YAAe,EAEPE,MAAA,CAAAa,WAAW,CAACI,MAAM,Q,cAD1BC,YAAA,CASElB,MAAA;;IAPCmB,UAAU,EAAEnB,MAAA,CAAAa,WAAW,CAACI,MAAM;IAC9BG,QAAQ,EAAEpB,MAAA,CAAAoB,QAAQ;IAClBC,YAAY,EAAErB,MAAA,CAAAqB,YAAY;IAC1BC,cAAc,EAAEtB,MAAA,CAAAsB,cAAc;IAC9BC,YAAY,EAAEvB,MAAA,CAAAuB,YAAY;IAC1BC,aAAa,EAAExB,MAAA,CAAAwB,aAAa;IAC5BC,UAAU,EAAEzB,MAAA,CAAAyB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}