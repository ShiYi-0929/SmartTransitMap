{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, vShow as _vShow, renderList as _renderList, Fragment as _Fragment, normalizeStyle as _normalizeStyle, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, withModifiers as _withModifiers, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"road-segment-analysis\"\n};\nconst _hoisted_2 = {\n  class: \"control-panel\"\n};\nconst _hoisted_3 = {\n  class: \"panel-row\"\n};\nconst _hoisted_4 = {\n  class: \"control-group\"\n};\nconst _hoisted_5 = {\n  class: \"control-group\"\n};\nconst _hoisted_6 = {\n  class: \"control-group\"\n};\nconst _hoisted_7 = {\n  class: \"control-group\"\n};\nconst _hoisted_8 = {\n  class: \"control-group\"\n};\nconst _hoisted_9 = [\"disabled\"];\nconst _hoisted_10 = {\n  key: 0,\n  class: \"stats-cards\"\n};\nconst _hoisted_11 = {\n  class: \"stat-card\"\n};\nconst _hoisted_12 = {\n  class: \"stat-value\"\n};\nconst _hoisted_13 = {\n  class: \"stat-card\"\n};\nconst _hoisted_14 = {\n  class: \"stat-value\"\n};\nconst _hoisted_15 = {\n  class: \"stat-card\"\n};\nconst _hoisted_16 = {\n  class: \"stat-value\"\n};\nconst _hoisted_17 = {\n  class: \"stat-card\"\n};\nconst _hoisted_18 = {\n  class: \"stat-value\"\n};\nconst _hoisted_19 = {\n  class: \"stat-card\"\n};\nconst _hoisted_20 = {\n  class: \"stat-value\"\n};\nconst _hoisted_21 = {\n  class: \"main-content\"\n};\nconst _hoisted_22 = {\n  class: \"map-section\"\n};\nconst _hoisted_23 = {\n  class: \"map-header\"\n};\nconst _hoisted_24 = {\n  class: \"map-controls\"\n};\nconst _hoisted_25 = [\"disabled\"];\nconst _hoisted_26 = [\"disabled\"];\nconst _hoisted_27 = {\n  class: \"map-container\"\n};\nconst _hoisted_28 = {\n  id: \"road-analysis-map\",\n  class: \"map-canvas\"\n};\nconst _hoisted_29 = {\n  class: \"map-fallback\"\n};\nconst _hoisted_30 = {\n  ref: \"fallbackCanvas\",\n  class: \"fallback-canvas\",\n  width: \"800\",\n  height: \"600\"\n};\nconst _hoisted_31 = {\n  key: 0,\n  class: \"legend\"\n};\nconst _hoisted_32 = {\n  class: \"legend-items\"\n};\nconst _hoisted_33 = {\n  class: \"legend-label\"\n};\nconst _hoisted_34 = {\n  class: \"analysis-panel\"\n};\nconst _hoisted_35 = {\n  key: 0,\n  class: \"chart-section\"\n};\nconst _hoisted_36 = {\n  class: \"speed-chart\"\n};\nconst _hoisted_37 = {\n  class: \"bar-container\"\n};\nconst _hoisted_38 = {\n  class: \"bar-label\"\n};\nconst _hoisted_39 = {\n  class: \"bar-value\"\n};\nconst _hoisted_40 = {\n  key: 1,\n  class: \"chart-section\"\n};\nconst _hoisted_41 = {\n  class: \"flow-chart\"\n};\nconst _hoisted_42 = {\n  width: \"100%\",\n  height: \"200\",\n  viewBox: \"0 0 800 200\"\n};\nconst _hoisted_43 = {\n  transform: \"translate(40,20)\"\n};\nconst _hoisted_44 = {\n  class: \"grid\"\n};\nconst _hoisted_45 = [\"y1\", \"y2\"];\nconst _hoisted_46 = [\"x1\", \"x2\"];\nconst _hoisted_47 = [\"points\"];\nconst _hoisted_48 = [\"points\"];\nconst _hoisted_49 = {\n  class: \"x-axis\"\n};\nconst _hoisted_50 = [\"x\"];\nconst _hoisted_51 = {\n  key: 2,\n  class: \"segments-list\"\n};\nconst _hoisted_52 = {\n  class: \"segments-table\"\n};\nconst _hoisted_53 = {\n  class: \"table-body\"\n};\nconst _hoisted_54 = [\"onClick\"];\nconst _hoisted_55 = {\n  class: \"col-id\"\n};\nconst _hoisted_56 = {\n  class: \"col-type\"\n};\nconst _hoisted_57 = {\n  class: \"col-length\"\n};\nconst _hoisted_58 = {\n  class: \"col-speed\"\n};\nconst _hoisted_59 = {\n  class: \"col-flow\"\n};\nconst _hoisted_60 = {\n  class: \"col-congestion\"\n};\nconst _hoisted_61 = {\n  class: \"col-action\"\n};\nconst _hoisted_62 = [\"onClick\"];\nconst _hoisted_63 = {\n  key: 0,\n  class: \"pagination\"\n};\nconst _hoisted_64 = [\"disabled\"];\nconst _hoisted_65 = [\"disabled\"];\nconst _hoisted_66 = {\n  key: 3,\n  class: \"network-summary\"\n};\nconst _hoisted_67 = {\n  class: \"metrics-grid\"\n};\nconst _hoisted_68 = {\n  class: \"metric-item\"\n};\nconst _hoisted_69 = {\n  class: \"metric-value\"\n};\nconst _hoisted_70 = {\n  class: \"metric-item\"\n};\nconst _hoisted_71 = {\n  class: \"metric-value\"\n};\nconst _hoisted_72 = {\n  class: \"metric-item\"\n};\nconst _hoisted_73 = {\n  class: \"metric-value\"\n};\nconst _hoisted_74 = {\n  class: \"metric-item\"\n};\nconst _hoisted_75 = {\n  class: \"metric-value\"\n};\nconst _hoisted_76 = {\n  key: 1,\n  class: \"loading-overlay\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 标题栏 \"), _cache[38] || (_cache[38] = _createElementVNode(\"div\", {\n    class: \"analysis-header\"\n  }, [_createElementVNode(\"h2\", null, \"路段数据分析\"), _createElementVNode(\"p\", {\n    class: \"subtitle\"\n  }, \"展示不同路段的通行状况、速度、距离等指标\")], -1 /* CACHED */)), _createCommentVNode(\" 控制面板 \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createCommentVNode(\" 分析类型选择 \"), _createElementVNode(\"div\", _hoisted_4, [_cache[14] || (_cache[14] = _createElementVNode(\"label\", null, \"分析类型:\", -1 /* CACHED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.analysisConfig.analysis_type = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $options.onConfigChange && $options.onConfigChange(...args))\n  }, _cache[13] || (_cache[13] = [_createElementVNode(\"option\", {\n    value: \"comprehensive\"\n  }, \"综合分析\", -1 /* CACHED */), _createElementVNode(\"option\", {\n    value: \"speed\"\n  }, \"速度分析\", -1 /* CACHED */), _createElementVNode(\"option\", {\n    value: \"flow\"\n  }, \"流量分析\", -1 /* CACHED */), _createElementVNode(\"option\", {\n    value: \"congestion\"\n  }, \"拥堵分析\", -1 /* CACHED */)]), 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $data.analysisConfig.analysis_type]])]), _createCommentVNode(\" 路段类型筛选 \"), _createElementVNode(\"div\", _hoisted_5, [_cache[16] || (_cache[16] = _createElementVNode(\"label\", null, \"路段类型:\", -1 /* CACHED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.analysisConfig.segment_types[0] = $event),\n    onChange: _cache[3] || (_cache[3] = (...args) => $options.onConfigChange && $options.onConfigChange(...args))\n  }, _cache[15] || (_cache[15] = [_createStaticVNode(\"<option value=\\\"all\\\" data-v-3cf9e2d4>全部路段</option><option value=\\\"highway\\\" data-v-3cf9e2d4>高速公路</option><option value=\\\"arterial\\\" data-v-3cf9e2d4>主干道</option><option value=\\\"urban\\\" data-v-3cf9e2d4>城市道路</option><option value=\\\"local\\\" data-v-3cf9e2d4>支路</option>\", 5)]), 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $data.analysisConfig.segment_types[0]]])]), _createCommentVNode(\" 可视化类型 \"), _createElementVNode(\"div\", _hoisted_6, [_cache[18] || (_cache[18] = _createElementVNode(\"label\", null, \"可视化:\", -1 /* CACHED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.visualizationType = $event),\n    onChange: _cache[5] || (_cache[5] = (...args) => $options.onVisualizationChange && $options.onVisualizationChange(...args))\n  }, _cache[17] || (_cache[17] = [_createElementVNode(\"option\", {\n    value: \"speed\"\n  }, \"速度分布\", -1 /* CACHED */), _createElementVNode(\"option\", {\n    value: \"flow\"\n  }, \"流量分布\", -1 /* CACHED */), _createElementVNode(\"option\", {\n    value: \"congestion\"\n  }, \"拥堵程度\", -1 /* CACHED */), _createElementVNode(\"option\", {\n    value: \"efficiency\"\n  }, \"运行效率\", -1 /* CACHED */)]), 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $data.visualizationType]])]), _createCommentVNode(\" 最小车辆数 \"), _createElementVNode(\"div\", _hoisted_7, [_cache[19] || (_cache[19] = _createElementVNode(\"label\", null, \"最小车辆数:\", -1 /* CACHED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => $data.analysisConfig.min_vehicles = $event),\n    min: \"1\",\n    max: \"50\",\n    onChange: _cache[7] || (_cache[7] = (...args) => $options.onConfigChange && $options.onConfigChange(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.analysisConfig.min_vehicles, void 0, {\n    number: true\n  }]])]), _createCommentVNode(\" 分析按钮 \"), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"button\", {\n    onClick: _cache[8] || (_cache[8] = (...args) => $options.performAnalysis && $options.performAnalysis(...args)),\n    disabled: $data.isLoading,\n    class: \"analyze-btn\"\n  }, _toDisplayString($data.isLoading ? '分析中...' : '开始分析'), 9 /* TEXT, PROPS */, _hoisted_9)])])]), _createCommentVNode(\" 统计卡片 \"), $data.analysisData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"div\", _hoisted_12, _toDisplayString($data.analysisData.analysis?.total_segments || 0), 1 /* TEXT */), _cache[20] || (_cache[20] = _createElementVNode(\"div\", {\n    class: \"stat-label\"\n  }, \"总路段数\", -1 /* CACHED */))]), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"div\", _hoisted_14, _toDisplayString($options.activeSegments), 1 /* TEXT */), _cache[21] || (_cache[21] = _createElementVNode(\"div\", {\n    class: \"stat-label\"\n  }, \"活跃路段\", -1 /* CACHED */))]), _createElementVNode(\"div\", _hoisted_15, [_createElementVNode(\"div\", _hoisted_16, _toDisplayString($options.avgSpeed), 1 /* TEXT */), _cache[22] || (_cache[22] = _createElementVNode(\"div\", {\n    class: \"stat-label\"\n  }, \"平均速度 (km/h)\", -1 /* CACHED */))]), _createElementVNode(\"div\", _hoisted_17, [_createElementVNode(\"div\", _hoisted_18, _toDisplayString($options.avgFlow), 1 /* TEXT */), _cache[23] || (_cache[23] = _createElementVNode(\"div\", {\n    class: \"stat-label\"\n  }, \"平均流量 (veh/h)\", -1 /* CACHED */))]), _createElementVNode(\"div\", _hoisted_19, [_createElementVNode(\"div\", _hoisted_20, _toDisplayString($options.bottleneckCount), 1 /* TEXT */), _cache[24] || (_cache[24] = _createElementVNode(\"div\", {\n    class: \"stat-label\"\n  }, \"瓶颈路段\", -1 /* CACHED */))])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 主要内容区域 \"), _createElementVNode(\"div\", _hoisted_21, [_createCommentVNode(\" 地图可视化区域 \"), _createElementVNode(\"div\", _hoisted_22, [_createElementVNode(\"div\", _hoisted_23, [_cache[25] || (_cache[25] = _createElementVNode(\"h3\", null, \"路段可视化地图\", -1 /* CACHED */)), _createElementVNode(\"div\", _hoisted_24, [_createElementVNode(\"button\", {\n    onClick: _cache[9] || (_cache[9] = (...args) => $options.refreshVisualization && $options.refreshVisualization(...args)),\n    disabled: $data.isLoading\n  }, \" 刷新可视化 \", 8 /* PROPS */, _hoisted_25), _createElementVNode(\"button\", {\n    onClick: _cache[10] || (_cache[10] = (...args) => $options.exportData && $options.exportData(...args)),\n    disabled: !$data.analysisData\n  }, \" 导出数据 \", 8 /* PROPS */, _hoisted_26)])]), _createCommentVNode(\" 地图容器 \"), _createElementVNode(\"div\", _hoisted_27, [_withDirectives(_createElementVNode(\"div\", _hoisted_28, null, 512 /* NEED_PATCH */), [[_vShow, $data.mapLoaded]]), _withDirectives(_createElementVNode(\"div\", _hoisted_29, [_createElementVNode(\"canvas\", _hoisted_30, null, 512 /* NEED_PATCH */), _cache[26] || (_cache[26] = _createElementVNode(\"div\", {\n    class: \"canvas-overlay\"\n  }, [_createElementVNode(\"p\", null, \"地图加载中，使用Canvas降级显示\")], -1 /* CACHED */))], 512 /* NEED_PATCH */), [[_vShow, !$data.mapLoaded]])]), _createCommentVNode(\" 图例 \"), $data.legendInfo && $data.legendInfo.ranges ? (_openBlock(), _createElementBlock(\"div\", _hoisted_31, [_createElementVNode(\"h4\", null, _toDisplayString($data.legendInfo.title), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_32, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.legendInfo.ranges, (range, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"legend-item\"\n    }, [_createElementVNode(\"div\", {\n      class: \"legend-color\",\n      style: _normalizeStyle({\n        backgroundColor: range.color\n      })\n    }, null, 4 /* STYLE */), _createElementVNode(\"span\", _hoisted_33, _toDisplayString(range.label), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" 数据分析面板 \"), _createElementVNode(\"div\", _hoisted_34, [_createCommentVNode(\" 速度分布图表 \"), $data.speedDistributions && $data.speedDistributions.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_35, [_cache[27] || (_cache[27] = _createElementVNode(\"h3\", null, \"速度分布\", -1 /* CACHED */)), _createElementVNode(\"div\", _hoisted_36, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.speedDistributions, dist => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: dist.speed_range,\n      class: \"speed-bar\"\n    }, [_createElementVNode(\"div\", _hoisted_37, [_createElementVNode(\"div\", {\n      class: \"bar-fill\",\n      style: _normalizeStyle({\n        width: dist.percentage + '%'\n      })\n    }, null, 4 /* STYLE */), _createElementVNode(\"span\", _hoisted_38, _toDisplayString(dist.speed_range), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_39, _toDisplayString(dist.percentage.toFixed(1)) + \"%\", 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 流量模式图表 \"), $data.flowPatterns && $data.flowPatterns.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_40, [_cache[29] || (_cache[29] = _createElementVNode(\"h3\", null, \"24小时流量模式\", -1 /* CACHED */)), _createElementVNode(\"div\", _hoisted_41, [(_openBlock(), _createElementBlock(\"svg\", _hoisted_42, [_createElementVNode(\"g\", _hoisted_43, [_createCommentVNode(\" 背景网格 \"), _createElementVNode(\"g\", _hoisted_44, [(_openBlock(), _createElementBlock(_Fragment, null, _renderList(5, i => {\n    return _createElementVNode(\"line\", {\n      key: 'h' + i,\n      x1: 0,\n      x2: 720,\n      y1: i * 36,\n      y2: i * 36,\n      stroke: \"#e0e0e0\",\n      \"stroke-width\": \"1\"\n    }, null, 8 /* PROPS */, _hoisted_45);\n  }), 64 /* STABLE_FRAGMENT */)), (_openBlock(), _createElementBlock(_Fragment, null, _renderList(25, i => {\n    return _createElementVNode(\"line\", {\n      key: 'v' + i,\n      x1: i * 30,\n      x2: i * 30,\n      y1: 0,\n      y2: 180,\n      stroke: \"#e0e0e0\",\n      \"stroke-width\": \"0.5\"\n    }, null, 8 /* PROPS */, _hoisted_46);\n  }), 64 /* STABLE_FRAGMENT */))]), _createCommentVNode(\" 流量曲线 \"), _createElementVNode(\"polyline\", {\n    points: $options.getFlowPolylinePoints(),\n    fill: \"none\",\n    stroke: \"#2196F3\",\n    \"stroke-width\": \"2\"\n  }, null, 8 /* PROPS */, _hoisted_47), _createCommentVNode(\" 拥堵指数曲线 \"), _createElementVNode(\"polyline\", {\n    points: $options.getCongestionPolylinePoints(),\n    fill: \"none\",\n    stroke: \"#F44336\",\n    \"stroke-width\": \"2\"\n  }, null, 8 /* PROPS */, _hoisted_48), _createCommentVNode(\" X轴标签 \"), _createElementVNode(\"g\", _hoisted_49, [(_openBlock(), _createElementBlock(_Fragment, null, _renderList([0, 6, 12, 18, 24], hour => {\n    return _createElementVNode(\"text\", {\n      key: hour,\n      x: hour * 30,\n      y: \"195\",\n      \"text-anchor\": \"middle\",\n      \"font-size\": \"12\",\n      fill: \"#666\"\n    }, _toDisplayString(hour) + \":00 \", 9 /* TEXT, PROPS */, _hoisted_50);\n  }), 64 /* STABLE_FRAGMENT */))])])])), _cache[28] || (_cache[28] = _createStaticVNode(\"<div class=\\\"chart-legend\\\" data-v-3cf9e2d4><span class=\\\"legend-item\\\" data-v-3cf9e2d4><span class=\\\"legend-line flow\\\" data-v-3cf9e2d4></span> 流量 </span><span class=\\\"legend-item\\\" data-v-3cf9e2d4><span class=\\\"legend-line congestion\\\" data-v-3cf9e2d4></span> 拥堵指数 </span></div>\", 1))])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 路段详情列表 \"), $data.segmentDetails && $data.segmentDetails.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_51, [_cache[31] || (_cache[31] = _createElementVNode(\"h3\", null, \"路段详情\", -1 /* CACHED */)), _createElementVNode(\"div\", _hoisted_52, [_cache[30] || (_cache[30] = _createStaticVNode(\"<div class=\\\"table-header\\\" data-v-3cf9e2d4><div class=\\\"col-id\\\" data-v-3cf9e2d4>路段ID</div><div class=\\\"col-type\\\" data-v-3cf9e2d4>类型</div><div class=\\\"col-length\\\" data-v-3cf9e2d4>长度(km)</div><div class=\\\"col-speed\\\" data-v-3cf9e2d4>平均速度</div><div class=\\\"col-flow\\\" data-v-3cf9e2d4>流量</div><div class=\\\"col-congestion\\\" data-v-3cf9e2d4>拥堵状态</div><div class=\\\"col-action\\\" data-v-3cf9e2d4>操作</div></div>\", 1)), _createElementVNode(\"div\", _hoisted_53, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.paginatedSegments, segment => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: segment.segment_id,\n      class: _normalizeClass([\"table-row\", {\n        active: $data.selectedSegment?.segment_id === segment.segment_id\n      }]),\n      onClick: $event => $options.selectSegment(segment)\n    }, [_createElementVNode(\"div\", _hoisted_55, _toDisplayString(segment.segment_id), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_56, _toDisplayString($options.getRoadTypeLabel(segment.road_type)), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_57, _toDisplayString(segment.segment_length?.toFixed(3) || 'N/A'), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_58, _toDisplayString(segment.avg_speed?.toFixed(1) || 'N/A'), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_59, _toDisplayString(segment.flow_rate?.toFixed(0) || 'N/A'), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_60, [_createElementVNode(\"span\", {\n      class: _normalizeClass('congestion-' + segment.congestion_level)\n    }, _toDisplayString($options.getCongestionLabel(segment.congestion_level)), 3 /* TEXT, CLASS */)]), _createElementVNode(\"div\", _hoisted_61, [_createElementVNode(\"button\", {\n      onClick: _withModifiers($event => $options.focusOnSegment(segment), [\"stop\"]),\n      class: \"focus-btn\"\n    }, \" 定位 \", 8 /* PROPS */, _hoisted_62)])], 10 /* CLASS, PROPS */, _hoisted_54);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" 分页控制 \"), $options.totalPages > 1 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_63, [_createElementVNode(\"button\", {\n    onClick: _cache[11] || (_cache[11] = $event => $data.currentPage = Math.max(1, $data.currentPage - 1)),\n    disabled: $data.currentPage === 1\n  }, \" 上一页 \", 8 /* PROPS */, _hoisted_64), _createElementVNode(\"span\", null, _toDisplayString($data.currentPage) + \" / \" + _toDisplayString($options.totalPages), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[12] || (_cache[12] = $event => $data.currentPage = Math.min($options.totalPages, $data.currentPage + 1)),\n    disabled: $data.currentPage === $options.totalPages\n  }, \" 下一页 \", 8 /* PROPS */, _hoisted_65)])) : _createCommentVNode(\"v-if\", true)])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 网络指标摘要 \"), $data.networkMetrics ? (_openBlock(), _createElementBlock(\"div\", _hoisted_66, [_cache[36] || (_cache[36] = _createElementVNode(\"h3\", null, \"路网指标摘要\", -1 /* CACHED */)), _createElementVNode(\"div\", _hoisted_67, [_createElementVNode(\"div\", _hoisted_68, [_cache[32] || (_cache[32] = _createElementVNode(\"div\", {\n    class: \"metric-label\"\n  }, \"网络平均速度\", -1 /* CACHED */)), _createElementVNode(\"div\", _hoisted_69, _toDisplayString($data.networkMetrics.traffic_performance?.avg_speed?.toFixed(1) || 'N/A') + \" km/h\", 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_70, [_cache[33] || (_cache[33] = _createElementVNode(\"div\", {\n    class: \"metric-label\"\n  }, \"网络利用率\", -1 /* CACHED */)), _createElementVNode(\"div\", _hoisted_71, _toDisplayString($data.networkMetrics.efficiency_indicators?.network_utilization?.toFixed(1) || 'N/A') + \"%\", 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_72, [_cache[34] || (_cache[34] = _createElementVNode(\"div\", {\n    class: \"metric-label\"\n  }, \"畅通率\", -1 /* CACHED */)), _createElementVNode(\"div\", _hoisted_73, _toDisplayString($data.networkMetrics.efficiency_indicators?.free_flow_percentage?.toFixed(1) || 'N/A') + \"%\", 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_74, [_cache[35] || (_cache[35] = _createElementVNode(\"div\", {\n    class: \"metric-label\"\n  }, \"瓶颈率\", -1 /* CACHED */)), _createElementVNode(\"div\", _hoisted_75, _toDisplayString($data.networkMetrics.efficiency_indicators?.bottleneck_rate?.toFixed(1) || 'N/A') + \"%\", 1 /* TEXT */)])])])) : _createCommentVNode(\"v-if\", true)])]), _createCommentVNode(\" 加载遮罩 \"), $data.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_76, _cache[37] || (_cache[37] = [_createElementVNode(\"div\", {\n    class: \"loading-spinner\"\n  }, null, -1 /* CACHED */), _createElementVNode(\"p\", null, \"正在分析路段数据，请稍候...\", -1 /* CACHED */)]))) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","id","ref","width","height","viewBox","transform","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","$data","analysisConfig","analysis_type","$event","onChange","_cache","args","$options","onConfigChange","value","_hoisted_5","segment_types","_hoisted_6","visualizationType","onVisualizationChange","_hoisted_7","type","min_vehicles","min","max","number","_hoisted_8","onClick","performAnalysis","disabled","isLoading","_hoisted_9","analysisData","_hoisted_10","_hoisted_11","_hoisted_12","_toDisplayString","analysis","total_segments","_hoisted_13","_hoisted_14","activeSegments","_hoisted_15","_hoisted_16","avgSpeed","_hoisted_17","_hoisted_18","avgFlow","_hoisted_19","_hoisted_20","bottleneckCount","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","refreshVisualization","_hoisted_25","exportData","_hoisted_26","_hoisted_27","_hoisted_28","mapLoaded","_hoisted_29","_hoisted_30","legendInfo","ranges","_hoisted_31","title","_hoisted_32","_Fragment","_renderList","range","index","key","style","_normalizeStyle","backgroundColor","color","_hoisted_33","label","_hoisted_34","speedDistributions","length","_hoisted_35","_hoisted_36","dist","speed_range","_hoisted_37","percentage","_hoisted_38","_hoisted_39","toFixed","flowPatterns","_hoisted_40","_hoisted_41","_hoisted_42","_hoisted_43","_hoisted_44","i","x1","x2","y1","y2","stroke","points","getFlowPolylinePoints","fill","getCongestionPolylinePoints","_hoisted_49","hour","x","y","_hoisted_50","segmentDetails","_hoisted_51","_hoisted_52","_hoisted_53","paginatedSegments","segment","segment_id","_normalizeClass","active","selectedSegment","selectSegment","_hoisted_55","_hoisted_56","getRoadTypeLabel","road_type","_hoisted_57","segment_length","_hoisted_58","avg_speed","_hoisted_59","flow_rate","_hoisted_60","congestion_level","getCongestionLabel","_hoisted_61","_withModifiers","focusOnSegment","_hoisted_62","totalPages","_hoisted_63","currentPage","Math","_hoisted_64","_hoisted_65","networkMetrics","_hoisted_66","_hoisted_67","_hoisted_68","_hoisted_69","traffic_performance","_hoisted_70","_hoisted_71","efficiency_indicators","network_utilization","_hoisted_72","_hoisted_73","free_flow_percentage","_hoisted_74","_hoisted_75","bottleneck_rate","_hoisted_76"],"sources":["E:\\hhh\\frontend\\src\\modules\\trafficVisualization\\TrafficRoad.vue"],"sourcesContent":["<template>\r\n  <div class=\"road-segment-analysis\">\r\n    <!-- 标题栏 -->\r\n    <div class=\"analysis-header\">\r\n      <h2>路段数据分析</h2>\r\n      <p class=\"subtitle\">展示不同路段的通行状况、速度、距离等指标</p>\r\n    </div>\r\n\r\n    <!-- 控制面板 -->\r\n    <div class=\"control-panel\">\r\n      <div class=\"panel-row\">\r\n        <!-- 分析类型选择 -->\r\n        <div class=\"control-group\">\r\n          <label>分析类型:</label>\r\n          <select v-model=\"analysisConfig.analysis_type\" @change=\"onConfigChange\">\r\n            <option value=\"comprehensive\">综合分析</option>\r\n            <option value=\"speed\">速度分析</option>\r\n            <option value=\"flow\">流量分析</option>\r\n            <option value=\"congestion\">拥堵分析</option>\r\n          </select>\r\n        </div>\r\n\r\n        <!-- 路段类型筛选 -->\r\n        <div class=\"control-group\">\r\n          <label>路段类型:</label>\r\n          <select v-model=\"analysisConfig.segment_types[0]\" @change=\"onConfigChange\">\r\n            <option value=\"all\">全部路段</option>\r\n            <option value=\"highway\">高速公路</option>\r\n            <option value=\"arterial\">主干道</option>\r\n            <option value=\"urban\">城市道路</option>\r\n            <option value=\"local\">支路</option>\r\n          </select>\r\n        </div>\r\n\r\n        <!-- 可视化类型 -->\r\n        <div class=\"control-group\">\r\n          <label>可视化:</label>\r\n          <select v-model=\"visualizationType\" @change=\"onVisualizationChange\">\r\n            <option value=\"speed\">速度分布</option>\r\n            <option value=\"flow\">流量分布</option>\r\n            <option value=\"congestion\">拥堵程度</option>\r\n            <option value=\"efficiency\">运行效率</option>\r\n          </select>\r\n        </div>\r\n\r\n        <!-- 最小车辆数 -->\r\n        <div class=\"control-group\">\r\n          <label>最小车辆数:</label>\r\n          <input \r\n            type=\"number\" \r\n            v-model.number=\"analysisConfig.min_vehicles\" \r\n            min=\"1\" \r\n            max=\"50\"\r\n            @change=\"onConfigChange\"\r\n          />\r\n        </div>\r\n\r\n        <!-- 分析按钮 -->\r\n        <div class=\"control-group\">\r\n          <button \r\n            @click=\"performAnalysis\" \r\n            :disabled=\"isLoading\"\r\n            class=\"analyze-btn\"\r\n          >\r\n            {{ isLoading ? '分析中...' : '开始分析' }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 统计卡片 -->\r\n    <div class=\"stats-cards\" v-if=\"analysisData\">\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-value\">{{ analysisData.analysis?.total_segments || 0 }}</div>\r\n        <div class=\"stat-label\">总路段数</div>\r\n      </div>\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-value\">{{ activeSegments }}</div>\r\n        <div class=\"stat-label\">活跃路段</div>\r\n      </div>\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-value\">{{ avgSpeed }}</div>\r\n        <div class=\"stat-label\">平均速度 (km/h)</div>\r\n      </div>\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-value\">{{ avgFlow }}</div>\r\n        <div class=\"stat-label\">平均流量 (veh/h)</div>\r\n      </div>\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-value\">{{ bottleneckCount }}</div>\r\n        <div class=\"stat-label\">瓶颈路段</div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 主要内容区域 -->\r\n    <div class=\"main-content\">\r\n      <!-- 地图可视化区域 -->\r\n      <div class=\"map-section\">\r\n        <div class=\"map-header\">\r\n          <h3>路段可视化地图</h3>\r\n          <div class=\"map-controls\">\r\n            <button @click=\"refreshVisualization\" :disabled=\"isLoading\">\r\n              刷新可视化\r\n            </button>\r\n            <button @click=\"exportData\" :disabled=\"!analysisData\">\r\n              导出数据\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- 地图容器 -->\r\n        <div class=\"map-container\">\r\n          <div \r\n            id=\"road-analysis-map\" \r\n            class=\"map-canvas\"\r\n            v-show=\"mapLoaded\"\r\n          ></div>\r\n          <div \r\n            v-show=\"!mapLoaded\" \r\n            class=\"map-fallback\"\r\n          >\r\n            <canvas \r\n              ref=\"fallbackCanvas\"\r\n              class=\"fallback-canvas\"\r\n              width=\"800\"\r\n              height=\"600\"\r\n            ></canvas>\r\n            <div class=\"canvas-overlay\">\r\n              <p>地图加载中，使用Canvas降级显示</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 图例 -->\r\n        <div class=\"legend\" v-if=\"legendInfo && legendInfo.ranges\">\r\n          <h4>{{ legendInfo.title }}</h4>\r\n          <div class=\"legend-items\">\r\n            <div \r\n              v-for=\"(range, index) in legendInfo.ranges\" \r\n              :key=\"index\"\r\n              class=\"legend-item\"\r\n            >\r\n              <div \r\n                class=\"legend-color\" \r\n                :style=\"{ backgroundColor: range.color }\"\r\n              ></div>\r\n              <span class=\"legend-label\">{{ range.label }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 数据分析面板 -->\r\n      <div class=\"analysis-panel\">\r\n        <!-- 速度分布图表 -->\r\n        <div class=\"chart-section\" v-if=\"speedDistributions && speedDistributions.length > 0\">\r\n          <h3>速度分布</h3>\r\n          <div class=\"speed-chart\">\r\n            <div \r\n              v-for=\"dist in speedDistributions\" \r\n              :key=\"dist.speed_range\"\r\n              class=\"speed-bar\"\r\n            >\r\n              <div class=\"bar-container\">\r\n                <div \r\n                  class=\"bar-fill\"\r\n                  :style=\"{ width: dist.percentage + '%' }\"\r\n                ></div>\r\n                <span class=\"bar-label\">{{ dist.speed_range }}</span>\r\n              </div>\r\n              <div class=\"bar-value\">{{ dist.percentage.toFixed(1) }}%</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 流量模式图表 -->\r\n        <div class=\"chart-section\" v-if=\"flowPatterns && flowPatterns.length > 0\">\r\n          <h3>24小时流量模式</h3>\r\n          <div class=\"flow-chart\">\r\n            <svg width=\"100%\" height=\"200\" viewBox=\"0 0 800 200\">\r\n              <g transform=\"translate(40,20)\">\r\n                <!-- 背景网格 -->\r\n                <g class=\"grid\">\r\n                  <line v-for=\"i in 5\" :key=\"'h'+i\" \r\n                        :x1=\"0\" :x2=\"720\" \r\n                        :y1=\"i*36\" :y2=\"i*36\" \r\n                        stroke=\"#e0e0e0\" stroke-width=\"1\"/>\r\n                  <line v-for=\"i in 25\" :key=\"'v'+i\" \r\n                        :x1=\"i*30\" :x2=\"i*30\" \r\n                        :y1=\"0\" :y2=\"180\" \r\n                        stroke=\"#e0e0e0\" stroke-width=\"0.5\"/>\r\n                </g>\r\n                \r\n                <!-- 流量曲线 -->\r\n                <polyline \r\n                  :points=\"getFlowPolylinePoints()\"\r\n                  fill=\"none\" \r\n                  stroke=\"#2196F3\" \r\n                  stroke-width=\"2\"\r\n                />\r\n                \r\n                <!-- 拥堵指数曲线 -->\r\n                <polyline \r\n                  :points=\"getCongestionPolylinePoints()\"\r\n                  fill=\"none\" \r\n                  stroke=\"#F44336\" \r\n                  stroke-width=\"2\"\r\n                />\r\n                \r\n                <!-- X轴标签 -->\r\n                <g class=\"x-axis\">\r\n                  <text v-for=\"hour in [0,6,12,18,24]\" :key=\"hour\"\r\n                        :x=\"hour*30\" y=\"195\" \r\n                        text-anchor=\"middle\" \r\n                        font-size=\"12\" \r\n                        fill=\"#666\">\r\n                    {{ hour }}:00\r\n                  </text>\r\n                </g>\r\n              </g>\r\n            </svg>\r\n            <div class=\"chart-legend\">\r\n              <span class=\"legend-item\">\r\n                <span class=\"legend-line flow\"></span>\r\n                流量\r\n              </span>\r\n              <span class=\"legend-item\">\r\n                <span class=\"legend-line congestion\"></span>\r\n                拥堵指数\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 路段详情列表 -->\r\n        <div class=\"segments-list\" v-if=\"segmentDetails && segmentDetails.length > 0\">\r\n          <h3>路段详情</h3>\r\n          <div class=\"segments-table\">\r\n            <div class=\"table-header\">\r\n              <div class=\"col-id\">路段ID</div>\r\n              <div class=\"col-type\">类型</div>\r\n              <div class=\"col-length\">长度(km)</div>\r\n              <div class=\"col-speed\">平均速度</div>\r\n              <div class=\"col-flow\">流量</div>\r\n              <div class=\"col-congestion\">拥堵状态</div>\r\n              <div class=\"col-action\">操作</div>\r\n            </div>\r\n            <div class=\"table-body\">\r\n              <div \r\n                v-for=\"segment in paginatedSegments\" \r\n                :key=\"segment.segment_id\"\r\n                class=\"table-row\"\r\n                @click=\"selectSegment(segment)\"\r\n                :class=\"{ active: selectedSegment?.segment_id === segment.segment_id }\"\r\n              >\r\n                <div class=\"col-id\">{{ segment.segment_id }}</div>\r\n                <div class=\"col-type\">{{ getRoadTypeLabel(segment.road_type) }}</div>\r\n                <div class=\"col-length\">{{ segment.segment_length?.toFixed(3) || 'N/A' }}</div>\r\n                <div class=\"col-speed\">{{ segment.avg_speed?.toFixed(1) || 'N/A' }}</div>\r\n                <div class=\"col-flow\">{{ segment.flow_rate?.toFixed(0) || 'N/A' }}</div>\r\n                <div class=\"col-congestion\">\r\n                  <span :class=\"'congestion-' + segment.congestion_level\">\r\n                    {{ getCongestionLabel(segment.congestion_level) }}\r\n                  </span>\r\n                </div>\r\n                <div class=\"col-action\">\r\n                  <button @click.stop=\"focusOnSegment(segment)\" class=\"focus-btn\">\r\n                    定位\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <!-- 分页控制 -->\r\n            <div class=\"pagination\" v-if=\"totalPages > 1\">\r\n              <button \r\n                @click=\"currentPage = Math.max(1, currentPage - 1)\"\r\n                :disabled=\"currentPage === 1\"\r\n              >\r\n                上一页\r\n              </button>\r\n              <span>{{ currentPage }} / {{ totalPages }}</span>\r\n              <button \r\n                @click=\"currentPage = Math.min(totalPages, currentPage + 1)\"\r\n                :disabled=\"currentPage === totalPages\"\r\n              >\r\n                下一页\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 网络指标摘要 -->\r\n        <div class=\"network-summary\" v-if=\"networkMetrics\">\r\n          <h3>路网指标摘要</h3>\r\n          <div class=\"metrics-grid\">\r\n            <div class=\"metric-item\">\r\n              <div class=\"metric-label\">网络平均速度</div>\r\n              <div class=\"metric-value\">{{ networkMetrics.traffic_performance?.avg_speed?.toFixed(1) || 'N/A' }} km/h</div>\r\n            </div>\r\n            <div class=\"metric-item\">\r\n              <div class=\"metric-label\">网络利用率</div>\r\n              <div class=\"metric-value\">{{ networkMetrics.efficiency_indicators?.network_utilization?.toFixed(1) || 'N/A' }}%</div>\r\n            </div>\r\n            <div class=\"metric-item\">\r\n              <div class=\"metric-label\">畅通率</div>\r\n              <div class=\"metric-value\">{{ networkMetrics.efficiency_indicators?.free_flow_percentage?.toFixed(1) || 'N/A' }}%</div>\r\n            </div>\r\n            <div class=\"metric-item\">\r\n              <div class=\"metric-label\">瓶颈率</div>\r\n              <div class=\"metric-value\">{{ networkMetrics.efficiency_indicators?.bottleneck_rate?.toFixed(1) || 'N/A' }}%</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 加载遮罩 -->\r\n    <div v-if=\"isLoading\" class=\"loading-overlay\">\r\n      <div class=\"loading-spinner\"></div>\r\n      <p>正在分析路段数据，请稍候...</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { \r\n  performRoadAnalysis, \r\n  getRoadVisualizationData, \r\n  getRoadNetworkMetrics \r\n} from '@/api/traffic'\r\n\r\nexport default {\r\n  name: 'TrafficRoad',\r\n  data() {\r\n    return {\r\n      isLoading: false,\r\n      mapLoaded: false,\r\n      map: null,\r\n      \r\n      // 分析配置\r\n      analysisConfig: {\r\n        analysis_type: 'comprehensive',\r\n        segment_types: ['all'],\r\n        aggregation_level: 'segment',\r\n        include_patterns: true,\r\n        min_vehicles: 10\r\n      },\r\n      \r\n      // 可视化配置\r\n      visualizationType: 'speed',\r\n      \r\n      // 分析数据\r\n      analysisData: null,\r\n      visualizationData: null,\r\n      networkMetrics: null,\r\n      \r\n      // 图表数据\r\n      speedDistributions: [],\r\n      flowPatterns: [],\r\n      \r\n      // 路段数据\r\n      segmentDetails: [],\r\n      selectedSegment: null,\r\n      \r\n      // 分页\r\n      currentPage: 1,\r\n      pageSize: 10,\r\n      \r\n      // 图例信息\r\n      legendInfo: null\r\n    }\r\n  },\r\n  \r\n  computed: {\r\n    activeSegments() {\r\n      return this.analysisData?.analysis?.segments_data?.length || 0\r\n    },\r\n    \r\n    avgSpeed() {\r\n      const summary = this.analysisData?.analysis?.network_summary\r\n      return summary?.network_avg_speed?.toFixed(1) || 'N/A'\r\n    },\r\n    \r\n    avgFlow() {\r\n      if (!this.segmentDetails || this.segmentDetails.length === 0) return 'N/A'\r\n      const totalFlow = this.segmentDetails.reduce((sum, s) => sum + (s.flow_rate || 0), 0)\r\n      return (totalFlow / this.segmentDetails.length).toFixed(0)\r\n    },\r\n    \r\n    bottleneckCount() {\r\n      return this.analysisData?.analysis?.bottleneck_segments?.length || 0\r\n    },\r\n    \r\n    paginatedSegments() {\r\n      const start = (this.currentPage - 1) * this.pageSize\r\n      const end = start + this.pageSize\r\n      return this.segmentDetails.slice(start, end)\r\n    },\r\n    \r\n    totalPages() {\r\n      return Math.ceil(this.segmentDetails.length / this.pageSize)\r\n    }\r\n  },\r\n  \r\n  mounted() {\r\n    this.initializeComponent()\r\n  },\r\n  \r\n  methods: {\r\n    async initializeComponent() {\r\n      try {\r\n        await this.initializeMap()\r\n        await this.performAnalysis()\r\n      } catch (error) {\r\n        console.error('初始化路段分析组件失败:', error)\r\n      }\r\n    },\r\n    \r\n    async initializeMap() {\r\n      try {\r\n        // 尝试初始化高德地图\r\n        if (typeof AMap !== 'undefined') {\r\n          this.map = new AMap.Map('road-analysis-map', {\r\n            zoom: 11,\r\n            center: [116.397, 39.916],\r\n            mapStyle: 'amap://styles/blue'\r\n          })\r\n          this.mapLoaded = true\r\n        } else {\r\n          console.warn('高德地图API未加载，使用Canvas降级模式')\r\n          this.mapLoaded = false\r\n          this.initializeFallbackCanvas()\r\n        }\r\n      } catch (error) {\r\n        console.warn('地图初始化失败，使用Canvas降级模式:', error)\r\n        this.mapLoaded = false\r\n        this.initializeFallbackCanvas()\r\n      }\r\n    },\r\n    \r\n    initializeFallbackCanvas() {\r\n      this.$nextTick(() => {\r\n        const canvas = this.$refs.fallbackCanvas\r\n        if (canvas) {\r\n          const ctx = canvas.getContext('2d')\r\n          ctx.fillStyle = '#f0f0f0'\r\n          ctx.fillRect(0, 0, 800, 600)\r\n          \r\n          ctx.fillStyle = '#666'\r\n          ctx.font = '16px Arial'\r\n          ctx.textAlign = 'center'\r\n          ctx.fillText('路段分析地图', 400, 300)\r\n          ctx.fillText('(Canvas降级模式)', 400, 320)\r\n        }\r\n      })\r\n    },\r\n    \r\n    async performAnalysis() {\r\n      this.isLoading = true\r\n      try {\r\n        // 执行路段分析\r\n        const analysisResult = await performRoadAnalysis(this.analysisConfig)\r\n        \r\n        if (analysisResult.success) {\r\n          this.analysisData = analysisResult\r\n          this.speedDistributions = analysisResult.speed_distributions || []\r\n          this.flowPatterns = analysisResult.flow_patterns || []\r\n          \r\n          // 构建路段详情数据\r\n          this.buildSegmentDetails()\r\n          \r\n          // 获取网络指标\r\n          await this.loadNetworkMetrics()\r\n          \r\n          // 更新可视化\r\n          await this.updateVisualization()\r\n          \r\n          this.$message.success('路段分析完成')\r\n        } else {\r\n          this.$message.error(`分析失败: ${analysisResult.message}`)\r\n        }\r\n      } catch (error) {\r\n        console.error('路段分析失败:', error)\r\n        this.$message.error('分析过程中发生错误')\r\n      } finally {\r\n        this.isLoading = false\r\n      }\r\n    },\r\n    \r\n    buildSegmentDetails() {\r\n      if (!this.analysisData) return\r\n      \r\n      const segments = this.analysisData.analysis?.segments_data || []\r\n      const trafficData = this.analysisData.traffic_data || []\r\n      \r\n      // 创建路段到交通数据的映射\r\n      const trafficMap = {}\r\n      trafficData.forEach(data => {\r\n        if (!trafficMap[data.segment_id]) {\r\n          trafficMap[data.segment_id] = []\r\n        }\r\n        trafficMap[data.segment_id].push(data)\r\n      })\r\n      \r\n      // 构建详情数据\r\n      this.segmentDetails = segments.map(segment => {\r\n        const traffic = trafficMap[segment.segment_id] || []\r\n        const avgTraffic = this.calculateAverageTraffic(traffic)\r\n        \r\n        return {\r\n          ...segment,\r\n          ...avgTraffic\r\n        }\r\n      })\r\n    },\r\n    \r\n    calculateAverageTraffic(trafficList) {\r\n      if (!trafficList || trafficList.length === 0) {\r\n        return {\r\n          avg_speed: 0,\r\n          flow_rate: 0,\r\n          congestion_level: 'unknown'\r\n        }\r\n      }\r\n      \r\n      const avgSpeed = trafficList.reduce((sum, t) => sum + t.avg_speed, 0) / trafficList.length\r\n      const avgFlow = trafficList.reduce((sum, t) => sum + t.flow_rate, 0) / trafficList.length\r\n      \r\n      // 取最常见的拥堵等级\r\n      const congestionCounts = {}\r\n      trafficList.forEach(t => {\r\n        congestionCounts[t.congestion_level] = (congestionCounts[t.congestion_level] || 0) + 1\r\n      })\r\n      \r\n      const mostCommonCongestion = Object.keys(congestionCounts).reduce((a, b) => \r\n        congestionCounts[a] > congestionCounts[b] ? a : b\r\n      )\r\n      \r\n      return {\r\n        avg_speed: avgSpeed,\r\n        flow_rate: avgFlow,\r\n        congestion_level: mostCommonCongestion\r\n      }\r\n    },\r\n    \r\n    async loadNetworkMetrics() {\r\n      try {\r\n        const metricsResult = await getRoadNetworkMetrics()\r\n        if (metricsResult.success) {\r\n          this.networkMetrics = metricsResult.metrics\r\n        }\r\n      } catch (error) {\r\n        console.error('加载网络指标失败:', error)\r\n      }\r\n    },\r\n    \r\n    async updateVisualization() {\r\n      try {\r\n        const params = {\r\n          visualization_type: this.visualizationType,\r\n          time_range: {\r\n            start: Date.now() / 1000 - 3600,\r\n            end: Date.now() / 1000\r\n          }\r\n        }\r\n        \r\n        const vizResult = await getRoadVisualizationData(params)\r\n        \r\n        if (vizResult.success) {\r\n          this.visualizationData = vizResult.visualization_data\r\n          this.legendInfo = vizResult.legend_info\r\n          \r\n          // 更新地图显示\r\n          this.renderSegmentsOnMap()\r\n        }\r\n      } catch (error) {\r\n        console.error('更新可视化失败:', error)\r\n      }\r\n    },\r\n    \r\n    renderSegmentsOnMap() {\r\n      if (!this.visualizationData) return\r\n      \r\n      if (this.mapLoaded && this.map) {\r\n        this.renderSegmentsOnAMap()\r\n      } else {\r\n        this.renderSegmentsOnCanvas()\r\n      }\r\n    },\r\n    \r\n    renderSegmentsOnAMap() {\r\n      // 清除现有图层\r\n      this.map.clearMap()\r\n      \r\n      const segments = this.visualizationData.segments || []\r\n      \r\n      segments.forEach(segment => {\r\n        const startPoint = [segment.start_point.lng, segment.start_point.lat]\r\n        const endPoint = [segment.end_point.lng, segment.end_point.lat]\r\n        \r\n        const polyline = new AMap.Polyline({\r\n          path: [startPoint, endPoint],\r\n          strokeColor: segment.color,\r\n          strokeWeight: 4,\r\n          strokeOpacity: 0.8\r\n        })\r\n        \r\n        this.map.add(polyline)\r\n        \r\n        // 添加点击事件\r\n        polyline.on('click', () => {\r\n          this.showSegmentInfo(segment)\r\n        })\r\n      })\r\n      \r\n      // 调整地图视野\r\n      if (segments.length > 0) {\r\n        const bounds = new AMap.Bounds()\r\n        segments.forEach(segment => {\r\n          bounds.extend([segment.start_point.lng, segment.start_point.lat])\r\n          bounds.extend([segment.end_point.lng, segment.end_point.lat])\r\n        })\r\n        this.map.setBounds(bounds)\r\n      }\r\n    },\r\n    \r\n    renderSegmentsOnCanvas() {\r\n      const canvas = this.$refs.fallbackCanvas\r\n      if (!canvas) return\r\n      \r\n      const ctx = canvas.getContext('2d')\r\n      ctx.clearRect(0, 0, 800, 600)\r\n      \r\n      // 绘制背景\r\n      ctx.fillStyle = '#f8f9fa'\r\n      ctx.fillRect(0, 0, 800, 600)\r\n      \r\n      // 绘制路段（简化显示）\r\n      const segments = this.visualizationData.segments || []\r\n      \r\n      if (segments.length > 0) {\r\n        segments.forEach((segment, index) => {\r\n          const x = (index % 10) * 80 + 40\r\n          const y = Math.floor(index / 10) * 60 + 40\r\n          \r\n          ctx.fillStyle = segment.color\r\n          ctx.fillRect(x, y, 60, 40)\r\n          \r\n          ctx.fillStyle = '#333'\r\n          ctx.font = '10px Arial'\r\n          ctx.fillText(segment.segment_id.slice(-4), x + 5, y + 15)\r\n          ctx.fillText(`${segment.value}`, x + 5, y + 30)\r\n        })\r\n      }\r\n      \r\n      // 绘制标题\r\n      ctx.fillStyle = '#333'\r\n      ctx.font = '16px Arial'\r\n      ctx.fillText('路段可视化 (Canvas模式)', 20, 25)\r\n    },\r\n    \r\n    async onConfigChange() {\r\n      // 延迟执行分析，避免频繁请求\r\n      clearTimeout(this.configChangeTimer)\r\n      this.configChangeTimer = setTimeout(() => {\r\n        this.performAnalysis()\r\n      }, 1000)\r\n    },\r\n    \r\n    async onVisualizationChange() {\r\n      await this.updateVisualization()\r\n    },\r\n    \r\n    async refreshVisualization() {\r\n      await this.updateVisualization()\r\n    },\r\n    \r\n    selectSegment(segment) {\r\n      this.selectedSegment = segment\r\n    },\r\n    \r\n    focusOnSegment(segment) {\r\n      if (this.mapLoaded && this.map) {\r\n        const center = [\r\n          (segment.start_point.lng + segment.end_point.lng) / 2,\r\n          (segment.start_point.lat + segment.end_point.lat) / 2\r\n        ]\r\n        this.map.setCenter(center)\r\n        this.map.setZoom(15)\r\n      }\r\n      \r\n      this.selectSegment(segment)\r\n      this.$message.success(`已定位到路段: ${segment.segment_id}`)\r\n    },\r\n    \r\n    showSegmentInfo(segment) {\r\n      this.$message.info(`路段 ${segment.segment_id}: ${segment.value}`)\r\n    },\r\n    \r\n    exportData() {\r\n      if (!this.analysisData) return\r\n      \r\n      const data = {\r\n        analysis_summary: this.analysisData.analysis,\r\n        segment_details: this.segmentDetails,\r\n        network_metrics: this.networkMetrics,\r\n        export_time: new Date().toISOString()\r\n      }\r\n      \r\n      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' })\r\n      const url = URL.createObjectURL(blob)\r\n      const a = document.createElement('a')\r\n      a.href = url\r\n      a.download = `road_analysis_${Date.now()}.json`\r\n      a.click()\r\n      URL.revokeObjectURL(url)\r\n      \r\n      this.$message.success('数据导出成功')\r\n    },\r\n    \r\n    getRoadTypeLabel(type) {\r\n      const labels = {\r\n        highway: '高速公路',\r\n        arterial: '主干道',\r\n        urban: '城市道路',\r\n        local: '支路'\r\n      }\r\n      return labels[type] || type\r\n    },\r\n    \r\n    getCongestionLabel(level) {\r\n      const labels = {\r\n        free: '畅通',\r\n        moderate: '缓慢',\r\n        heavy: '拥堵',\r\n        jam: '严重拥堵'\r\n      }\r\n      return labels[level] || level\r\n    },\r\n    \r\n    getFlowPolylinePoints() {\r\n      if (!this.flowPatterns || this.flowPatterns.length === 0) return ''\r\n      \r\n      const maxFlow = Math.max(...this.flowPatterns.map(p => p.avg_flow))\r\n      return this.flowPatterns.map(pattern => {\r\n        const x = pattern.hour * 30\r\n        const y = 180 - (pattern.avg_flow / maxFlow * 160)\r\n        return `${x},${y}`\r\n      }).join(' ')\r\n    },\r\n    \r\n    getCongestionPolylinePoints() {\r\n      if (!this.flowPatterns || this.flowPatterns.length === 0) return ''\r\n      \r\n      return this.flowPatterns.map(pattern => {\r\n        const x = pattern.hour * 30\r\n        const y = 180 - (pattern.congestion_index * 160)\r\n        return `${x},${y}`\r\n      }).join(' ')\r\n    }\r\n  }\r\n}\r\n</script> \r\n\r\n<style scoped>\r\n.road-segment-analysis {\r\n  padding: 20px;\r\n  background: #f8f9fa;\r\n  min-height: 100vh;\r\n}\r\n\r\n.analysis-header {\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.analysis-header h2 {\r\n  color: #2c3e50;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.subtitle {\r\n  color: #7f8c8d;\r\n  margin: 0;\r\n}\r\n\r\n.control-panel {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.panel-row {\r\n  display: flex;\r\n  gap: 20px;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n}\r\n\r\n.control-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n}\r\n\r\n.control-group label {\r\n  font-size: 12px;\r\n  color: #666;\r\n  font-weight: 500;\r\n}\r\n\r\n.control-group select,\r\n.control-group input {\r\n  padding: 8px 12px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n}\r\n\r\n.analyze-btn {\r\n  padding: 8px 16px;\r\n  background: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  margin-top: 20px;\r\n}\r\n\r\n.analyze-btn:disabled {\r\n  background: #ccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.stats-cards {\r\n  display: flex;\r\n  gap: 20px;\r\n  margin-bottom: 20px;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.stat-card {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  text-align: center;\r\n  flex: 1;\r\n  min-width: 120px;\r\n}\r\n\r\n.stat-value {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  color: #2c3e50;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.stat-label {\r\n  font-size: 12px;\r\n  color: #7f8c8d;\r\n}\r\n\r\n.main-content {\r\n  display: grid;\r\n  grid-template-columns: 2fr 1fr;\r\n  gap: 20px;\r\n}\r\n\r\n.map-section {\r\n  background: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  overflow: hidden;\r\n}\r\n\r\n.map-header {\r\n  padding: 15px;\r\n  border-bottom: 1px solid #eee;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.map-header h3 {\r\n  margin: 0;\r\n  color: #2c3e50;\r\n}\r\n\r\n.map-controls {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.map-controls button {\r\n  padding: 6px 12px;\r\n  border: 1px solid #ddd;\r\n  background: white;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 12px;\r\n}\r\n\r\n.map-container {\r\n  position: relative;\r\n  height: 400px;\r\n}\r\n\r\n.map-canvas,\r\n.map-fallback {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.fallback-canvas {\r\n  display: block;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.canvas-overlay {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  background: rgba(255,255,255,0.9);\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  font-size: 12px;\r\n  color: #666;\r\n}\r\n\r\n.legend {\r\n  padding: 15px;\r\n  border-top: 1px solid #eee;\r\n}\r\n\r\n.legend h4 {\r\n  margin: 0 0 10px 0;\r\n  color: #2c3e50;\r\n  font-size: 14px;\r\n}\r\n\r\n.legend-items {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n}\r\n\r\n.legend-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n  font-size: 12px;\r\n}\r\n\r\n.legend-color {\r\n  width: 16px;\r\n  height: 16px;\r\n  border-radius: 2px;\r\n}\r\n\r\n.analysis-panel {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n}\r\n\r\n.chart-section {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n}\r\n\r\n.chart-section h3 {\r\n  margin: 0 0 15px 0;\r\n  color: #2c3e50;\r\n  font-size: 16px;\r\n}\r\n\r\n.speed-chart {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n}\r\n\r\n.speed-bar {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n}\r\n\r\n.bar-container {\r\n  flex: 1;\r\n  position: relative;\r\n  height: 24px;\r\n  background: #f5f5f5;\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n}\r\n\r\n.bar-fill {\r\n  height: 100%;\r\n  background: linear-gradient(90deg, #4CAF50, #2196F3);\r\n  border-radius: 12px;\r\n  transition: width 0.3s ease;\r\n}\r\n\r\n.bar-label {\r\n  position: absolute;\r\n  left: 8px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  font-size: 11px;\r\n  color: #333;\r\n  font-weight: 500;\r\n}\r\n\r\n.bar-value {\r\n  min-width: 40px;\r\n  font-size: 12px;\r\n  color: #666;\r\n  text-align: right;\r\n}\r\n\r\n.flow-chart {\r\n  margin-top: 10px;\r\n}\r\n\r\n.chart-legend {\r\n  display: flex;\r\n  gap: 20px;\r\n  margin-top: 10px;\r\n  justify-content: center;\r\n}\r\n\r\n.legend-line {\r\n  display: inline-block;\r\n  width: 20px;\r\n  height: 2px;\r\n  margin-right: 5px;\r\n}\r\n\r\n.legend-line.flow {\r\n  background: #2196F3;\r\n}\r\n\r\n.legend-line.congestion {\r\n  background: #F44336;\r\n}\r\n\r\n.segments-list {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n}\r\n\r\n.segments-table {\r\n  border: 1px solid #eee;\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n}\r\n\r\n.table-header,\r\n.table-row {\r\n  display: grid;\r\n  grid-template-columns: 80px 60px 70px 70px 60px 80px 50px;\r\n  align-items: center;\r\n}\r\n\r\n.table-header {\r\n  background: #f8f9fa;\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  color: #2c3e50;\r\n  padding: 12px 8px;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.table-row {\r\n  padding: 10px 8px;\r\n  border-bottom: 1px solid #f0f0f0;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n  font-size: 12px;\r\n}\r\n\r\n.table-row:hover {\r\n  background: #f8f9fa;\r\n}\r\n\r\n.table-row.active {\r\n  background: #e3f2fd;\r\n}\r\n\r\n.table-row > div {\r\n  padding: 0 4px;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n}\r\n\r\n.congestion-free { color: #4CAF50; }\r\n.congestion-moderate { color: #FF9800; }\r\n.congestion-heavy { color: #F44336; }\r\n.congestion-jam { color: #D32F2F; }\r\n\r\n.focus-btn {\r\n  padding: 4px 8px;\r\n  background: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n  font-size: 10px;\r\n}\r\n\r\n.pagination {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 10px;\r\n  padding: 15px;\r\n  background: #f8f9fa;\r\n}\r\n\r\n.pagination button {\r\n  padding: 6px 12px;\r\n  border: 1px solid #ddd;\r\n  background: white;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 12px;\r\n}\r\n\r\n.pagination button:disabled {\r\n  background: #f5f5f5;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.network-summary {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n}\r\n\r\n.metrics-grid {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 15px;\r\n}\r\n\r\n.metric-item {\r\n  text-align: center;\r\n}\r\n\r\n.metric-label {\r\n  font-size: 12px;\r\n  color: #666;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.metric-value {\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  color: #2c3e50;\r\n}\r\n\r\n.loading-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: rgba(0,0,0,0.5);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: white;\r\n  z-index: 1000;\r\n}\r\n\r\n.loading-spinner {\r\n  width: 40px;\r\n  height: 40px;\r\n  border: 4px solid rgba(255,255,255,0.3);\r\n  border-top: 4px solid white;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n@media (max-width: 1200px) {\r\n  .main-content {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .panel-row {\r\n    justify-content: center;\r\n  }\r\n  \r\n  .stats-cards {\r\n    justify-content: center;\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .table-header,\r\n  .table-row {\r\n    grid-template-columns: 1fr;\r\n    gap: 5px;\r\n  }\r\n  \r\n  .table-header > div,\r\n  .table-row > div {\r\n    padding: 5px;\r\n  }\r\n  \r\n  .metrics-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}