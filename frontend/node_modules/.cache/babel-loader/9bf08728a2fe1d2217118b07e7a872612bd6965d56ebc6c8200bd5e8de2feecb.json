{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport { getDynamicHeatmap, performClusteringAnalysis, performODAnalysis, performComprehensiveAnalysis, getAvailableAlgorithms } from '@/api/traffic';\nexport default {\n  name: 'SpatioTemporalAnalysis',\n  data() {\n    return {\n      // 分析参数\n      analysisType: 'heatmap',\n      analysisParams: {\n        startTime: '2013-09-13T08:00:00',\n        endTime: '2013-09-13T12:00:00'\n      },\n      // 热力图参数\n      heatmapParams: {\n        temporal_resolution: 15,\n        spatial_resolution: 0.001,\n        smoothing: true,\n        normalization: 'minmax'\n      },\n      // 聚类参数\n      clusteringParams: {\n        algorithm: 'dbscan',\n        data_type: 'pickup',\n        params: {}\n      },\n      // OD分析参数\n      odParams: {\n        min_trip_duration: 60,\n        max_trip_duration: 7200,\n        min_trip_distance: 0.1,\n        aggregate_level: 'individual'\n      },\n      // 状态\n      loading: false,\n      map: null,\n      heatmapLayer: null,\n      // 结果数据\n      analysisResults: null,\n      timeFrames: [],\n      clusteringResults: null,\n      odResults: null,\n      // 时间轴控制\n      currentFrameIndex: 0,\n      isPlaying: false,\n      playbackSpeed: 1000,\n      playbackTimer: null,\n      // 可用算法\n      availableAlgorithms: ['dbscan', 'kmeans', 'hierarchical'],\n      // 地图模式\n      mapMode: 'canvas'\n    };\n  },\n  computed: {\n    currentTimeLabel() {\n      if (this.timeFrames.length > 0 && this.currentFrameIndex < this.timeFrames.length) {\n        return this.timeFrames[this.currentFrameIndex].time_label;\n      }\n      return '';\n    },\n    timeRangeLabel() {\n      if (this.timeFrames.length > 0) {\n        const firstFrame = this.timeFrames[0];\n        const lastFrame = this.timeFrames[this.timeFrames.length - 1];\n        return `${firstFrame.time_label.split('-')[0]} - ${lastFrame.time_label.split('-')[1]}`;\n      }\n      return '';\n    }\n  },\n  async mounted() {\n    // 暂时跳过地图加载，直接使用Canvas模式\n    this.initCanvasDisplay();\n    await this.loadAvailableAlgorithms();\n  },\n  beforeDestroy() {\n    if (this.playbackTimer) {\n      clearInterval(this.playbackTimer);\n    }\n    if (this.map && this.map.destroy) {\n      this.map.destroy();\n    }\n  },\n  methods: {\n    async waitForAMapLoad() {\n      // 等待AMap加载\n      return new Promise(resolve => {\n        if (typeof AMap !== 'undefined') {\n          resolve();\n        } else {\n          const checkAMap = () => {\n            if (typeof AMap !== 'undefined') {\n              resolve();\n            } else {\n              setTimeout(checkAMap, 100);\n            }\n          };\n          checkAMap();\n        }\n      });\n    },\n    initMap() {\n      try {\n        // 检查AMap是否已加载\n        if (typeof AMap === 'undefined') {\n          console.warn('高德地图API未加载，使用Canvas显示模式');\n          this.initCanvasDisplay();\n          return;\n        }\n\n        // 初始化高德地图\n        this.map = new AMap.Map('spatiotemporal-map', {\n          zoom: 12,\n          center: [118.8, 32.05],\n          mapStyle: 'amap://styles/grey'\n        });\n\n        // 添加工具条\n        this.map.addControl(new AMap.ToolBar({\n          position: 'RB'\n        }));\n        this.mapMode = 'amap';\n        console.log('地图初始化成功');\n      } catch (error) {\n        console.error('地图初始化失败:', error);\n        this.$message.warning('地图服务不可用，使用简化显示模式');\n        this.initCanvasDisplay();\n      }\n    },\n    initCanvasDisplay() {\n      // 当地图API不可用时，使用Canvas作为降级方案\n      const mapContainer = document.getElementById('spatiotemporal-map');\n      if (mapContainer) {\n        mapContainer.innerHTML = `\n          <div style=\"\n            height: 100%; \n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            color: white;\n            text-align: center;\n            padding: 20px;\n          \">\n            <div style=\"font-size: 24px; margin-bottom: 10px;\">📊</div>\n            <div style=\"font-size: 18px; margin-bottom: 10px;\">时空分析可视化区域</div>\n            <div style=\"font-size: 14px; opacity: 0.8;\">数据将以列表和统计图表形式展示</div>\n            <div id=\"canvas-content\" style=\"margin-top: 20px; width: 100%; max-width: 600px;\">\n              <!-- 分析结果将在这里显示 -->\n            </div>\n          </div>\n        `;\n        this.mapMode = 'canvas';\n        console.log('Canvas显示模式初始化完成');\n      }\n    },\n    async loadAvailableAlgorithms() {\n      try {\n        const result = await getAvailableAlgorithms();\n        if (result.success) {\n          this.availableAlgorithms = result.algorithms;\n        }\n      } catch (error) {\n        console.error('加载算法列表失败:', error);\n      }\n    },\n    async startAnalysis() {\n      this.loading = true;\n      try {\n        switch (this.analysisType) {\n          case 'heatmap':\n            await this.performHeatmapAnalysis();\n            break;\n          case 'clustering':\n            await this.performClusteringAnalysisAction();\n            break;\n          case 'od_analysis':\n            await this.performODAnalysisAction();\n            break;\n          case 'comprehensive':\n            await this.performComprehensiveAnalysisAction();\n            break;\n        }\n      } catch (error) {\n        this.$message.error('分析失败: ' + error.message);\n      } finally {\n        this.loading = false;\n      }\n    },\n    async performHeatmapAnalysis() {\n      const params = {\n        start_time: this.analysisParams.startTime,\n        end_time: this.analysisParams.endTime,\n        temporal_resolution: this.heatmapParams.temporal_resolution,\n        spatial_resolution: this.heatmapParams.spatial_resolution,\n        smoothing: this.heatmapParams.smoothing\n      };\n      const result = await getDynamicHeatmap(params);\n      if (result.success) {\n        this.timeFrames = result.frames;\n        this.analysisResults = {\n          totalFrames: result.frames.length,\n          avgIntensity: result.time_series_stats?.avg_intensity_per_frame || 0\n        };\n        this.currentFrameIndex = 0;\n        this.displayCurrentFrame();\n        this.$message.success(`成功生成${result.frames.length}个时间帧的动态热力图`);\n      } else {\n        throw new Error(result.message);\n      }\n    },\n    async performClusteringAnalysisAction() {\n      const result = await performClusteringAnalysis(this.analysisParams.startTime, this.analysisParams.endTime, this.clusteringParams);\n      if (result.success) {\n        this.clusteringResults = result;\n        this.analysisResults = {\n          totalClusters: result.clusters.length\n        };\n        this.displayClusters();\n        this.$message.success(`聚类分析完成，发现${result.clusters.length}个聚类`);\n      } else {\n        throw new Error(result.message);\n      }\n    },\n    async performODAnalysisAction() {\n      const result = await performODAnalysis(this.analysisParams.startTime, this.analysisParams.endTime, this.odParams);\n      if (result.success) {\n        this.odResults = result;\n        this.analysisResults = {\n          totalODPairs: result.od_pairs.length\n        };\n        this.displayODFlows();\n        this.$message.success(`OD分析完成，找到${result.od_pairs.length}个OD对`);\n      } else {\n        throw new Error(result.message);\n      }\n    },\n    async performComprehensiveAnalysisAction() {\n      const result = await performComprehensiveAnalysis(this.analysisParams.startTime, this.analysisParams.endTime, this.heatmapParams);\n      if (result.success) {\n        this.timeFrames = result.data.data; // 时间帧数据\n        this.analysisResults = {\n          totalFrames: result.data.data.length,\n          avgIntensity: result.data.statistics?.time_series_stats?.avg_intensity_per_frame || 0\n        };\n        this.currentFrameIndex = 0;\n        this.displayCurrentFrame();\n        this.$message.success('综合时空分析完成');\n      } else {\n        throw new Error(result.message);\n      }\n    },\n    displayCurrentFrame() {\n      if (this.timeFrames.length === 0 || this.currentFrameIndex >= this.timeFrames.length) {\n        return;\n      }\n      const currentFrame = this.timeFrames[this.currentFrameIndex];\n      if (this.mapMode === 'canvas') {\n        // Canvas模式下显示数据\n        this.displayFrameInCanvas(currentFrame);\n        return;\n      }\n\n      // 清除之前的热力图\n      if (this.heatmapLayer) {\n        this.map.remove(this.heatmapLayer);\n      }\n\n      // 创建热力图数据\n      const heatmapData = currentFrame.heatmap_points.map(point => ({\n        lng: point.lng,\n        lat: point.lat,\n        count: point.intensity\n      }));\n\n      // 创建热力图层\n      this.heatmapLayer = new AMap.HeatMap(this.map, {\n        radius: 20,\n        opacity: [0, 0.8],\n        gradient: {\n          0.4: 'blue',\n          0.6: 'cyan',\n          0.7: 'lime',\n          0.8: 'yellow',\n          1.0: 'red'\n        }\n      });\n      this.heatmapLayer.setDataSet({\n        data: heatmapData,\n        max: Math.max(...heatmapData.map(d => d.count))\n      });\n    },\n    displayFrameInCanvas(frame) {\n      // 在Canvas模式下显示时间帧数据\n      const canvasContent = document.getElementById('canvas-content');\n      if (!canvasContent) return;\n      const topPoints = frame.heatmap_points.sort((a, b) => b.intensity - a.intensity).slice(0, 10);\n      canvasContent.innerHTML = `\n        <div style=\"background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; text-align: left;\">\n          <div style=\"margin-bottom: 10px; font-weight: bold;\">时间: ${frame.time_label}</div>\n          <div style=\"margin-bottom: 10px;\">总强度: ${frame.total_intensity.toFixed(2)}</div>\n          <div style=\"margin-bottom: 10px;\">数据点数: ${frame.point_count}</div>\n          <div style=\"margin-bottom: 5px; font-weight: bold;\">热点区域 TOP 10:</div>\n          ${topPoints.map((point, index) => `\n            <div style=\"margin: 3px 0; font-size: 12px;\">\n              ${index + 1}. (${point.lat.toFixed(4)}, ${point.lng.toFixed(4)}) - 强度: ${point.intensity.toFixed(2)}\n            </div>\n          `).join('')}\n        </div>\n      `;\n    },\n    displayClusters() {\n      if (this.mapMode === 'canvas') {\n        this.displayClustersInCanvas();\n        return;\n      }\n\n      // 清除地图\n      this.map.clearMap();\n      const colors = ['#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#FF00FF', '#00FFFF', '#FFA500', '#800080'];\n      this.clusteringResults.clusters.forEach((cluster, index) => {\n        const color = colors[index % colors.length];\n\n        // 聚类中心标记\n        const centerMarker = new AMap.Marker({\n          position: [cluster.center_lng, cluster.center_lat],\n          icon: new AMap.Icon({\n            size: new AMap.Size(20, 20),\n            image: `data:image/svg+xml;base64,${btoa(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\"><circle cx=\"10\" cy=\"10\" r=\"8\" fill=\"${color}\" stroke=\"white\" stroke-width=\"2\"/><text x=\"10\" y=\"14\" text-anchor=\"middle\" fill=\"white\" font-size=\"10\">${cluster.cluster_id}</text></svg>`)}`\n          }),\n          title: `聚类 ${cluster.cluster_id} (${cluster.point_count} 点)`\n        });\n        this.map.add(centerMarker);\n\n        // 聚类点\n        cluster.points.forEach(point => {\n          const pointMarker = new AMap.CircleMarker({\n            center: [point.lng, point.lat],\n            radius: 3,\n            fillColor: color,\n            fillOpacity: 0.6,\n            strokeColor: color,\n            strokeOpacity: 0.8,\n            strokeWeight: 1\n          });\n          this.map.add(pointMarker);\n        });\n      });\n\n      // 调整地图视野\n      if (this.clusteringResults.clusters.length > 0) {\n        const bounds = new AMap.Bounds();\n        this.clusteringResults.clusters.forEach(cluster => {\n          bounds.extend([cluster.center_lng, cluster.center_lat]);\n        });\n        this.map.setBounds(bounds);\n      }\n    },\n    displayClustersInCanvas() {\n      const canvasContent = document.getElementById('canvas-content');\n      if (!canvasContent) return;\n      const clusters = this.clusteringResults.clusters.sort((a, b) => b.density - a.density).slice(0, 8);\n      canvasContent.innerHTML = `\n        <div style=\"background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; text-align: left;\">\n          <div style=\"margin-bottom: 10px; font-weight: bold;\">聚类分析结果</div>\n          <div style=\"margin-bottom: 10px;\">总聚类数: ${this.clusteringResults.clusters.length}</div>\n          <div style=\"margin-bottom: 5px; font-weight: bold;\">密度最高的聚类:</div>\n          ${clusters.map((cluster, index) => `\n            <div style=\"margin: 5px 0; padding: 8px; background: rgba(255,255,255,0.1); border-radius: 4px; font-size: 12px;\">\n              <div>聚类 #${cluster.cluster_id} - 密度: ${cluster.density.toFixed(4)}</div>\n              <div>中心: (${cluster.center_lat.toFixed(4)}, ${cluster.center_lng.toFixed(4)})</div>\n              <div>点数: ${cluster.point_count}</div>\n            </div>\n          `).join('')}\n        </div>\n      `;\n    },\n    displayODFlows() {\n      // 清除地图\n      this.map.clearMap();\n\n      // 显示前20个流量最高的OD对\n      const topFlows = this.odResults.top_flows?.slice(0, 20) || [];\n      topFlows.forEach((flow, index) => {\n        const color = this.getFlowColor(flow.flow_count, topFlows[0].flow_count);\n\n        // 起点标记\n        const originMarker = new AMap.Marker({\n          position: [flow.origin_lng, flow.origin_lat],\n          icon: new AMap.Icon({\n            size: new AMap.Size(12, 12),\n            image: `data:image/svg+xml;base64,${btoa(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 12 12\"><circle cx=\"6\" cy=\"6\" r=\"5\" fill=\"green\" stroke=\"white\" stroke-width=\"1\"/></svg>`)}`\n          })\n        });\n\n        // 终点标记\n        const destMarker = new AMap.Marker({\n          position: [flow.destination_lng, flow.destination_lat],\n          icon: new AMap.Icon({\n            size: new AMap.Size(12, 12),\n            image: `data:image/svg+xml;base64,${btoa(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 12 12\"><circle cx=\"6\" cy=\"6\" r=\"5\" fill=\"red\" stroke=\"white\" stroke-width=\"1\"/></svg>`)}`\n          })\n        });\n\n        // 流量线\n        const flowLine = new AMap.Polyline({\n          path: [[flow.origin_lng, flow.origin_lat], [flow.destination_lng, flow.destination_lat]],\n          strokeColor: color,\n          strokeWeight: Math.max(1, Math.min(8, flow.flow_count / topFlows[0].flow_count * 8)),\n          strokeOpacity: 0.7\n        });\n        this.map.add([originMarker, destMarker, flowLine]);\n      });\n    },\n    getFlowColor(count, maxCount) {\n      const ratio = count / maxCount;\n      if (ratio > 0.8) return '#FF0000'; // 红色\n      if (ratio > 0.6) return '#FF8000'; // 橙色\n      if (ratio > 0.4) return '#FFFF00'; // 黄色\n      if (ratio > 0.2) return '#80FF00'; // 绿黄色\n      return '#00FF00'; // 绿色\n    },\n    // 时间轴控制方法\n    onTimeFrameChange(index) {\n      this.currentFrameIndex = index;\n      this.displayCurrentFrame();\n    },\n    previousFrame() {\n      if (this.currentFrameIndex > 0) {\n        this.currentFrameIndex--;\n        this.displayCurrentFrame();\n      }\n    },\n    nextFrame() {\n      if (this.currentFrameIndex < this.timeFrames.length - 1) {\n        this.currentFrameIndex++;\n        this.displayCurrentFrame();\n      }\n    },\n    togglePlayback() {\n      if (this.isPlaying) {\n        this.stopPlayback();\n      } else {\n        this.startPlayback();\n      }\n    },\n    startPlayback() {\n      this.isPlaying = true;\n      this.playbackTimer = setInterval(() => {\n        if (this.currentFrameIndex < this.timeFrames.length - 1) {\n          this.currentFrameIndex++;\n          this.displayCurrentFrame();\n        } else {\n          this.stopPlayback();\n        }\n      }, this.playbackSpeed);\n    },\n    stopPlayback() {\n      this.isPlaying = false;\n      if (this.playbackTimer) {\n        clearInterval(this.playbackTimer);\n        this.playbackTimer = null;\n      }\n    },\n    // 交互方法\n    locateCluster(cluster) {\n      this.map.setCenter([cluster.center_lng, cluster.center_lat]);\n      this.map.setZoom(15);\n    },\n    showFlowOnMap(flow) {\n      const bounds = new AMap.Bounds();\n      bounds.extend([flow.origin_lng, flow.origin_lat]);\n      bounds.extend([flow.destination_lng, flow.destination_lat]);\n      this.map.setBounds(bounds);\n    },\n    // 工具方法\n    formatNumber(num) {\n      if (typeof num !== 'number') return '0';\n      return num.toFixed(2);\n    },\n    formatCoordinate(coord) {\n      return coord.toFixed(4);\n    },\n    formatDuration(seconds) {\n      const hours = Math.floor(seconds / 3600);\n      const minutes = Math.floor(seconds % 3600 / 60);\n      if (hours > 0) {\n        return `${hours}小时${minutes}分钟`;\n      }\n      return `${minutes}分钟`;\n    },\n    resetParams() {\n      this.analysisParams = {\n        startTime: '2013-09-13T08:00:00',\n        endTime: '2013-09-13T12:00:00'\n      };\n      this.heatmapParams = {\n        temporal_resolution: 15,\n        spatial_resolution: 0.001,\n        smoothing: true,\n        normalization: 'minmax'\n      };\n      this.clusteringParams = {\n        algorithm: 'dbscan',\n        data_type: 'pickup',\n        params: {}\n      };\n    }\n  }\n};","map":{"version":3,"names":["getDynamicHeatmap","performClusteringAnalysis","performODAnalysis","performComprehensiveAnalysis","getAvailableAlgorithms","name","data","analysisType","analysisParams","startTime","endTime","heatmapParams","temporal_resolution","spatial_resolution","smoothing","normalization","clusteringParams","algorithm","data_type","params","odParams","min_trip_duration","max_trip_duration","min_trip_distance","aggregate_level","loading","map","heatmapLayer","analysisResults","timeFrames","clusteringResults","odResults","currentFrameIndex","isPlaying","playbackSpeed","playbackTimer","availableAlgorithms","mapMode","computed","currentTimeLabel","length","time_label","timeRangeLabel","firstFrame","lastFrame","split","mounted","initCanvasDisplay","loadAvailableAlgorithms","beforeDestroy","clearInterval","destroy","methods","waitForAMapLoad","Promise","resolve","AMap","checkAMap","setTimeout","initMap","console","warn","Map","zoom","center","mapStyle","addControl","ToolBar","position","log","error","$message","warning","mapContainer","document","getElementById","innerHTML","result","success","algorithms","startAnalysis","performHeatmapAnalysis","performClusteringAnalysisAction","performODAnalysisAction","performComprehensiveAnalysisAction","message","start_time","end_time","frames","totalFrames","avgIntensity","time_series_stats","avg_intensity_per_frame","displayCurrentFrame","Error","totalClusters","clusters","displayClusters","totalODPairs","od_pairs","displayODFlows","statistics","currentFrame","displayFrameInCanvas","remove","heatmapData","heatmap_points","point","lng","lat","count","intensity","HeatMap","radius","opacity","gradient","setDataSet","max","Math","d","frame","canvasContent","topPoints","sort","a","b","slice","total_intensity","toFixed","point_count","index","join","displayClustersInCanvas","clearMap","colors","forEach","cluster","color","centerMarker","Marker","center_lng","center_lat","icon","Icon","size","Size","image","btoa","cluster_id","title","add","points","pointMarker","CircleMarker","fillColor","fillOpacity","strokeColor","strokeOpacity","strokeWeight","bounds","Bounds","extend","setBounds","density","topFlows","top_flows","flow","getFlowColor","flow_count","originMarker","origin_lng","origin_lat","destMarker","destination_lng","destination_lat","flowLine","Polyline","path","min","maxCount","ratio","onTimeFrameChange","previousFrame","nextFrame","togglePlayback","stopPlayback","startPlayback","setInterval","locateCluster","setCenter","setZoom","showFlowOnMap","formatNumber","num","formatCoordinate","coord","formatDuration","seconds","hours","floor","minutes","resetParams"],"sources":["E:\\hhh\\frontend\\src\\modules\\trafficVisualization\\SpatioTemporalAnalysis.vue"],"sourcesContent":["<template>\r\n  <div class=\"spatiotemporal-analysis\">\r\n    <!-- 页面标题 -->\r\n    <div class=\"page-header\">\r\n      <h2 class=\"page-title\">时空动态分析</h2>\r\n      <p class=\"page-desc\">时间与空间热力图展示，支持聚类算法与OD对分析</p>\r\n    </div>\r\n\r\n    <!-- 控制面板 -->\r\n    <div class=\"control-panel\">\r\n      <div class=\"panel-section\">\r\n        <h3>分析配置</h3>\r\n        <div class=\"form-grid\">\r\n          <!-- 时间范围 -->\r\n          <div class=\"form-group\">\r\n            <label>开始时间</label>\r\n            <el-date-picker\r\n              v-model=\"analysisParams.startTime\"\r\n              type=\"datetime\"\r\n              placeholder=\"选择开始时间\"\r\n              format=\"YYYY-MM-DD HH:mm:ss\"\r\n              value-format=\"YYYY-MM-DDTHH:mm:ss\"\r\n            />\r\n          </div>\r\n          \r\n          <div class=\"form-group\">\r\n            <label>结束时间</label>\r\n            <el-date-picker\r\n              v-model=\"analysisParams.endTime\"\r\n              type=\"datetime\"\r\n              placeholder=\"选择结束时间\"\r\n              format=\"YYYY-MM-DD HH:mm:ss\"\r\n              value-format=\"YYYY-MM-DDTHH:mm:ss\"\r\n            />\r\n          </div>\r\n\r\n          <!-- 分析类型 -->\r\n          <div class=\"form-group\">\r\n            <label>分析类型</label>\r\n            <el-select v-model=\"analysisType\" placeholder=\"选择分析类型\">\r\n              <el-option label=\"动态热力图\" value=\"heatmap\" />\r\n              <el-option label=\"聚类分析\" value=\"clustering\" />\r\n              <el-option label=\"OD对分析\" value=\"od_analysis\" />\r\n              <el-option label=\"综合分析\" value=\"comprehensive\" />\r\n            </el-select>\r\n          </div>\r\n\r\n          <!-- 时间分辨率 -->\r\n          <div class=\"form-group\">\r\n            <label>时间分辨率(分钟)</label>\r\n            <el-input-number\r\n              v-model=\"heatmapParams.temporal_resolution\"\r\n              :min=\"5\"\r\n              :max=\"120\"\r\n              :step=\"5\"\r\n              controls-position=\"right\"\r\n            />\r\n          </div>\r\n\r\n          <!-- 空间分辨率 -->\r\n          <div class=\"form-group\">\r\n            <label>空间分辨率</label>\r\n            <el-select v-model=\"heatmapParams.spatial_resolution\">\r\n              <el-option label=\"高精度(0.0005°)\" :value=\"0.0005\" />\r\n              <el-option label=\"中精度(0.001°)\" :value=\"0.001\" />\r\n              <el-option label=\"低精度(0.002°)\" :value=\"0.002\" />\r\n            </el-select>\r\n          </div>\r\n\r\n          <!-- 聚类算法选择 -->\r\n          <div class=\"form-group\" v-show=\"analysisType === 'clustering'\">\r\n            <label>聚类算法</label>\r\n            <el-select v-model=\"clusteringParams.algorithm\">\r\n              <el-option \r\n                v-for=\"algo in availableAlgorithms\" \r\n                :key=\"algo\" \r\n                :label=\"algo.toUpperCase()\" \r\n                :value=\"algo\" \r\n              />\r\n            </el-select>\r\n          </div>\r\n\r\n          <!-- 数据类型 -->\r\n          <div class=\"form-group\" v-show=\"analysisType === 'clustering'\">\r\n            <label>数据类型</label>\r\n            <el-select v-model=\"clusteringParams.data_type\">\r\n              <el-option label=\"起点分析\" value=\"pickup\" />\r\n              <el-option label=\"终点分析\" value=\"dropoff\" />\r\n              <el-option label=\"所有点\" value=\"all_points\" />\r\n            </el-select>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"action-buttons\">\r\n          <el-button type=\"primary\" @click=\"startAnalysis\" :loading=\"loading\">\r\n            开始分析\r\n          </el-button>\r\n          <el-button @click=\"resetParams\">重置参数</el-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 结果展示区域 -->\r\n    <div class=\"results-section\" v-if=\"analysisResults\">\r\n      <!-- 统计卡片 -->\r\n      <div class=\"stats-cards\">\r\n        <div class=\"stat-card\">\r\n          <div class=\"stat-value\">{{ analysisResults.totalFrames || 0 }}</div>\r\n          <div class=\"stat-label\">时间帧数</div>\r\n        </div>\r\n        <div class=\"stat-card\">\r\n          <div class=\"stat-value\">{{ analysisResults.totalClusters || 0 }}</div>\r\n          <div class=\"stat-label\">聚类数量</div>\r\n        </div>\r\n        <div class=\"stat-card\">\r\n          <div class=\"stat-value\">{{ analysisResults.totalODPairs || 0 }}</div>\r\n          <div class=\"stat-label\">OD对数</div>\r\n        </div>\r\n        <div class=\"stat-card\">\r\n          <div class=\"stat-value\">{{ formatNumber(analysisResults.avgIntensity) }}</div>\r\n          <div class=\"stat-label\">平均强度</div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 地图和时间轴控制 -->\r\n      <div class=\"map-section\">\r\n        <div class=\"map-container\">\r\n          <div id=\"spatiotemporal-map\" class=\"map-display\"></div>\r\n          \r\n          <!-- 时间轴控制器 -->\r\n          <div class=\"time-control-panel\" v-if=\"analysisType === 'heatmap' && timeFrames.length > 0\">\r\n            <div class=\"time-info\">\r\n              <span class=\"current-time\">{{ currentTimeLabel }}</span>\r\n              <span class=\"time-range\">{{ timeRangeLabel }}</span>\r\n            </div>\r\n            \r\n            <div class=\"time-slider\">\r\n              <el-slider\r\n                v-model=\"currentFrameIndex\"\r\n                :min=\"0\"\r\n                :max=\"timeFrames.length - 1\"\r\n                :step=\"1\"\r\n                @change=\"onTimeFrameChange\"\r\n              />\r\n            </div>\r\n            \r\n            <div class=\"playback-controls\">\r\n              <el-button-group>\r\n                <el-button icon=\"el-icon-d-arrow-left\" @click=\"previousFrame\" :disabled=\"currentFrameIndex === 0\">\r\n                  上一帧\r\n                </el-button>\r\n                <el-button :icon=\"isPlaying ? 'el-icon-video-pause' : 'el-icon-video-play'\" @click=\"togglePlayback\">\r\n                  {{ isPlaying ? '暂停' : '播放' }}\r\n                </el-button>\r\n                <el-button icon=\"el-icon-d-arrow-right\" @click=\"nextFrame\" :disabled=\"currentFrameIndex === timeFrames.length - 1\">\r\n                  下一帧\r\n                </el-button>\r\n              </el-button-group>\r\n              \r\n              <div class=\"playback-speed\">\r\n                <span>播放速度：</span>\r\n                <el-select v-model=\"playbackSpeed\" size=\"mini\">\r\n                  <el-option label=\"0.5x\" :value=\"2000\" />\r\n                  <el-option label=\"1x\" :value=\"1000\" />\r\n                  <el-option label=\"2x\" :value=\"500\" />\r\n                  <el-option label=\"4x\" :value=\"250\" />\r\n                </el-select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 详细结果 -->\r\n      <div class=\"detailed-results\">\r\n        <!-- 聚类结果 -->\r\n        <div v-if=\"analysisType === 'clustering' && clusteringResults\" class=\"clustering-results\">\r\n          <h3>聚类分析结果</h3>\r\n          <div class=\"cluster-list\">\r\n            <div \r\n              v-for=\"cluster in clusteringResults.clusters\" \r\n              :key=\"cluster.cluster_id\"\r\n              class=\"cluster-item\"\r\n              @click=\"locateCluster(cluster)\"\r\n            >\r\n              <div class=\"cluster-header\">\r\n                <span class=\"cluster-id\">聚类 #{{ cluster.cluster_id }}</span>\r\n                <span class=\"cluster-density\">密度: {{ formatNumber(cluster.density) }}</span>\r\n              </div>\r\n              <div class=\"cluster-info\">\r\n                <span>点数: {{ cluster.point_count }}</span>\r\n                <span>中心: ({{ formatCoordinate(cluster.center_lat) }}, {{ formatCoordinate(cluster.center_lng) }})</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- OD分析结果 -->\r\n        <div v-if=\"analysisType === 'od_analysis' && odResults\" class=\"od-results\">\r\n          <h3>OD流量分析</h3>\r\n          <div class=\"top-flows\">\r\n            <h4>热门流量路径 TOP 10</h4>\r\n            <div class=\"flow-list\">\r\n              <div \r\n                v-for=\"(flow, index) in odResults.top_flows?.slice(0, 10)\" \r\n                :key=\"index\"\r\n                class=\"flow-item\"\r\n                @click=\"showFlowOnMap(flow)\"\r\n              >\r\n                <div class=\"flow-rank\">#{{ index + 1 }}</div>\r\n                <div class=\"flow-info\">\r\n                  <div class=\"flow-count\">{{ flow.flow_count }} 次行程</div>\r\n                  <div class=\"flow-details\">\r\n                    <span>平均距离: {{ formatNumber(flow.avg_distance) }}km</span>\r\n                    <span>平均时长: {{ formatDuration(flow.avg_duration) }}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { \r\n  getDynamicHeatmap, \r\n  performClusteringAnalysis, \r\n  performODAnalysis, \r\n  performComprehensiveAnalysis,\r\n  getAvailableAlgorithms \r\n} from '@/api/traffic'\r\n\r\nexport default {\r\n  name: 'SpatioTemporalAnalysis',\r\n  data() {\r\n    return {\r\n      // 分析参数\r\n      analysisType: 'heatmap',\r\n      analysisParams: {\r\n        startTime: '2013-09-13T08:00:00',\r\n        endTime: '2013-09-13T12:00:00'\r\n      },\r\n      \r\n      // 热力图参数\r\n      heatmapParams: {\r\n        temporal_resolution: 15,\r\n        spatial_resolution: 0.001,\r\n        smoothing: true,\r\n        normalization: 'minmax'\r\n      },\r\n      \r\n      // 聚类参数\r\n      clusteringParams: {\r\n        algorithm: 'dbscan',\r\n        data_type: 'pickup',\r\n        params: {}\r\n      },\r\n      \r\n      // OD分析参数\r\n      odParams: {\r\n        min_trip_duration: 60,\r\n        max_trip_duration: 7200,\r\n        min_trip_distance: 0.1,\r\n        aggregate_level: 'individual'\r\n      },\r\n      \r\n      // 状态\r\n      loading: false,\r\n      map: null,\r\n      heatmapLayer: null,\r\n      \r\n      // 结果数据\r\n      analysisResults: null,\r\n      timeFrames: [],\r\n      clusteringResults: null,\r\n      odResults: null,\r\n      \r\n      // 时间轴控制\r\n      currentFrameIndex: 0,\r\n      isPlaying: false,\r\n      playbackSpeed: 1000,\r\n      playbackTimer: null,\r\n      \r\n      // 可用算法\r\n      availableAlgorithms: ['dbscan', 'kmeans', 'hierarchical'],\r\n      \r\n      // 地图模式\r\n      mapMode: 'canvas'\r\n    }\r\n  },\r\n  \r\n  computed: {\r\n    currentTimeLabel() {\r\n      if (this.timeFrames.length > 0 && this.currentFrameIndex < this.timeFrames.length) {\r\n        return this.timeFrames[this.currentFrameIndex].time_label\r\n      }\r\n      return ''\r\n    },\r\n    \r\n    timeRangeLabel() {\r\n      if (this.timeFrames.length > 0) {\r\n        const firstFrame = this.timeFrames[0]\r\n        const lastFrame = this.timeFrames[this.timeFrames.length - 1]\r\n        return `${firstFrame.time_label.split('-')[0]} - ${lastFrame.time_label.split('-')[1]}`\r\n      }\r\n      return ''\r\n    }\r\n  },\r\n  \r\n  async mounted() {\r\n    // 暂时跳过地图加载，直接使用Canvas模式\r\n    this.initCanvasDisplay()\r\n    await this.loadAvailableAlgorithms()\r\n  },\r\n  \r\n  beforeDestroy() {\r\n    if (this.playbackTimer) {\r\n      clearInterval(this.playbackTimer)\r\n    }\r\n    if (this.map && this.map.destroy) {\r\n      this.map.destroy()\r\n    }\r\n  },\r\n  \r\n  methods: {\r\n    async waitForAMapLoad() {\r\n      // 等待AMap加载\r\n      return new Promise((resolve) => {\r\n        if (typeof AMap !== 'undefined') {\r\n          resolve()\r\n        } else {\r\n          const checkAMap = () => {\r\n            if (typeof AMap !== 'undefined') {\r\n              resolve()\r\n            } else {\r\n              setTimeout(checkAMap, 100)\r\n            }\r\n          }\r\n          checkAMap()\r\n        }\r\n      })\r\n    },\r\n    \r\n    initMap() {\r\n      try {\r\n        // 检查AMap是否已加载\r\n        if (typeof AMap === 'undefined') {\r\n          console.warn('高德地图API未加载，使用Canvas显示模式')\r\n          this.initCanvasDisplay()\r\n          return\r\n        }\r\n        \r\n        // 初始化高德地图\r\n        this.map = new AMap.Map('spatiotemporal-map', {\r\n          zoom: 12,\r\n          center: [118.8, 32.05],\r\n          mapStyle: 'amap://styles/grey'\r\n        })\r\n        \r\n        // 添加工具条\r\n        this.map.addControl(new AMap.ToolBar({\r\n          position: 'RB'\r\n        }))\r\n        \r\n        this.mapMode = 'amap'\r\n        console.log('地图初始化成功')\r\n      } catch (error) {\r\n        console.error('地图初始化失败:', error)\r\n        this.$message.warning('地图服务不可用，使用简化显示模式')\r\n        this.initCanvasDisplay()\r\n      }\r\n    },\r\n    \r\n    initCanvasDisplay() {\r\n      // 当地图API不可用时，使用Canvas作为降级方案\r\n      const mapContainer = document.getElementById('spatiotemporal-map')\r\n      if (mapContainer) {\r\n        mapContainer.innerHTML = `\r\n          <div style=\"\r\n            height: 100%; \r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            display: flex;\r\n            flex-direction: column;\r\n            justify-content: center;\r\n            align-items: center;\r\n            color: white;\r\n            text-align: center;\r\n            padding: 20px;\r\n          \">\r\n            <div style=\"font-size: 24px; margin-bottom: 10px;\">📊</div>\r\n            <div style=\"font-size: 18px; margin-bottom: 10px;\">时空分析可视化区域</div>\r\n            <div style=\"font-size: 14px; opacity: 0.8;\">数据将以列表和统计图表形式展示</div>\r\n            <div id=\"canvas-content\" style=\"margin-top: 20px; width: 100%; max-width: 600px;\">\r\n              <!-- 分析结果将在这里显示 -->\r\n            </div>\r\n          </div>\r\n        `\r\n        \r\n        this.mapMode = 'canvas'\r\n        console.log('Canvas显示模式初始化完成')\r\n      }\r\n    },\r\n    \r\n    async loadAvailableAlgorithms() {\r\n      try {\r\n        const result = await getAvailableAlgorithms()\r\n        if (result.success) {\r\n          this.availableAlgorithms = result.algorithms\r\n        }\r\n      } catch (error) {\r\n        console.error('加载算法列表失败:', error)\r\n      }\r\n    },\r\n    \r\n    async startAnalysis() {\r\n      this.loading = true\r\n      \r\n      try {\r\n        switch (this.analysisType) {\r\n          case 'heatmap':\r\n            await this.performHeatmapAnalysis()\r\n            break\r\n          case 'clustering':\r\n            await this.performClusteringAnalysisAction()\r\n            break\r\n          case 'od_analysis':\r\n            await this.performODAnalysisAction()\r\n            break\r\n          case 'comprehensive':\r\n            await this.performComprehensiveAnalysisAction()\r\n            break\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('分析失败: ' + error.message)\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n    \r\n    async performHeatmapAnalysis() {\r\n      const params = {\r\n        start_time: this.analysisParams.startTime,\r\n        end_time: this.analysisParams.endTime,\r\n        temporal_resolution: this.heatmapParams.temporal_resolution,\r\n        spatial_resolution: this.heatmapParams.spatial_resolution,\r\n        smoothing: this.heatmapParams.smoothing\r\n      }\r\n      \r\n      const result = await getDynamicHeatmap(params)\r\n      \r\n      if (result.success) {\r\n        this.timeFrames = result.frames\r\n        this.analysisResults = {\r\n          totalFrames: result.frames.length,\r\n          avgIntensity: result.time_series_stats?.avg_intensity_per_frame || 0\r\n        }\r\n        \r\n        this.currentFrameIndex = 0\r\n        this.displayCurrentFrame()\r\n        this.$message.success(`成功生成${result.frames.length}个时间帧的动态热力图`)\r\n      } else {\r\n        throw new Error(result.message)\r\n      }\r\n    },\r\n    \r\n    async performClusteringAnalysisAction() {\r\n      const result = await performClusteringAnalysis(\r\n        this.analysisParams.startTime,\r\n        this.analysisParams.endTime,\r\n        this.clusteringParams\r\n      )\r\n      \r\n      if (result.success) {\r\n        this.clusteringResults = result\r\n        this.analysisResults = {\r\n          totalClusters: result.clusters.length\r\n        }\r\n        \r\n        this.displayClusters()\r\n        this.$message.success(`聚类分析完成，发现${result.clusters.length}个聚类`)\r\n      } else {\r\n        throw new Error(result.message)\r\n      }\r\n    },\r\n    \r\n    async performODAnalysisAction() {\r\n      const result = await performODAnalysis(\r\n        this.analysisParams.startTime,\r\n        this.analysisParams.endTime,\r\n        this.odParams\r\n      )\r\n      \r\n      if (result.success) {\r\n        this.odResults = result\r\n        this.analysisResults = {\r\n          totalODPairs: result.od_pairs.length\r\n        }\r\n        \r\n        this.displayODFlows()\r\n        this.$message.success(`OD分析完成，找到${result.od_pairs.length}个OD对`)\r\n      } else {\r\n        throw new Error(result.message)\r\n      }\r\n    },\r\n    \r\n    async performComprehensiveAnalysisAction() {\r\n      const result = await performComprehensiveAnalysis(\r\n        this.analysisParams.startTime,\r\n        this.analysisParams.endTime,\r\n        this.heatmapParams\r\n      )\r\n      \r\n      if (result.success) {\r\n        this.timeFrames = result.data.data // 时间帧数据\r\n        this.analysisResults = {\r\n          totalFrames: result.data.data.length,\r\n          avgIntensity: result.data.statistics?.time_series_stats?.avg_intensity_per_frame || 0\r\n        }\r\n        \r\n        this.currentFrameIndex = 0\r\n        this.displayCurrentFrame()\r\n        this.$message.success('综合时空分析完成')\r\n      } else {\r\n        throw new Error(result.message)\r\n      }\r\n    },\r\n    \r\n    displayCurrentFrame() {\r\n      if (this.timeFrames.length === 0 || this.currentFrameIndex >= this.timeFrames.length) {\r\n        return\r\n      }\r\n      \r\n      const currentFrame = this.timeFrames[this.currentFrameIndex]\r\n      \r\n      if (this.mapMode === 'canvas') {\r\n        // Canvas模式下显示数据\r\n        this.displayFrameInCanvas(currentFrame)\r\n        return\r\n      }\r\n      \r\n      // 清除之前的热力图\r\n      if (this.heatmapLayer) {\r\n        this.map.remove(this.heatmapLayer)\r\n      }\r\n      \r\n      // 创建热力图数据\r\n      const heatmapData = currentFrame.heatmap_points.map(point => ({\r\n        lng: point.lng,\r\n        lat: point.lat,\r\n        count: point.intensity\r\n      }))\r\n      \r\n      // 创建热力图层\r\n      this.heatmapLayer = new AMap.HeatMap(this.map, {\r\n        radius: 20,\r\n        opacity: [0, 0.8],\r\n        gradient: {\r\n          0.4: 'blue',\r\n          0.6: 'cyan',\r\n          0.7: 'lime',\r\n          0.8: 'yellow',\r\n          1.0: 'red'\r\n        }\r\n      })\r\n      \r\n      this.heatmapLayer.setDataSet({\r\n        data: heatmapData,\r\n        max: Math.max(...heatmapData.map(d => d.count))\r\n      })\r\n    },\r\n    \r\n    displayFrameInCanvas(frame) {\r\n      // 在Canvas模式下显示时间帧数据\r\n      const canvasContent = document.getElementById('canvas-content')\r\n      if (!canvasContent) return\r\n      \r\n      const topPoints = frame.heatmap_points\r\n        .sort((a, b) => b.intensity - a.intensity)\r\n        .slice(0, 10)\r\n      \r\n      canvasContent.innerHTML = `\r\n        <div style=\"background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; text-align: left;\">\r\n          <div style=\"margin-bottom: 10px; font-weight: bold;\">时间: ${frame.time_label}</div>\r\n          <div style=\"margin-bottom: 10px;\">总强度: ${frame.total_intensity.toFixed(2)}</div>\r\n          <div style=\"margin-bottom: 10px;\">数据点数: ${frame.point_count}</div>\r\n          <div style=\"margin-bottom: 5px; font-weight: bold;\">热点区域 TOP 10:</div>\r\n          ${topPoints.map((point, index) => `\r\n            <div style=\"margin: 3px 0; font-size: 12px;\">\r\n              ${index + 1}. (${point.lat.toFixed(4)}, ${point.lng.toFixed(4)}) - 强度: ${point.intensity.toFixed(2)}\r\n            </div>\r\n          `).join('')}\r\n        </div>\r\n      `\r\n    },\r\n    \r\n    displayClusters() {\r\n      if (this.mapMode === 'canvas') {\r\n        this.displayClustersInCanvas()\r\n        return\r\n      }\r\n      \r\n      // 清除地图\r\n      this.map.clearMap()\r\n      \r\n      const colors = ['#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#FF00FF', '#00FFFF', '#FFA500', '#800080']\r\n      \r\n      this.clusteringResults.clusters.forEach((cluster, index) => {\r\n        const color = colors[index % colors.length]\r\n        \r\n        // 聚类中心标记\r\n        const centerMarker = new AMap.Marker({\r\n          position: [cluster.center_lng, cluster.center_lat],\r\n          icon: new AMap.Icon({\r\n            size: new AMap.Size(20, 20),\r\n            image: `data:image/svg+xml;base64,${btoa(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\"><circle cx=\"10\" cy=\"10\" r=\"8\" fill=\"${color}\" stroke=\"white\" stroke-width=\"2\"/><text x=\"10\" y=\"14\" text-anchor=\"middle\" fill=\"white\" font-size=\"10\">${cluster.cluster_id}</text></svg>`)}`\r\n          }),\r\n          title: `聚类 ${cluster.cluster_id} (${cluster.point_count} 点)`\r\n        })\r\n        \r\n        this.map.add(centerMarker)\r\n        \r\n        // 聚类点\r\n        cluster.points.forEach(point => {\r\n          const pointMarker = new AMap.CircleMarker({\r\n            center: [point.lng, point.lat],\r\n            radius: 3,\r\n            fillColor: color,\r\n            fillOpacity: 0.6,\r\n            strokeColor: color,\r\n            strokeOpacity: 0.8,\r\n            strokeWeight: 1\r\n          })\r\n          \r\n          this.map.add(pointMarker)\r\n        })\r\n      })\r\n      \r\n      // 调整地图视野\r\n      if (this.clusteringResults.clusters.length > 0) {\r\n        const bounds = new AMap.Bounds()\r\n        this.clusteringResults.clusters.forEach(cluster => {\r\n          bounds.extend([cluster.center_lng, cluster.center_lat])\r\n        })\r\n        this.map.setBounds(bounds)\r\n      }\r\n    },\r\n    \r\n    displayClustersInCanvas() {\r\n      const canvasContent = document.getElementById('canvas-content')\r\n      if (!canvasContent) return\r\n      \r\n      const clusters = this.clusteringResults.clusters\r\n        .sort((a, b) => b.density - a.density)\r\n        .slice(0, 8)\r\n      \r\n      canvasContent.innerHTML = `\r\n        <div style=\"background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; text-align: left;\">\r\n          <div style=\"margin-bottom: 10px; font-weight: bold;\">聚类分析结果</div>\r\n          <div style=\"margin-bottom: 10px;\">总聚类数: ${this.clusteringResults.clusters.length}</div>\r\n          <div style=\"margin-bottom: 5px; font-weight: bold;\">密度最高的聚类:</div>\r\n          ${clusters.map((cluster, index) => `\r\n            <div style=\"margin: 5px 0; padding: 8px; background: rgba(255,255,255,0.1); border-radius: 4px; font-size: 12px;\">\r\n              <div>聚类 #${cluster.cluster_id} - 密度: ${cluster.density.toFixed(4)}</div>\r\n              <div>中心: (${cluster.center_lat.toFixed(4)}, ${cluster.center_lng.toFixed(4)})</div>\r\n              <div>点数: ${cluster.point_count}</div>\r\n            </div>\r\n          `).join('')}\r\n        </div>\r\n      `\r\n    },\r\n    \r\n    displayODFlows() {\r\n      // 清除地图\r\n      this.map.clearMap()\r\n      \r\n      // 显示前20个流量最高的OD对\r\n      const topFlows = this.odResults.top_flows?.slice(0, 20) || []\r\n      \r\n      topFlows.forEach((flow, index) => {\r\n        const color = this.getFlowColor(flow.flow_count, topFlows[0].flow_count)\r\n        \r\n        // 起点标记\r\n        const originMarker = new AMap.Marker({\r\n          position: [flow.origin_lng, flow.origin_lat],\r\n          icon: new AMap.Icon({\r\n            size: new AMap.Size(12, 12),\r\n            image: `data:image/svg+xml;base64,${btoa(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 12 12\"><circle cx=\"6\" cy=\"6\" r=\"5\" fill=\"green\" stroke=\"white\" stroke-width=\"1\"/></svg>`)}`\r\n          })\r\n        })\r\n        \r\n        // 终点标记\r\n        const destMarker = new AMap.Marker({\r\n          position: [flow.destination_lng, flow.destination_lat],\r\n          icon: new AMap.Icon({\r\n            size: new AMap.Size(12, 12),\r\n            image: `data:image/svg+xml;base64,${btoa(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 12 12\"><circle cx=\"6\" cy=\"6\" r=\"5\" fill=\"red\" stroke=\"white\" stroke-width=\"1\"/></svg>`)}`\r\n          })\r\n        })\r\n        \r\n        // 流量线\r\n        const flowLine = new AMap.Polyline({\r\n          path: [\r\n            [flow.origin_lng, flow.origin_lat],\r\n            [flow.destination_lng, flow.destination_lat]\r\n          ],\r\n          strokeColor: color,\r\n          strokeWeight: Math.max(1, Math.min(8, flow.flow_count / topFlows[0].flow_count * 8)),\r\n          strokeOpacity: 0.7\r\n        })\r\n        \r\n        this.map.add([originMarker, destMarker, flowLine])\r\n      })\r\n    },\r\n    \r\n    getFlowColor(count, maxCount) {\r\n      const ratio = count / maxCount\r\n      if (ratio > 0.8) return '#FF0000'  // 红色\r\n      if (ratio > 0.6) return '#FF8000'  // 橙色\r\n      if (ratio > 0.4) return '#FFFF00'  // 黄色\r\n      if (ratio > 0.2) return '#80FF00'  // 绿黄色\r\n      return '#00FF00'  // 绿色\r\n    },\r\n    \r\n    // 时间轴控制方法\r\n    onTimeFrameChange(index) {\r\n      this.currentFrameIndex = index\r\n      this.displayCurrentFrame()\r\n    },\r\n    \r\n    previousFrame() {\r\n      if (this.currentFrameIndex > 0) {\r\n        this.currentFrameIndex--\r\n        this.displayCurrentFrame()\r\n      }\r\n    },\r\n    \r\n    nextFrame() {\r\n      if (this.currentFrameIndex < this.timeFrames.length - 1) {\r\n        this.currentFrameIndex++\r\n        this.displayCurrentFrame()\r\n      }\r\n    },\r\n    \r\n    togglePlayback() {\r\n      if (this.isPlaying) {\r\n        this.stopPlayback()\r\n      } else {\r\n        this.startPlayback()\r\n      }\r\n    },\r\n    \r\n    startPlayback() {\r\n      this.isPlaying = true\r\n      this.playbackTimer = setInterval(() => {\r\n        if (this.currentFrameIndex < this.timeFrames.length - 1) {\r\n          this.currentFrameIndex++\r\n          this.displayCurrentFrame()\r\n        } else {\r\n          this.stopPlayback()\r\n        }\r\n      }, this.playbackSpeed)\r\n    },\r\n    \r\n    stopPlayback() {\r\n      this.isPlaying = false\r\n      if (this.playbackTimer) {\r\n        clearInterval(this.playbackTimer)\r\n        this.playbackTimer = null\r\n      }\r\n    },\r\n    \r\n    // 交互方法\r\n    locateCluster(cluster) {\r\n      this.map.setCenter([cluster.center_lng, cluster.center_lat])\r\n      this.map.setZoom(15)\r\n    },\r\n    \r\n    showFlowOnMap(flow) {\r\n      const bounds = new AMap.Bounds()\r\n      bounds.extend([flow.origin_lng, flow.origin_lat])\r\n      bounds.extend([flow.destination_lng, flow.destination_lat])\r\n      this.map.setBounds(bounds)\r\n    },\r\n    \r\n    // 工具方法\r\n    formatNumber(num) {\r\n      if (typeof num !== 'number') return '0'\r\n      return num.toFixed(2)\r\n    },\r\n    \r\n    formatCoordinate(coord) {\r\n      return coord.toFixed(4)\r\n    },\r\n    \r\n    formatDuration(seconds) {\r\n      const hours = Math.floor(seconds / 3600)\r\n      const minutes = Math.floor((seconds % 3600) / 60)\r\n      if (hours > 0) {\r\n        return `${hours}小时${minutes}分钟`\r\n      }\r\n      return `${minutes}分钟`\r\n    },\r\n    \r\n    resetParams() {\r\n      this.analysisParams = {\r\n        startTime: '2013-09-13T08:00:00',\r\n        endTime: '2013-09-13T12:00:00'\r\n      }\r\n      this.heatmapParams = {\r\n        temporal_resolution: 15,\r\n        spatial_resolution: 0.001,\r\n        smoothing: true,\r\n        normalization: 'minmax'\r\n      }\r\n      this.clusteringParams = {\r\n        algorithm: 'dbscan',\r\n        data_type: 'pickup',\r\n        params: {}\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.spatiotemporal-analysis {\r\n  padding: 20px;\r\n  background: #f5f5f5;\r\n  min-height: 100vh;\r\n}\r\n\r\n.page-header {\r\n  text-align: center;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.page-title {\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n  color: #333;\r\n  margin: 0 0 10px 0;\r\n}\r\n\r\n.page-desc {\r\n  color: #666;\r\n  font-size: 16px;\r\n  margin: 0;\r\n}\r\n\r\n.control-panel {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.panel-section h3 {\r\n  margin: 0 0 15px 0;\r\n  color: #333;\r\n  font-size: 18px;\r\n}\r\n\r\n.form-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n  gap: 15px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.form-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.form-group label {\r\n  margin-bottom: 5px;\r\n  font-weight: bold;\r\n  color: #555;\r\n}\r\n\r\n.action-buttons {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.stats-cards {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\r\n  gap: 15px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.stat-card {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  text-align: center;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n}\r\n\r\n.stat-value {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  color: #2196F3;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.stat-label {\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n.map-section {\r\n  background: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  overflow: hidden;\r\n}\r\n\r\n.map-container {\r\n  position: relative;\r\n}\r\n\r\n.map-display {\r\n  height: 500px;\r\n  width: 100%;\r\n}\r\n\r\n.time-control-panel {\r\n  padding: 15px;\r\n  background: #f8f9fa;\r\n  border-top: 1px solid #eee;\r\n}\r\n\r\n.time-info {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.current-time {\r\n  font-weight: bold;\r\n  color: #2196F3;\r\n}\r\n\r\n.time-range {\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n.time-slider {\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.playback-controls {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.playback-speed {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  font-size: 14px;\r\n}\r\n\r\n.detailed-results {\r\n  margin-top: 20px;\r\n}\r\n\r\n.clustering-results, .od-results {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.cluster-list, .flow-list {\r\n  max-height: 400px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.cluster-item, .flow-item {\r\n  padding: 12px;\r\n  border: 1px solid #eee;\r\n  border-radius: 6px;\r\n  margin-bottom: 8px;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n}\r\n\r\n.cluster-item:hover, .flow-item:hover {\r\n  background: #f0f8ff;\r\n  border-color: #2196F3;\r\n}\r\n\r\n.cluster-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.cluster-id {\r\n  font-weight: bold;\r\n  color: #2196F3;\r\n}\r\n\r\n.cluster-density {\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n.cluster-info {\r\n  display: flex;\r\n  gap: 15px;\r\n  font-size: 14px;\r\n  color: #666;\r\n}\r\n\r\n.flow-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.flow-rank {\r\n  background: #2196F3;\r\n  color: white;\r\n  width: 30px;\r\n  height: 30px;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-weight: bold;\r\n  font-size: 14px;\r\n}\r\n\r\n.flow-info {\r\n  flex: 1;\r\n}\r\n\r\n.flow-count {\r\n  font-weight: bold;\r\n  color: #333;\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.flow-details {\r\n  display: flex;\r\n  gap: 15px;\r\n  font-size: 14px;\r\n  color: #666;\r\n}\r\n\r\n.top-flows h4 {\r\n  margin: 0 0 15px 0;\r\n  color: #333;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}