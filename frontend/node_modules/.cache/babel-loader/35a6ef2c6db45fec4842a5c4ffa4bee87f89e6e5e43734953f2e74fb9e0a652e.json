{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, computed, onMounted } from 'vue';\nimport TrafficQueryPanel from './TrafficQueryPanel.vue';\nimport TrafficMapPanel from './TrafficMapPanel.vue';\nimport TrafficStatsPanel from './TrafficStatsPanel.vue';\nimport { getTrafficVisualization } from '@/api/traffic';\nimport axios from 'axios';\nconst minDate = \"2013-09-12T00:00\";\nconst maxDate = \"2013-09-18T23:59\";\nexport default {\n  __name: 'TrafficOverview',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const loading = ref(false);\n    const trafficData = ref([]);\n    const currentMapView = ref('distribution');\n    const queryParams = ref({\n      startTime: '2013-09-13T08:00',\n      endTime: '2013-09-13T12:00',\n      vehicleId: '',\n      viewType: 'distribution',\n      mapStyle: 'blue'\n    });\n    const mapViews = [{\n      key: 'distribution',\n      name: '分布视图'\n    }, {\n      key: 'trajectory',\n      name: '轨迹视图'\n    }, {\n      key: 'heatmap',\n      name: '热力图'\n    }];\n    const timeSpan = computed(() => {\n      if (!queryParams.value.startTime || !queryParams.value.endTime) return '-';\n      const start = new Date(queryParams.value.startTime);\n      const end = new Date(queryParams.value.endTime);\n      const hours = Math.round((end - start) / (1000 * 60 * 60));\n      return `${hours} 小时`;\n    });\n    const coverageArea = computed(() => {\n      return trafficData.value.length > 0 ? '济南市区' : '-';\n    });\n    const activeVehicles = computed(() => {\n      const uniqueVehicles = new Set(trafficData.value.map(item => item.vehicleId));\n      return uniqueVehicles.size;\n    });\n    const averageSpeed = computed(() => {\n      if (trafficData.value.length === 0) return 0;\n      const totalSpeed = trafficData.value.reduce((sum, item) => sum + (item.speed || 0), 0);\n      return Math.round(totalSpeed / trafficData.value.length);\n    });\n    const totalDistance = computed(() => {\n      return Math.round(trafficData.value.length * 0.5); // 模拟计算\n    });\n    const lastUpdate = computed(() => {\n      return new Date().toLocaleTimeString();\n    });\n\n    // 错误提示状态\n    const errorMessage = ref('');\n    const showError = ref(false);\n\n    // 地图相关\n    let map = null;\n    const submitQuery = async () => {\n      // 清除之前的错误\n      errorMessage.value = '';\n      showError.value = false;\n\n      // 检查必填字段\n      if (!queryParams.value.startTime || !queryParams.value.endTime) {\n        errorMessage.value = '请选择查询时间范围';\n        showError.value = true;\n        return;\n      }\n\n      // 转换为UTC时间戳\n      const startTimeUTC = convertToUTC(queryParams.value.startTime);\n      const endTimeUTC = convertToUTC(queryParams.value.endTime);\n\n      // 定义数据集的有效时间范围\n      const minValidTime = 1378944000; // 2013-09-12 00:00:00 UTC\n      const maxValidTime = 1379548799; // 2013-09-18 23:59:59 UTC\n\n      // 验证时间范围\n      if (startTimeUTC < minValidTime || startTimeUTC > maxValidTime || endTimeUTC < minValidTime || endTimeUTC > maxValidTime) {\n        // 时间超出范围，显示错误\n        errorMessage.value = '查询时间超出数据集范围（2013年9月12日至9月18日）';\n        showError.value = true;\n        return; // 阻止查询继续\n      }\n\n      // 时间范围有效，继续查询\n      loading.value = true;\n      try {\n        // 使用更新后的API函数\n        const response = await getTrafficVisualization(startTimeUTC, endTimeUTC, queryParams.value.viewType, queryParams.value.vehicleId || null, queryParams.value.mapStyle);\n        if (response.data.success) {\n          trafficData.value = response.data.data;\n        } else {\n          errorMessage.value = response.data.message || '查询失败';\n          showError.value = true;\n        }\n      } catch (error) {\n        errorMessage.value = `查询失败: ${error.message}`;\n        showError.value = true;\n        console.error('API请求错误:', error);\n      } finally {\n        loading.value = false;\n      }\n    };\n    const resetQuery = () => {\n      queryParams.value.startTime = \"2013-09-13T08:00\";\n      queryParams.value.endTime = \"2013-09-13T12:00\";\n      queryParams.value.vehicleId = \"\";\n      queryParams.value.viewType = 'distribution';\n      queryParams.value.mapStyle = 'blue';\n      errorMessage.value = '';\n      showError.value = false;\n      trafficData.value = [];\n    };\n\n    // 初始化地图\n    function initMap() {\n      if (window.AMap) {\n        map = new window.AMap.Map('traffic-map', {\n          zoom: 13,\n          center: [117.000923, 36.675807],\n          // 济南市中心坐标\n          mapStyle: 'amap://styles/blue'\n        });\n      } else {\n        console.error('AMap is not loaded');\n      }\n    }\n\n    // 更新地图\n    function updateMap() {\n      if (!map || !trafficData.value) return;\n\n      // 清除之前的标记\n      map.clearMap();\n\n      // 根据视图类型更新地图\n      if (queryParams.value.viewType === 'distribution') {\n        renderDistributionView();\n      } else if (queryParams.value.viewType === 'trajectory') {\n        renderTrajectoryView();\n      } else if (queryParams.value.viewType === 'heatmap') {\n        renderHeatmapView();\n      }\n    }\n\n    // 渲染分布视图\n    function renderDistributionView() {\n      if (!map || !trafficData.value) return;\n      const markers = [];\n      trafficData.value.forEach(point => {\n        const marker = new window.AMap.Marker({\n          position: [point.lng, point.lat],\n          title: `车辆ID: ${point.vehicle_id}`\n        });\n        markers.push(marker);\n      });\n      map.add(markers);\n\n      // 调整视图以包含所有标记\n      if (markers.length > 0) {\n        map.setFitView(markers);\n      }\n    }\n\n    // 渲染轨迹视图\n    function renderTrajectoryView() {\n      if (!map || !trafficData.value) return;\n      trafficData.value.forEach(track => {\n        if (!track.points || track.points.length < 2) return;\n        const path = track.points.map(point => [point.lng, point.lat]);\n        const polyline = new window.AMap.Polyline({\n          path: path,\n          strokeColor: '#3366FF',\n          strokeWeight: 5,\n          strokeOpacity: 0.8\n        });\n        map.add(polyline);\n\n        // 添加起点和终点标记\n        const startMarker = new window.AMap.Marker({\n          position: path[0],\n          title: '起点',\n          icon: 'https://webapi.amap.com/theme/v1.3/markers/n/start.png'\n        });\n        const endMarker = new window.AMap.Marker({\n          position: path[path.length - 1],\n          title: '终点',\n          icon: 'https://webapi.amap.com/theme/v1.3/markers/n/end.png'\n        });\n        map.add([startMarker, endMarker]);\n      });\n\n      // 调整视图\n      map.setFitView();\n    }\n\n    // 渲染热力图\n    function renderHeatmapView() {\n      if (!map || !trafficData.value || !window.AMap.HeatMap) return;\n      const heatmap = new window.AMap.HeatMap(map, {\n        radius: 25,\n        opacity: [0, 0.8]\n      });\n      const points = trafficData.value.map(point => {\n        return {\n          lng: point.lng,\n          lat: point.lat,\n          count: point.count || 1\n        };\n      });\n      heatmap.setDataSet({\n        data: points,\n        max: 100\n      });\n    }\n\n    // 地图控制\n    function zoomIn() {\n      if (map) map.zoomIn();\n    }\n    function zoomOut() {\n      if (map) map.zoomOut();\n    }\n    function resetMap() {\n      if (map) {\n        map.setZoom(13);\n        map.setCenter([117.000923, 36.675807]);\n      }\n    }\n\n    // 前端时间转换函数\n    function convertToUTC(dateString) {\n      if (!dateString) return 0;\n      try {\n        const date = new Date(dateString);\n        return Math.floor(date.getTime() / 1000); // 转换为秒级时间戳\n      } catch (error) {\n        console.error('时间转换错误:', error);\n        return 0;\n      }\n    }\n\n    // 设置日期选择器的最小和最大值\n    onMounted(() => {\n      // 设置默认值为数据集范围内的时间（优化后的4小时范围）\n      queryParams.value.startTime = \"2013-09-13T08:00\";\n      queryParams.value.endTime = \"2013-09-13T12:00\";\n\n      // 初始化地图\n      initMap();\n\n      // 加载高德地图API\n      if (!window.AMap) {\n        const script = document.createElement('script');\n        script.src = 'https://webapi.amap.com/maps?v=2.0&key=ac9b745946df9aee02cf0515319407df&plugin=AMap.HeatMap';\n        script.async = true;\n        script.onload = () => {\n          initMap();\n        };\n        document.head.appendChild(script);\n      }\n    });\n    const __returned__ = {\n      loading,\n      trafficData,\n      currentMapView,\n      queryParams,\n      mapViews,\n      timeSpan,\n      coverageArea,\n      activeVehicles,\n      averageSpeed,\n      totalDistance,\n      lastUpdate,\n      errorMessage,\n      showError,\n      get map() {\n        return map;\n      },\n      set map(v) {\n        map = v;\n      },\n      submitQuery,\n      resetQuery,\n      initMap,\n      updateMap,\n      renderDistributionView,\n      renderTrajectoryView,\n      renderHeatmapView,\n      zoomIn,\n      zoomOut,\n      resetMap,\n      convertToUTC,\n      minDate,\n      maxDate,\n      ref,\n      computed,\n      onMounted,\n      TrafficQueryPanel,\n      TrafficMapPanel,\n      TrafficStatsPanel,\n      get getTrafficVisualization() {\n        return getTrafficVisualization;\n      },\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","TrafficQueryPanel","TrafficMapPanel","TrafficStatsPanel","getTrafficVisualization","axios","minDate","maxDate","loading","trafficData","currentMapView","queryParams","startTime","endTime","vehicleId","viewType","mapStyle","mapViews","key","name","timeSpan","value","start","Date","end","hours","Math","round","coverageArea","length","activeVehicles","uniqueVehicles","Set","map","item","size","averageSpeed","totalSpeed","reduce","sum","speed","totalDistance","lastUpdate","toLocaleTimeString","errorMessage","showError","submitQuery","startTimeUTC","convertToUTC","endTimeUTC","minValidTime","maxValidTime","response","data","success","message","error","console","resetQuery","initMap","window","AMap","Map","zoom","center","updateMap","clearMap","renderDistributionView","renderTrajectoryView","renderHeatmapView","markers","forEach","point","marker","Marker","position","lng","lat","title","vehicle_id","push","add","setFitView","track","points","path","polyline","Polyline","strokeColor","strokeWeight","strokeOpacity","startMarker","icon","endMarker","HeatMap","heatmap","radius","opacity","count","setDataSet","max","zoomIn","zoomOut","resetMap","setZoom","setCenter","dateString","date","floor","getTime","script","document","createElement","src","async","onload","head","appendChild"],"sources":["E:/hhh/frontend/src/modules/trafficVisualization/TrafficOverview.vue"],"sourcesContent":["<template>\r\n  <div class=\"space-y-6 tech-bg\">\r\n    <div class=\"container mx-auto px-4\">\r\n      <!-- 查询控制面板 -->\r\n      <TrafficQueryPanel\r\n        v-model=\"queryParams\"\r\n        :loading=\"loading\"\r\n        @query=\"submitQuery\"\r\n        @clear=\"resetQuery\"\r\n      />\r\n      \r\n      <!-- 错误提示 -->\r\n      <div v-if=\"showError\" class=\"alert alert-danger mt-3\">\r\n        {{ errorMessage }}\r\n      </div>\r\n      \r\n      <!-- 地图显示区域 -->\r\n      <TrafficMapPanel\r\n        :data=\"trafficData\"\r\n        :view-type=\"queryParams.viewType\"\r\n        :map-style=\"queryParams.mapStyle\"\r\n        :loading=\"loading\"\r\n        :vehicle-id=\"queryParams.vehicleId\"\r\n      />\r\n      \r\n      <!-- 数据统计面板 -->\r\n      <TrafficStatsPanel\r\n        v-if=\"trafficData.length > 0\"\r\n        :totalCount=\"trafficData.length\"\r\n        :timeSpan=\"timeSpan\"\r\n        :coverageArea=\"coverageArea\"\r\n        :activeVehicles=\"activeVehicles\"\r\n        :averageSpeed=\"averageSpeed\"\r\n        :totalDistance=\"totalDistance\"\r\n        :lastUpdate=\"lastUpdate\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted } from 'vue'\r\nimport TrafficQueryPanel from './TrafficQueryPanel.vue'\r\nimport TrafficMapPanel from './TrafficMapPanel.vue'\r\nimport TrafficStatsPanel from './TrafficStatsPanel.vue'\r\nimport { getTrafficVisualization } from '@/api/traffic'\r\nimport axios from 'axios'\r\n\r\nconst loading = ref(false)\r\nconst trafficData = ref([])\r\nconst currentMapView = ref('distribution')\r\nconst queryParams = ref({\r\n  startTime: '2013-09-13T08:00',\r\n  endTime: '2013-09-13T12:00',\r\n  vehicleId: '',\r\n  viewType: 'distribution',\r\n  mapStyle: 'blue'\r\n})\r\nconst mapViews = [\r\n  { key: 'distribution', name: '分布视图' },\r\n  { key: 'trajectory', name: '轨迹视图' },\r\n  { key: 'heatmap', name: '热力图' }\r\n]\r\nconst timeSpan = computed(() => {\r\n  if (!queryParams.value.startTime || !queryParams.value.endTime) return '-'\r\n  const start = new Date(queryParams.value.startTime)\r\n  const end = new Date(queryParams.value.endTime)\r\n  const hours = Math.round((end - start) / (1000 * 60 * 60))\r\n  return `${hours} 小时`\r\n})\r\nconst coverageArea = computed(() => {\r\n  return trafficData.value.length > 0 ? '济南市区' : '-'\r\n})\r\nconst activeVehicles = computed(() => {\r\n  const uniqueVehicles = new Set(trafficData.value.map(item => item.vehicleId))\r\n  return uniqueVehicles.size\r\n})\r\nconst averageSpeed = computed(() => {\r\n  if (trafficData.value.length === 0) return 0\r\n  const totalSpeed = trafficData.value.reduce((sum, item) => sum + (item.speed || 0), 0)\r\n  return Math.round(totalSpeed / trafficData.value.length)\r\n})\r\nconst totalDistance = computed(() => {\r\n  return Math.round(trafficData.value.length * 0.5) // 模拟计算\r\n})\r\nconst lastUpdate = computed(() => {\r\n  return new Date().toLocaleTimeString()\r\n})\r\n\r\n// 错误提示状态\r\nconst errorMessage = ref('')\r\nconst showError = ref(false)\r\n\r\n// 地图相关\r\nlet map = null\r\n\r\nconst submitQuery = async () => {\r\n  // 清除之前的错误\r\n  errorMessage.value = ''\r\n  showError.value = false\r\n  \r\n  // 检查必填字段\r\n  if (!queryParams.value.startTime || !queryParams.value.endTime) {\r\n    errorMessage.value = '请选择查询时间范围'\r\n    showError.value = true\r\n    return\r\n  }\r\n  \r\n  // 转换为UTC时间戳\r\n  const startTimeUTC = convertToUTC(queryParams.value.startTime)\r\n  const endTimeUTC = convertToUTC(queryParams.value.endTime)\r\n  \r\n  // 定义数据集的有效时间范围\r\n  const minValidTime = 1378944000  // 2013-09-12 00:00:00 UTC\r\n  const maxValidTime = 1379548799  // 2013-09-18 23:59:59 UTC\r\n  \r\n  // 验证时间范围\r\n  if (startTimeUTC < minValidTime || startTimeUTC > maxValidTime || \r\n      endTimeUTC < minValidTime || endTimeUTC > maxValidTime) {\r\n    // 时间超出范围，显示错误\r\n    errorMessage.value = '查询时间超出数据集范围（2013年9月12日至9月18日）'\r\n    showError.value = true\r\n    return // 阻止查询继续\r\n  }\r\n  \r\n  // 时间范围有效，继续查询\r\n  loading.value = true\r\n  try {\r\n    // 使用更新后的API函数\r\n    const response = await getTrafficVisualization(\r\n      startTimeUTC,\r\n      endTimeUTC,\r\n      queryParams.value.viewType,\r\n      queryParams.value.vehicleId || null,\r\n      queryParams.value.mapStyle\r\n    )\r\n    \r\n    if (response.data.success) {\r\n      trafficData.value = response.data.data\r\n    } else {\r\n      errorMessage.value = response.data.message || '查询失败'\r\n      showError.value = true\r\n    }\r\n  } catch (error) {\r\n    errorMessage.value = `查询失败: ${error.message}`\r\n    showError.value = true\r\n    console.error('API请求错误:', error)\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\nconst resetQuery = () => {\r\n  queryParams.value.startTime = \"2013-09-13T08:00\"\r\n  queryParams.value.endTime = \"2013-09-13T12:00\"\r\n  queryParams.value.vehicleId = \"\"\r\n  queryParams.value.viewType = 'distribution'\r\n  queryParams.value.mapStyle = 'blue'\r\n  \r\n  errorMessage.value = ''\r\n  showError.value = false\r\n  trafficData.value = []\r\n}\r\n\r\n// 初始化地图\r\nfunction initMap() {\r\n  if (window.AMap) {\r\n    map = new window.AMap.Map('traffic-map', {\r\n      zoom: 13,\r\n      center: [117.000923, 36.675807], // 济南市中心坐标\r\n      mapStyle: 'amap://styles/blue'\r\n    })\r\n  } else {\r\n    console.error('AMap is not loaded')\r\n  }\r\n}\r\n\r\n// 更新地图\r\nfunction updateMap() {\r\n  if (!map || !trafficData.value) return\r\n  \r\n  // 清除之前的标记\r\n  map.clearMap()\r\n  \r\n  // 根据视图类型更新地图\r\n  if (queryParams.value.viewType === 'distribution') {\r\n    renderDistributionView()\r\n  } else if (queryParams.value.viewType === 'trajectory') {\r\n    renderTrajectoryView()\r\n  } else if (queryParams.value.viewType === 'heatmap') {\r\n    renderHeatmapView()\r\n  }\r\n}\r\n\r\n// 渲染分布视图\r\nfunction renderDistributionView() {\r\n  if (!map || !trafficData.value) return\r\n  \r\n  const markers = []\r\n  \r\n  trafficData.value.forEach(point => {\r\n    const marker = new window.AMap.Marker({\r\n      position: [point.lng, point.lat],\r\n      title: `车辆ID: ${point.vehicle_id}`\r\n    })\r\n    markers.push(marker)\r\n  })\r\n  \r\n  map.add(markers)\r\n  \r\n  // 调整视图以包含所有标记\r\n  if (markers.length > 0) {\r\n    map.setFitView(markers)\r\n  }\r\n}\r\n\r\n// 渲染轨迹视图\r\nfunction renderTrajectoryView() {\r\n  if (!map || !trafficData.value) return\r\n  \r\n  trafficData.value.forEach(track => {\r\n    if (!track.points || track.points.length < 2) return\r\n    \r\n    const path = track.points.map(point => [point.lng, point.lat])\r\n    \r\n    const polyline = new window.AMap.Polyline({\r\n      path: path,\r\n      strokeColor: '#3366FF',\r\n      strokeWeight: 5,\r\n      strokeOpacity: 0.8\r\n    })\r\n    \r\n    map.add(polyline)\r\n    \r\n    // 添加起点和终点标记\r\n    const startMarker = new window.AMap.Marker({\r\n      position: path[0],\r\n      title: '起点',\r\n      icon: 'https://webapi.amap.com/theme/v1.3/markers/n/start.png'\r\n    })\r\n    \r\n    const endMarker = new window.AMap.Marker({\r\n      position: path[path.length - 1],\r\n      title: '终点',\r\n      icon: 'https://webapi.amap.com/theme/v1.3/markers/n/end.png'\r\n    })\r\n    \r\n    map.add([startMarker, endMarker])\r\n  })\r\n  \r\n  // 调整视图\r\n  map.setFitView()\r\n}\r\n\r\n// 渲染热力图\r\nfunction renderHeatmapView() {\r\n  if (!map || !trafficData.value || !window.AMap.HeatMap) return\r\n  \r\n  const heatmap = new window.AMap.HeatMap(map, {\r\n    radius: 25,\r\n    opacity: [0, 0.8]\r\n  })\r\n  \r\n  const points = trafficData.value.map(point => {\r\n    return {\r\n      lng: point.lng,\r\n      lat: point.lat,\r\n      count: point.count || 1\r\n    }\r\n  })\r\n  \r\n  heatmap.setDataSet({\r\n    data: points,\r\n    max: 100\r\n  })\r\n}\r\n\r\n// 地图控制\r\nfunction zoomIn() {\r\n  if (map) map.zoomIn()\r\n}\r\n\r\nfunction zoomOut() {\r\n  if (map) map.zoomOut()\r\n}\r\n\r\nfunction resetMap() {\r\n  if (map) {\r\n    map.setZoom(13)\r\n    map.setCenter([117.000923, 36.675807])\r\n  }\r\n}\r\n\r\n// 前端时间转换函数\r\nfunction convertToUTC(dateString) {\r\n  if (!dateString) return 0\r\n  try {\r\n    const date = new Date(dateString)\r\n    return Math.floor(date.getTime() / 1000) // 转换为秒级时间戳\r\n  } catch (error) {\r\n    console.error('时间转换错误:', error)\r\n    return 0\r\n  }\r\n}\r\n\r\n// 设置日期选择器的最小和最大值\r\nconst minDate = \"2013-09-12T00:00\"\r\nconst maxDate = \"2013-09-18T23:59\"\r\n\r\nonMounted(() => {\r\n  // 设置默认值为数据集范围内的时间（优化后的4小时范围）\r\n  queryParams.value.startTime = \"2013-09-13T08:00\"\r\n  queryParams.value.endTime = \"2013-09-13T12:00\"\r\n  \r\n  // 初始化地图\r\n  initMap()\r\n  \r\n  // 加载高德地图API\r\n  if (!window.AMap) {\r\n    const script = document.createElement('script')\r\n    script.src = 'https://webapi.amap.com/maps?v=2.0&key=ac9b745946df9aee02cf0515319407df&plugin=AMap.HeatMap'\r\n    script.async = true\r\n    script.onload = () => {\r\n      initMap()\r\n    }\r\n    document.head.appendChild(script)\r\n  }\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.tech-bg {\r\n  background: linear-gradient(135deg, #0a2342 0%, #183b6b 100%);\r\n  min-height: 100vh;\r\n  padding: 32px 0;\r\n}\r\n.container {\r\n  max-width: 1280px;\r\n}\r\n.card-tech {\r\n  background: rgba(10, 35, 66, 0.95);\r\n  border: 1.5px solid #183b6b;\r\n  border-radius: 18px;\r\n  box-shadow: 0 4px 32px 0 rgba(0, 207, 255, 0.08);\r\n}\r\n.input-tech {\r\n  background: #122b45;\r\n  color: #fff;\r\n  border: 1px solid #00cfff;\r\n  border-radius: 8px;\r\n  padding: 8px 12px;\r\n  outline: none;\r\n  transition: border 0.2s, box-shadow 0.2s;\r\n}\r\n.input-tech:focus {\r\n  border: 1.5px solid #00cfff;\r\n  box-shadow: 0 0 0 2px #00cfff33;\r\n}\r\n.btn-tech {\r\n  background: linear-gradient(90deg, #00cfff 0%, #1e90ff 100%);\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 8px;\r\n  font-weight: 600;\r\n  padding: 8px 24px;\r\n  box-shadow: 0 2px 8px 0 #00cfff33;\r\n  transition: background 0.2s, box-shadow 0.2s;\r\n}\r\n.btn-tech:hover {\r\n  background: linear-gradient(90deg, #1e90ff 0%, #00cfff 100%);\r\n  box-shadow: 0 4px 16px 0 #00cfff44;\r\n}\r\n.btn-tech-secondary {\r\n  background: #183b6b;\r\n  color: #fff;\r\n  border: 1px solid #00cfff;\r\n  border-radius: 8px;\r\n  font-weight: 600;\r\n  padding: 8px 24px;\r\n  transition: background 0.2s, box-shadow 0.2s;\r\n}\r\n.btn-tech-secondary:hover {\r\n  background: #122b45;\r\n  color: #00cfff;\r\n}\r\n\r\n.alert {\r\n  margin-bottom: 20px;\r\n  padding: 12px 16px;\r\n  border-radius: 4px;\r\n}\r\n\r\n.alert-danger {\r\n  background-color: #f8d7da;\r\n  color: #721c24;\r\n  border: 1px solid #f5c6cb;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}