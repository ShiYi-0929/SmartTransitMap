{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, vShow as _vShow, withDirectives as _withDirectives, createTextVNode as _createTextVNode, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"spatiotemporal-analysis\"\n};\nconst _hoisted_2 = {\n  class: \"control-panel\"\n};\nconst _hoisted_3 = {\n  class: \"panel-section\"\n};\nconst _hoisted_4 = {\n  class: \"form-grid\"\n};\nconst _hoisted_5 = {\n  class: \"form-group\"\n};\nconst _hoisted_6 = {\n  class: \"form-group\"\n};\nconst _hoisted_7 = {\n  class: \"form-group\"\n};\nconst _hoisted_8 = {\n  class: \"form-group\"\n};\nconst _hoisted_9 = {\n  class: \"form-group\"\n};\nconst _hoisted_10 = {\n  class: \"form-group\"\n};\nconst _hoisted_11 = {\n  class: \"form-group\"\n};\nconst _hoisted_12 = {\n  class: \"action-buttons\"\n};\nconst _hoisted_13 = {\n  key: 0,\n  class: \"results-section\"\n};\nconst _hoisted_14 = {\n  class: \"stats-cards\"\n};\nconst _hoisted_15 = {\n  class: \"stat-card\"\n};\nconst _hoisted_16 = {\n  class: \"stat-value\"\n};\nconst _hoisted_17 = {\n  class: \"stat-card\"\n};\nconst _hoisted_18 = {\n  class: \"stat-value\"\n};\nconst _hoisted_19 = {\n  class: \"stat-card\"\n};\nconst _hoisted_20 = {\n  class: \"stat-value\"\n};\nconst _hoisted_21 = {\n  class: \"stat-card\"\n};\nconst _hoisted_22 = {\n  class: \"stat-value\"\n};\nconst _hoisted_23 = {\n  class: \"map-section\"\n};\nconst _hoisted_24 = {\n  class: \"map-container\"\n};\nconst _hoisted_25 = {\n  key: 0,\n  class: \"time-control-panel\"\n};\nconst _hoisted_26 = {\n  class: \"time-info\"\n};\nconst _hoisted_27 = {\n  class: \"current-time\"\n};\nconst _hoisted_28 = {\n  class: \"time-range\"\n};\nconst _hoisted_29 = {\n  class: \"time-slider\"\n};\nconst _hoisted_30 = {\n  class: \"playback-controls\"\n};\nconst _hoisted_31 = {\n  class: \"playback-speed\"\n};\nconst _hoisted_32 = {\n  class: \"detailed-results\"\n};\nconst _hoisted_33 = {\n  key: 0,\n  class: \"clustering-results\"\n};\nconst _hoisted_34 = {\n  class: \"cluster-list\"\n};\nconst _hoisted_35 = [\"onClick\"];\nconst _hoisted_36 = {\n  class: \"cluster-header\"\n};\nconst _hoisted_37 = {\n  class: \"cluster-id\"\n};\nconst _hoisted_38 = {\n  class: \"cluster-density\"\n};\nconst _hoisted_39 = {\n  class: \"cluster-info\"\n};\nconst _hoisted_40 = {\n  key: 1,\n  class: \"od-results\"\n};\nconst _hoisted_41 = {\n  class: \"top-flows\"\n};\nconst _hoisted_42 = {\n  class: \"flow-list\"\n};\nconst _hoisted_43 = [\"onClick\"];\nconst _hoisted_44 = {\n  class: \"flow-rank\"\n};\nconst _hoisted_45 = {\n  class: \"flow-info\"\n};\nconst _hoisted_46 = {\n  class: \"flow-count\"\n};\nconst _hoisted_47 = {\n  class: \"flow-details\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_date_picker = _resolveComponent(\"el-date-picker\");\n  const _component_el_option = _resolveComponent(\"el-option\");\n  const _component_el_select = _resolveComponent(\"el-select\");\n  const _component_el_input_number = _resolveComponent(\"el-input-number\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_slider = _resolveComponent(\"el-slider\");\n  const _component_el_button_group = _resolveComponent(\"el-button-group\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 页面标题 \"), _cache[30] || (_cache[30] = _createElementVNode(\"div\", {\n    class: \"page-header\"\n  }, [_createElementVNode(\"h2\", {\n    class: \"page-title\"\n  }, \"时空动态分析\"), _createElementVNode(\"p\", {\n    class: \"page-desc\"\n  }, \"时间与空间热力图展示，支持聚类算法与OD对分析\")], -1 /* CACHED */)), _createCommentVNode(\" 控制面板 \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_cache[18] || (_cache[18] = _createElementVNode(\"h3\", null, \"分析配置\", -1 /* CACHED */)), _createElementVNode(\"div\", _hoisted_4, [_createCommentVNode(\" 时间范围 \"), _createElementVNode(\"div\", _hoisted_5, [_cache[9] || (_cache[9] = _createElementVNode(\"label\", null, \"开始时间\", -1 /* CACHED */)), _createVNode(_component_el_date_picker, {\n    modelValue: $data.analysisParams.startTime,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.analysisParams.startTime = $event),\n    type: \"datetime\",\n    placeholder: \"选择开始时间\",\n    format: \"YYYY-MM-DD HH:mm:ss\",\n    \"value-format\": \"YYYY-MM-DDTHH:mm:ss\"\n  }, null, 8 /* PROPS */, [\"modelValue\"])]), _createElementVNode(\"div\", _hoisted_6, [_cache[10] || (_cache[10] = _createElementVNode(\"label\", null, \"结束时间\", -1 /* CACHED */)), _createVNode(_component_el_date_picker, {\n    modelValue: $data.analysisParams.endTime,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.analysisParams.endTime = $event),\n    type: \"datetime\",\n    placeholder: \"选择结束时间\",\n    format: \"YYYY-MM-DD HH:mm:ss\",\n    \"value-format\": \"YYYY-MM-DDTHH:mm:ss\"\n  }, null, 8 /* PROPS */, [\"modelValue\"])]), _createCommentVNode(\" 分析类型 \"), _createElementVNode(\"div\", _hoisted_7, [_cache[11] || (_cache[11] = _createElementVNode(\"label\", null, \"分析类型\", -1 /* CACHED */)), _createVNode(_component_el_select, {\n    modelValue: $data.analysisType,\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.analysisType = $event),\n    placeholder: \"选择分析类型\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_option, {\n      label: \"动态热力图\",\n      value: \"heatmap\"\n    }), _createVNode(_component_el_option, {\n      label: \"聚类分析\",\n      value: \"clustering\"\n    }), _createVNode(_component_el_option, {\n      label: \"OD对分析\",\n      value: \"od_analysis\"\n    }), _createVNode(_component_el_option, {\n      label: \"综合分析\",\n      value: \"comprehensive\"\n    })]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"])]), _createCommentVNode(\" 时间分辨率 \"), _createElementVNode(\"div\", _hoisted_8, [_cache[12] || (_cache[12] = _createElementVNode(\"label\", null, \"时间分辨率(分钟)\", -1 /* CACHED */)), _createVNode(_component_el_input_number, {\n    modelValue: $data.heatmapParams.temporal_resolution,\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.heatmapParams.temporal_resolution = $event),\n    min: 5,\n    max: 120,\n    step: 5,\n    \"controls-position\": \"right\"\n  }, null, 8 /* PROPS */, [\"modelValue\"])]), _createCommentVNode(\" 空间分辨率 \"), _createElementVNode(\"div\", _hoisted_9, [_cache[13] || (_cache[13] = _createElementVNode(\"label\", null, \"空间分辨率\", -1 /* CACHED */)), _createVNode(_component_el_select, {\n    modelValue: $data.heatmapParams.spatial_resolution,\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.heatmapParams.spatial_resolution = $event)\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_option, {\n      label: \"高精度(0.0005°)\",\n      value: 0.0005\n    }), _createVNode(_component_el_option, {\n      label: \"中精度(0.001°)\",\n      value: 0.001\n    }), _createVNode(_component_el_option, {\n      label: \"低精度(0.002°)\",\n      value: 0.002\n    })]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"])]), _createCommentVNode(\" 聚类算法选择 \"), _withDirectives(_createElementVNode(\"div\", _hoisted_10, [_cache[14] || (_cache[14] = _createElementVNode(\"label\", null, \"聚类算法\", -1 /* CACHED */)), _createVNode(_component_el_select, {\n    modelValue: $data.clusteringParams.algorithm,\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $data.clusteringParams.algorithm = $event)\n  }, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.availableAlgorithms, algo => {\n      return _openBlock(), _createBlock(_component_el_option, {\n        key: algo,\n        label: algo.toUpperCase(),\n        value: algo\n      }, null, 8 /* PROPS */, [\"label\", \"value\"]);\n    }), 128 /* KEYED_FRAGMENT */))]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"])], 512 /* NEED_PATCH */), [[_vShow, $data.analysisType === 'clustering']]), _createCommentVNode(\" 数据类型 \"), _withDirectives(_createElementVNode(\"div\", _hoisted_11, [_cache[15] || (_cache[15] = _createElementVNode(\"label\", null, \"数据类型\", -1 /* CACHED */)), _createVNode(_component_el_select, {\n    modelValue: $data.clusteringParams.data_type,\n    \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => $data.clusteringParams.data_type = $event)\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_option, {\n      label: \"起点分析\",\n      value: \"pickup\"\n    }), _createVNode(_component_el_option, {\n      label: \"终点分析\",\n      value: \"dropoff\"\n    }), _createVNode(_component_el_option, {\n      label: \"所有点\",\n      value: \"all_points\"\n    })]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"])], 512 /* NEED_PATCH */), [[_vShow, $data.analysisType === 'clustering']])]), _createElementVNode(\"div\", _hoisted_12, [_createVNode(_component_el_button, {\n    type: \"primary\",\n    onClick: $options.startAnalysis,\n    loading: $data.loading\n  }, {\n    default: _withCtx(() => _cache[16] || (_cache[16] = [_createTextVNode(\" 开始分析 \")])),\n    _: 1 /* STABLE */,\n    __: [16]\n  }, 8 /* PROPS */, [\"onClick\", \"loading\"]), _createVNode(_component_el_button, {\n    onClick: $options.resetParams\n  }, {\n    default: _withCtx(() => _cache[17] || (_cache[17] = [_createTextVNode(\"重置参数\")])),\n    _: 1 /* STABLE */,\n    __: [17]\n  }, 8 /* PROPS */, [\"onClick\"])])])]), _createCommentVNode(\" 结果展示区域 \"), $data.analysisResults ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [_createCommentVNode(\" 统计卡片 \"), _createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"div\", _hoisted_15, [_createElementVNode(\"div\", _hoisted_16, _toDisplayString($data.analysisResults.totalFrames || 0), 1 /* TEXT */), _cache[19] || (_cache[19] = _createElementVNode(\"div\", {\n    class: \"stat-label\"\n  }, \"时间帧数\", -1 /* CACHED */))]), _createElementVNode(\"div\", _hoisted_17, [_createElementVNode(\"div\", _hoisted_18, _toDisplayString($data.analysisResults.totalClusters || 0), 1 /* TEXT */), _cache[20] || (_cache[20] = _createElementVNode(\"div\", {\n    class: \"stat-label\"\n  }, \"聚类数量\", -1 /* CACHED */))]), _createElementVNode(\"div\", _hoisted_19, [_createElementVNode(\"div\", _hoisted_20, _toDisplayString($data.analysisResults.totalODPairs || 0), 1 /* TEXT */), _cache[21] || (_cache[21] = _createElementVNode(\"div\", {\n    class: \"stat-label\"\n  }, \"OD对数\", -1 /* CACHED */))]), _createElementVNode(\"div\", _hoisted_21, [_createElementVNode(\"div\", _hoisted_22, _toDisplayString($options.formatNumber($data.analysisResults.avgIntensity)), 1 /* TEXT */), _cache[22] || (_cache[22] = _createElementVNode(\"div\", {\n    class: \"stat-label\"\n  }, \"平均强度\", -1 /* CACHED */))])]), _createCommentVNode(\" 地图和时间轴控制 \"), _createElementVNode(\"div\", _hoisted_23, [_createElementVNode(\"div\", _hoisted_24, [_cache[26] || (_cache[26] = _createElementVNode(\"div\", {\n    id: \"spatiotemporal-map\",\n    class: \"map-display\"\n  }, null, -1 /* CACHED */)), _createCommentVNode(\" 时间轴控制器 \"), $data.analysisType === 'heatmap' && $data.timeFrames.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_25, [_createElementVNode(\"div\", _hoisted_26, [_createElementVNode(\"span\", _hoisted_27, _toDisplayString($options.currentTimeLabel), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_28, _toDisplayString($options.timeRangeLabel), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_29, [_createVNode(_component_el_slider, {\n    modelValue: $data.currentFrameIndex,\n    \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => $data.currentFrameIndex = $event),\n    min: 0,\n    max: $data.timeFrames.length - 1,\n    step: 1,\n    onChange: $options.onTimeFrameChange\n  }, null, 8 /* PROPS */, [\"modelValue\", \"max\", \"onChange\"])]), _createElementVNode(\"div\", _hoisted_30, [_createVNode(_component_el_button_group, null, {\n    default: _withCtx(() => [_createVNode(_component_el_button, {\n      icon: \"el-icon-d-arrow-left\",\n      onClick: $options.previousFrame,\n      disabled: $data.currentFrameIndex === 0\n    }, {\n      default: _withCtx(() => _cache[23] || (_cache[23] = [_createTextVNode(\" 上一帧 \")])),\n      _: 1 /* STABLE */,\n      __: [23]\n    }, 8 /* PROPS */, [\"onClick\", \"disabled\"]), _createVNode(_component_el_button, {\n      icon: $data.isPlaying ? 'el-icon-video-pause' : 'el-icon-video-play',\n      onClick: $options.togglePlayback\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString($data.isPlaying ? '暂停' : '播放'), 1 /* TEXT */)]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"icon\", \"onClick\"]), _createVNode(_component_el_button, {\n      icon: \"el-icon-d-arrow-right\",\n      onClick: $options.nextFrame,\n      disabled: $data.currentFrameIndex === $data.timeFrames.length - 1\n    }, {\n      default: _withCtx(() => _cache[24] || (_cache[24] = [_createTextVNode(\" 下一帧 \")])),\n      _: 1 /* STABLE */,\n      __: [24]\n    }, 8 /* PROPS */, [\"onClick\", \"disabled\"])]),\n    _: 1 /* STABLE */\n  }), _createElementVNode(\"div\", _hoisted_31, [_cache[25] || (_cache[25] = _createElementVNode(\"span\", null, \"播放速度：\", -1 /* CACHED */)), _createVNode(_component_el_select, {\n    modelValue: $data.playbackSpeed,\n    \"onUpdate:modelValue\": _cache[8] || (_cache[8] = $event => $data.playbackSpeed = $event),\n    size: \"mini\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_option, {\n      label: \"0.5x\",\n      value: 2000\n    }), _createVNode(_component_el_option, {\n      label: \"1x\",\n      value: 1000\n    }), _createVNode(_component_el_option, {\n      label: \"2x\",\n      value: 500\n    }), _createVNode(_component_el_option, {\n      label: \"4x\",\n      value: 250\n    })]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"])])])])) : _createCommentVNode(\"v-if\", true)])]), _createCommentVNode(\" 详细结果 \"), _createElementVNode(\"div\", _hoisted_32, [_createCommentVNode(\" 聚类结果 \"), $data.analysisType === 'clustering' && $data.clusteringResults ? (_openBlock(), _createElementBlock(\"div\", _hoisted_33, [_cache[27] || (_cache[27] = _createElementVNode(\"h3\", null, \"聚类分析结果\", -1 /* CACHED */)), _createElementVNode(\"div\", _hoisted_34, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.clusteringResults.clusters, cluster => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: cluster.cluster_id,\n      class: \"cluster-item\",\n      onClick: $event => $options.locateCluster(cluster)\n    }, [_createElementVNode(\"div\", _hoisted_36, [_createElementVNode(\"span\", _hoisted_37, \"聚类 #\" + _toDisplayString(cluster.cluster_id), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_38, \"密度: \" + _toDisplayString($options.formatNumber(cluster.density)), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_39, [_createElementVNode(\"span\", null, \"点数: \" + _toDisplayString(cluster.point_count), 1 /* TEXT */), _createElementVNode(\"span\", null, \"中心: (\" + _toDisplayString($options.formatCoordinate(cluster.center_lat)) + \", \" + _toDisplayString($options.formatCoordinate(cluster.center_lng)) + \")\", 1 /* TEXT */)])], 8 /* PROPS */, _hoisted_35);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" OD分析结果 \"), $data.analysisType === 'od_analysis' && $data.odResults ? (_openBlock(), _createElementBlock(\"div\", _hoisted_40, [_cache[29] || (_cache[29] = _createElementVNode(\"h3\", null, \"OD流量分析\", -1 /* CACHED */)), _createElementVNode(\"div\", _hoisted_41, [_cache[28] || (_cache[28] = _createElementVNode(\"h4\", null, \"热门流量路径 TOP 10\", -1 /* CACHED */)), _createElementVNode(\"div\", _hoisted_42, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.odResults.top_flows?.slice(0, 10), (flow, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"flow-item\",\n      onClick: $event => $options.showFlowOnMap(flow)\n    }, [_createElementVNode(\"div\", _hoisted_44, \"#\" + _toDisplayString(index + 1), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_45, [_createElementVNode(\"div\", _hoisted_46, _toDisplayString(flow.flow_count) + \" 次行程\", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_47, [_createElementVNode(\"span\", null, \"平均距离: \" + _toDisplayString($options.formatNumber(flow.avg_distance)) + \"km\", 1 /* TEXT */), _createElementVNode(\"span\", null, \"平均时长: \" + _toDisplayString($options.formatDuration(flow.avg_duration)), 1 /* TEXT */)])])], 8 /* PROPS */, _hoisted_43);\n  }), 128 /* KEYED_FRAGMENT */))])])])) : _createCommentVNode(\"v-if\", true)])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_createVNode","_component_el_date_picker","$data","analysisParams","startTime","$event","type","placeholder","format","_hoisted_6","endTime","_hoisted_7","_component_el_select","analysisType","_component_el_option","label","value","_hoisted_8","_component_el_input_number","heatmapParams","temporal_resolution","min","max","step","_hoisted_9","spatial_resolution","_hoisted_10","clusteringParams","algorithm","_Fragment","_renderList","availableAlgorithms","algo","_createBlock","key","toUpperCase","_hoisted_11","data_type","_hoisted_12","_component_el_button","onClick","$options","startAnalysis","loading","_cache","resetParams","analysisResults","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_toDisplayString","totalFrames","_hoisted_17","_hoisted_18","totalClusters","_hoisted_19","_hoisted_20","totalODPairs","_hoisted_21","_hoisted_22","formatNumber","avgIntensity","_hoisted_23","_hoisted_24","id","timeFrames","length","_hoisted_25","_hoisted_26","_hoisted_27","currentTimeLabel","_hoisted_28","timeRangeLabel","_hoisted_29","_component_el_slider","currentFrameIndex","onChange","onTimeFrameChange","_hoisted_30","_component_el_button_group","icon","previousFrame","disabled","isPlaying","togglePlayback","nextFrame","_hoisted_31","playbackSpeed","size","_hoisted_32","clusteringResults","_hoisted_33","_hoisted_34","clusters","cluster","cluster_id","locateCluster","_hoisted_36","_hoisted_37","_hoisted_38","density","_hoisted_39","point_count","formatCoordinate","center_lat","center_lng","odResults","_hoisted_40","_hoisted_41","_hoisted_42","top_flows","slice","flow","index","showFlowOnMap","_hoisted_44","_hoisted_45","_hoisted_46","flow_count","_hoisted_47","avg_distance","formatDuration","avg_duration"],"sources":["E:\\hhh\\frontend\\src\\modules\\trafficVisualization\\SpatioTemporalAnalysis.vue"],"sourcesContent":["<template>\r\n  <div class=\"spatiotemporal-analysis\">\r\n    <!-- 页面标题 -->\r\n    <div class=\"page-header\">\r\n      <h2 class=\"page-title\">时空动态分析</h2>\r\n      <p class=\"page-desc\">时间与空间热力图展示，支持聚类算法与OD对分析</p>\r\n    </div>\r\n\r\n    <!-- 控制面板 -->\r\n    <div class=\"control-panel\">\r\n      <div class=\"panel-section\">\r\n        <h3>分析配置</h3>\r\n        <div class=\"form-grid\">\r\n          <!-- 时间范围 -->\r\n          <div class=\"form-group\">\r\n            <label>开始时间</label>\r\n            <el-date-picker\r\n              v-model=\"analysisParams.startTime\"\r\n              type=\"datetime\"\r\n              placeholder=\"选择开始时间\"\r\n              format=\"YYYY-MM-DD HH:mm:ss\"\r\n              value-format=\"YYYY-MM-DDTHH:mm:ss\"\r\n            />\r\n          </div>\r\n          \r\n          <div class=\"form-group\">\r\n            <label>结束时间</label>\r\n            <el-date-picker\r\n              v-model=\"analysisParams.endTime\"\r\n              type=\"datetime\"\r\n              placeholder=\"选择结束时间\"\r\n              format=\"YYYY-MM-DD HH:mm:ss\"\r\n              value-format=\"YYYY-MM-DDTHH:mm:ss\"\r\n            />\r\n          </div>\r\n\r\n          <!-- 分析类型 -->\r\n          <div class=\"form-group\">\r\n            <label>分析类型</label>\r\n            <el-select v-model=\"analysisType\" placeholder=\"选择分析类型\">\r\n              <el-option label=\"动态热力图\" value=\"heatmap\" />\r\n              <el-option label=\"聚类分析\" value=\"clustering\" />\r\n              <el-option label=\"OD对分析\" value=\"od_analysis\" />\r\n              <el-option label=\"综合分析\" value=\"comprehensive\" />\r\n            </el-select>\r\n          </div>\r\n\r\n          <!-- 时间分辨率 -->\r\n          <div class=\"form-group\">\r\n            <label>时间分辨率(分钟)</label>\r\n            <el-input-number\r\n              v-model=\"heatmapParams.temporal_resolution\"\r\n              :min=\"5\"\r\n              :max=\"120\"\r\n              :step=\"5\"\r\n              controls-position=\"right\"\r\n            />\r\n          </div>\r\n\r\n          <!-- 空间分辨率 -->\r\n          <div class=\"form-group\">\r\n            <label>空间分辨率</label>\r\n            <el-select v-model=\"heatmapParams.spatial_resolution\">\r\n              <el-option label=\"高精度(0.0005°)\" :value=\"0.0005\" />\r\n              <el-option label=\"中精度(0.001°)\" :value=\"0.001\" />\r\n              <el-option label=\"低精度(0.002°)\" :value=\"0.002\" />\r\n            </el-select>\r\n          </div>\r\n\r\n          <!-- 聚类算法选择 -->\r\n          <div class=\"form-group\" v-show=\"analysisType === 'clustering'\">\r\n            <label>聚类算法</label>\r\n            <el-select v-model=\"clusteringParams.algorithm\">\r\n              <el-option \r\n                v-for=\"algo in availableAlgorithms\" \r\n                :key=\"algo\" \r\n                :label=\"algo.toUpperCase()\" \r\n                :value=\"algo\" \r\n              />\r\n            </el-select>\r\n          </div>\r\n\r\n          <!-- 数据类型 -->\r\n          <div class=\"form-group\" v-show=\"analysisType === 'clustering'\">\r\n            <label>数据类型</label>\r\n            <el-select v-model=\"clusteringParams.data_type\">\r\n              <el-option label=\"起点分析\" value=\"pickup\" />\r\n              <el-option label=\"终点分析\" value=\"dropoff\" />\r\n              <el-option label=\"所有点\" value=\"all_points\" />\r\n            </el-select>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"action-buttons\">\r\n          <el-button type=\"primary\" @click=\"startAnalysis\" :loading=\"loading\">\r\n            开始分析\r\n          </el-button>\r\n          <el-button @click=\"resetParams\">重置参数</el-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 结果展示区域 -->\r\n    <div class=\"results-section\" v-if=\"analysisResults\">\r\n      <!-- 统计卡片 -->\r\n      <div class=\"stats-cards\">\r\n        <div class=\"stat-card\">\r\n          <div class=\"stat-value\">{{ analysisResults.totalFrames || 0 }}</div>\r\n          <div class=\"stat-label\">时间帧数</div>\r\n        </div>\r\n        <div class=\"stat-card\">\r\n          <div class=\"stat-value\">{{ analysisResults.totalClusters || 0 }}</div>\r\n          <div class=\"stat-label\">聚类数量</div>\r\n        </div>\r\n        <div class=\"stat-card\">\r\n          <div class=\"stat-value\">{{ analysisResults.totalODPairs || 0 }}</div>\r\n          <div class=\"stat-label\">OD对数</div>\r\n        </div>\r\n        <div class=\"stat-card\">\r\n          <div class=\"stat-value\">{{ formatNumber(analysisResults.avgIntensity) }}</div>\r\n          <div class=\"stat-label\">平均强度</div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 地图和时间轴控制 -->\r\n      <div class=\"map-section\">\r\n        <div class=\"map-container\">\r\n          <div id=\"spatiotemporal-map\" class=\"map-display\"></div>\r\n          \r\n          <!-- 时间轴控制器 -->\r\n          <div class=\"time-control-panel\" v-if=\"analysisType === 'heatmap' && timeFrames.length > 0\">\r\n            <div class=\"time-info\">\r\n              <span class=\"current-time\">{{ currentTimeLabel }}</span>\r\n              <span class=\"time-range\">{{ timeRangeLabel }}</span>\r\n            </div>\r\n            \r\n            <div class=\"time-slider\">\r\n              <el-slider\r\n                v-model=\"currentFrameIndex\"\r\n                :min=\"0\"\r\n                :max=\"timeFrames.length - 1\"\r\n                :step=\"1\"\r\n                @change=\"onTimeFrameChange\"\r\n              />\r\n            </div>\r\n            \r\n            <div class=\"playback-controls\">\r\n              <el-button-group>\r\n                <el-button icon=\"el-icon-d-arrow-left\" @click=\"previousFrame\" :disabled=\"currentFrameIndex === 0\">\r\n                  上一帧\r\n                </el-button>\r\n                <el-button :icon=\"isPlaying ? 'el-icon-video-pause' : 'el-icon-video-play'\" @click=\"togglePlayback\">\r\n                  {{ isPlaying ? '暂停' : '播放' }}\r\n                </el-button>\r\n                <el-button icon=\"el-icon-d-arrow-right\" @click=\"nextFrame\" :disabled=\"currentFrameIndex === timeFrames.length - 1\">\r\n                  下一帧\r\n                </el-button>\r\n              </el-button-group>\r\n              \r\n              <div class=\"playback-speed\">\r\n                <span>播放速度：</span>\r\n                <el-select v-model=\"playbackSpeed\" size=\"mini\">\r\n                  <el-option label=\"0.5x\" :value=\"2000\" />\r\n                  <el-option label=\"1x\" :value=\"1000\" />\r\n                  <el-option label=\"2x\" :value=\"500\" />\r\n                  <el-option label=\"4x\" :value=\"250\" />\r\n                </el-select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 详细结果 -->\r\n      <div class=\"detailed-results\">\r\n        <!-- 聚类结果 -->\r\n        <div v-if=\"analysisType === 'clustering' && clusteringResults\" class=\"clustering-results\">\r\n          <h3>聚类分析结果</h3>\r\n          <div class=\"cluster-list\">\r\n            <div \r\n              v-for=\"cluster in clusteringResults.clusters\" \r\n              :key=\"cluster.cluster_id\"\r\n              class=\"cluster-item\"\r\n              @click=\"locateCluster(cluster)\"\r\n            >\r\n              <div class=\"cluster-header\">\r\n                <span class=\"cluster-id\">聚类 #{{ cluster.cluster_id }}</span>\r\n                <span class=\"cluster-density\">密度: {{ formatNumber(cluster.density) }}</span>\r\n              </div>\r\n              <div class=\"cluster-info\">\r\n                <span>点数: {{ cluster.point_count }}</span>\r\n                <span>中心: ({{ formatCoordinate(cluster.center_lat) }}, {{ formatCoordinate(cluster.center_lng) }})</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- OD分析结果 -->\r\n        <div v-if=\"analysisType === 'od_analysis' && odResults\" class=\"od-results\">\r\n          <h3>OD流量分析</h3>\r\n          <div class=\"top-flows\">\r\n            <h4>热门流量路径 TOP 10</h4>\r\n            <div class=\"flow-list\">\r\n              <div \r\n                v-for=\"(flow, index) in odResults.top_flows?.slice(0, 10)\" \r\n                :key=\"index\"\r\n                class=\"flow-item\"\r\n                @click=\"showFlowOnMap(flow)\"\r\n              >\r\n                <div class=\"flow-rank\">#{{ index + 1 }}</div>\r\n                <div class=\"flow-info\">\r\n                  <div class=\"flow-count\">{{ flow.flow_count }} 次行程</div>\r\n                  <div class=\"flow-details\">\r\n                    <span>平均距离: {{ formatNumber(flow.avg_distance) }}km</span>\r\n                    <span>平均时长: {{ formatDuration(flow.avg_duration) }}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { \r\n  getDynamicHeatmap, \r\n  performClusteringAnalysis, \r\n  performODAnalysis, \r\n  performComprehensiveAnalysis,\r\n  getAvailableAlgorithms \r\n} from '@/api/traffic'\r\n\r\nexport default {\r\n  name: 'SpatioTemporalAnalysis',\r\n  data() {\r\n    return {\r\n      // 分析参数\r\n      analysisType: 'heatmap',\r\n      analysisParams: {\r\n        startTime: '2013-09-13T08:00:00',\r\n        endTime: '2013-09-13T12:00:00'\r\n      },\r\n      \r\n      // 热力图参数\r\n      heatmapParams: {\r\n        temporal_resolution: 15,\r\n        spatial_resolution: 0.001,\r\n        smoothing: true,\r\n        normalization: 'minmax'\r\n      },\r\n      \r\n      // 聚类参数\r\n      clusteringParams: {\r\n        algorithm: 'dbscan',\r\n        data_type: 'pickup',\r\n        params: {}\r\n      },\r\n      \r\n      // OD分析参数\r\n      odParams: {\r\n        min_trip_duration: 60,\r\n        max_trip_duration: 7200,\r\n        min_trip_distance: 0.1,\r\n        aggregate_level: 'individual'\r\n      },\r\n      \r\n      // 状态\r\n      loading: false,\r\n      map: null,\r\n      heatmapLayer: null,\r\n      \r\n      // 结果数据\r\n      analysisResults: null,\r\n      timeFrames: [],\r\n      clusteringResults: null,\r\n      odResults: null,\r\n      \r\n      // 时间轴控制\r\n      currentFrameIndex: 0,\r\n      isPlaying: false,\r\n      playbackSpeed: 1000,\r\n      playbackTimer: null,\r\n      \r\n      // 可用算法\r\n      availableAlgorithms: ['dbscan', 'kmeans', 'hierarchical'],\r\n      \r\n      // 地图模式\r\n      mapMode: 'canvas'\r\n    }\r\n  },\r\n  \r\n  computed: {\r\n    currentTimeLabel() {\r\n      if (this.timeFrames.length > 0 && this.currentFrameIndex < this.timeFrames.length) {\r\n        return this.timeFrames[this.currentFrameIndex].time_label\r\n      }\r\n      return ''\r\n    },\r\n    \r\n    timeRangeLabel() {\r\n      if (this.timeFrames.length > 0) {\r\n        const firstFrame = this.timeFrames[0]\r\n        const lastFrame = this.timeFrames[this.timeFrames.length - 1]\r\n        return `${firstFrame.time_label.split('-')[0]} - ${lastFrame.time_label.split('-')[1]}`\r\n      }\r\n      return ''\r\n    }\r\n  },\r\n  \r\n  async mounted() {\r\n    // 暂时跳过地图加载，直接使用Canvas模式\r\n    this.initCanvasDisplay()\r\n    await this.loadAvailableAlgorithms()\r\n  },\r\n  \r\n  beforeDestroy() {\r\n    if (this.playbackTimer) {\r\n      clearInterval(this.playbackTimer)\r\n    }\r\n    if (this.map && this.map.destroy) {\r\n      this.map.destroy()\r\n    }\r\n  },\r\n  \r\n  methods: {\r\n    async waitForAMapLoad() {\r\n      // 等待AMap加载\r\n      return new Promise((resolve) => {\r\n        if (typeof AMap !== 'undefined') {\r\n          resolve()\r\n        } else {\r\n          const checkAMap = () => {\r\n            if (typeof AMap !== 'undefined') {\r\n              resolve()\r\n            } else {\r\n              setTimeout(checkAMap, 100)\r\n            }\r\n          }\r\n          checkAMap()\r\n        }\r\n      })\r\n    },\r\n    \r\n    initMap() {\r\n      try {\r\n        // 检查AMap是否已加载\r\n        if (typeof AMap === 'undefined') {\r\n          console.warn('高德地图API未加载，使用Canvas显示模式')\r\n          this.initCanvasDisplay()\r\n          return\r\n        }\r\n        \r\n        // 初始化高德地图\r\n        this.map = new AMap.Map('spatiotemporal-map', {\r\n          zoom: 12,\r\n          center: [118.8, 32.05],\r\n          mapStyle: 'amap://styles/grey'\r\n        })\r\n        \r\n        // 添加工具条\r\n        this.map.addControl(new AMap.ToolBar({\r\n          position: 'RB'\r\n        }))\r\n        \r\n        this.mapMode = 'amap'\r\n        console.log('地图初始化成功')\r\n      } catch (error) {\r\n        console.error('地图初始化失败:', error)\r\n        this.$message.warning('地图服务不可用，使用简化显示模式')\r\n        this.initCanvasDisplay()\r\n      }\r\n    },\r\n    \r\n    initCanvasDisplay() {\r\n      // 当地图API不可用时，使用Canvas作为降级方案\r\n      const mapContainer = document.getElementById('spatiotemporal-map')\r\n      if (mapContainer) {\r\n        mapContainer.innerHTML = `\r\n          <div style=\"\r\n            height: 100%; \r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            display: flex;\r\n            flex-direction: column;\r\n            justify-content: center;\r\n            align-items: center;\r\n            color: white;\r\n            text-align: center;\r\n            padding: 20px;\r\n          \">\r\n            <div style=\"font-size: 24px; margin-bottom: 10px;\">📊</div>\r\n            <div style=\"font-size: 18px; margin-bottom: 10px;\">时空分析可视化区域</div>\r\n            <div style=\"font-size: 14px; opacity: 0.8;\">数据将以列表和统计图表形式展示</div>\r\n            <div id=\"canvas-content\" style=\"margin-top: 20px; width: 100%; max-width: 600px;\">\r\n              <!-- 分析结果将在这里显示 -->\r\n            </div>\r\n          </div>\r\n        `\r\n        \r\n        this.mapMode = 'canvas'\r\n        console.log('Canvas显示模式初始化完成')\r\n      }\r\n    },\r\n    \r\n    async loadAvailableAlgorithms() {\r\n      try {\r\n        const result = await getAvailableAlgorithms()\r\n        if (result.success) {\r\n          this.availableAlgorithms = result.algorithms\r\n        }\r\n      } catch (error) {\r\n        console.error('加载算法列表失败:', error)\r\n      }\r\n    },\r\n    \r\n    async startAnalysis() {\r\n      this.loading = true\r\n      \r\n      try {\r\n        switch (this.analysisType) {\r\n          case 'heatmap':\r\n            await this.performHeatmapAnalysis()\r\n            break\r\n          case 'clustering':\r\n            await this.performClusteringAnalysisAction()\r\n            break\r\n          case 'od_analysis':\r\n            await this.performODAnalysisAction()\r\n            break\r\n          case 'comprehensive':\r\n            await this.performComprehensiveAnalysisAction()\r\n            break\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('分析失败: ' + error.message)\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n    \r\n    async performHeatmapAnalysis() {\r\n      const params = {\r\n        start_time: this.analysisParams.startTime,\r\n        end_time: this.analysisParams.endTime,\r\n        temporal_resolution: this.heatmapParams.temporal_resolution,\r\n        spatial_resolution: this.heatmapParams.spatial_resolution,\r\n        smoothing: this.heatmapParams.smoothing\r\n      }\r\n      \r\n      const result = await getDynamicHeatmap(params)\r\n      \r\n      if (result.success) {\r\n        this.timeFrames = result.frames\r\n        this.analysisResults = {\r\n          totalFrames: result.frames.length,\r\n          avgIntensity: result.time_series_stats?.avg_intensity_per_frame || 0\r\n        }\r\n        \r\n        this.currentFrameIndex = 0\r\n        this.displayCurrentFrame()\r\n        this.$message.success(`成功生成${result.frames.length}个时间帧的动态热力图`)\r\n      } else {\r\n        throw new Error(result.message)\r\n      }\r\n    },\r\n    \r\n    async performClusteringAnalysisAction() {\r\n      const result = await performClusteringAnalysis(\r\n        this.analysisParams.startTime,\r\n        this.analysisParams.endTime,\r\n        this.clusteringParams\r\n      )\r\n      \r\n      if (result.success) {\r\n        this.clusteringResults = result\r\n        this.analysisResults = {\r\n          totalClusters: result.clusters.length\r\n        }\r\n        \r\n        this.displayClusters()\r\n        this.$message.success(`聚类分析完成，发现${result.clusters.length}个聚类`)\r\n      } else {\r\n        throw new Error(result.message)\r\n      }\r\n    },\r\n    \r\n    async performODAnalysisAction() {\r\n      const result = await performODAnalysis(\r\n        this.analysisParams.startTime,\r\n        this.analysisParams.endTime,\r\n        this.odParams\r\n      )\r\n      \r\n      if (result.success) {\r\n        this.odResults = result\r\n        this.analysisResults = {\r\n          totalODPairs: result.od_pairs.length\r\n        }\r\n        \r\n        this.displayODFlows()\r\n        this.$message.success(`OD分析完成，找到${result.od_pairs.length}个OD对`)\r\n      } else {\r\n        throw new Error(result.message)\r\n      }\r\n    },\r\n    \r\n    async performComprehensiveAnalysisAction() {\r\n      const result = await performComprehensiveAnalysis(\r\n        this.analysisParams.startTime,\r\n        this.analysisParams.endTime,\r\n        this.heatmapParams\r\n      )\r\n      \r\n      if (result.success) {\r\n        this.timeFrames = result.data.data // 时间帧数据\r\n        this.analysisResults = {\r\n          totalFrames: result.data.data.length,\r\n          avgIntensity: result.data.statistics?.time_series_stats?.avg_intensity_per_frame || 0\r\n        }\r\n        \r\n        this.currentFrameIndex = 0\r\n        this.displayCurrentFrame()\r\n        this.$message.success('综合时空分析完成')\r\n      } else {\r\n        throw new Error(result.message)\r\n      }\r\n    },\r\n    \r\n    displayCurrentFrame() {\r\n      if (this.timeFrames.length === 0 || this.currentFrameIndex >= this.timeFrames.length) {\r\n        return\r\n      }\r\n      \r\n      const currentFrame = this.timeFrames[this.currentFrameIndex]\r\n      \r\n      if (this.mapMode === 'canvas') {\r\n        // Canvas模式下显示数据\r\n        this.displayFrameInCanvas(currentFrame)\r\n        return\r\n      }\r\n      \r\n      // 清除之前的热力图\r\n      if (this.heatmapLayer) {\r\n        this.map.remove(this.heatmapLayer)\r\n      }\r\n      \r\n      // 创建热力图数据\r\n      const heatmapData = currentFrame.heatmap_points.map(point => ({\r\n        lng: point.lng,\r\n        lat: point.lat,\r\n        count: point.intensity\r\n      }))\r\n      \r\n      // 创建热力图层\r\n      this.heatmapLayer = new AMap.HeatMap(this.map, {\r\n        radius: 20,\r\n        opacity: [0, 0.8],\r\n        gradient: {\r\n          0.4: 'blue',\r\n          0.6: 'cyan',\r\n          0.7: 'lime',\r\n          0.8: 'yellow',\r\n          1.0: 'red'\r\n        }\r\n      })\r\n      \r\n      this.heatmapLayer.setDataSet({\r\n        data: heatmapData,\r\n        max: Math.max(...heatmapData.map(d => d.count))\r\n      })\r\n    },\r\n    \r\n    displayFrameInCanvas(frame) {\r\n      // 在Canvas模式下显示时间帧数据\r\n      const canvasContent = document.getElementById('canvas-content')\r\n      if (!canvasContent) return\r\n      \r\n      const topPoints = frame.heatmap_points\r\n        .sort((a, b) => b.intensity - a.intensity)\r\n        .slice(0, 10)\r\n      \r\n      canvasContent.innerHTML = `\r\n        <div style=\"background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; text-align: left;\">\r\n          <div style=\"margin-bottom: 10px; font-weight: bold;\">时间: ${frame.time_label}</div>\r\n          <div style=\"margin-bottom: 10px;\">总强度: ${frame.total_intensity.toFixed(2)}</div>\r\n          <div style=\"margin-bottom: 10px;\">数据点数: ${frame.point_count}</div>\r\n          <div style=\"margin-bottom: 5px; font-weight: bold;\">热点区域 TOP 10:</div>\r\n          ${topPoints.map((point, index) => `\r\n            <div style=\"margin: 3px 0; font-size: 12px;\">\r\n              ${index + 1}. (${point.lat.toFixed(4)}, ${point.lng.toFixed(4)}) - 强度: ${point.intensity.toFixed(2)}\r\n            </div>\r\n          `).join('')}\r\n        </div>\r\n      `\r\n    },\r\n    \r\n    displayClusters() {\r\n      if (this.mapMode === 'canvas') {\r\n        this.displayClustersInCanvas()\r\n        return\r\n      }\r\n      \r\n      // 清除地图\r\n      this.map.clearMap()\r\n      \r\n      const colors = ['#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#FF00FF', '#00FFFF', '#FFA500', '#800080']\r\n      \r\n      this.clusteringResults.clusters.forEach((cluster, index) => {\r\n        const color = colors[index % colors.length]\r\n        \r\n        // 聚类中心标记\r\n        const centerMarker = new AMap.Marker({\r\n          position: [cluster.center_lng, cluster.center_lat],\r\n          icon: new AMap.Icon({\r\n            size: new AMap.Size(20, 20),\r\n            image: `data:image/svg+xml;base64,${btoa(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\"><circle cx=\"10\" cy=\"10\" r=\"8\" fill=\"${color}\" stroke=\"white\" stroke-width=\"2\"/><text x=\"10\" y=\"14\" text-anchor=\"middle\" fill=\"white\" font-size=\"10\">${cluster.cluster_id}</text></svg>`)}`\r\n          }),\r\n          title: `聚类 ${cluster.cluster_id} (${cluster.point_count} 点)`\r\n        })\r\n        \r\n        this.map.add(centerMarker)\r\n        \r\n        // 聚类点\r\n        cluster.points.forEach(point => {\r\n          const pointMarker = new AMap.CircleMarker({\r\n            center: [point.lng, point.lat],\r\n            radius: 3,\r\n            fillColor: color,\r\n            fillOpacity: 0.6,\r\n            strokeColor: color,\r\n            strokeOpacity: 0.8,\r\n            strokeWeight: 1\r\n          })\r\n          \r\n          this.map.add(pointMarker)\r\n        })\r\n      })\r\n      \r\n      // 调整地图视野\r\n      if (this.clusteringResults.clusters.length > 0) {\r\n        const bounds = new AMap.Bounds()\r\n        this.clusteringResults.clusters.forEach(cluster => {\r\n          bounds.extend([cluster.center_lng, cluster.center_lat])\r\n        })\r\n        this.map.setBounds(bounds)\r\n      }\r\n    },\r\n    \r\n    displayClustersInCanvas() {\r\n      const canvasContent = document.getElementById('canvas-content')\r\n      if (!canvasContent) return\r\n      \r\n      const clusters = this.clusteringResults.clusters\r\n        .sort((a, b) => b.density - a.density)\r\n        .slice(0, 8)\r\n      \r\n      canvasContent.innerHTML = `\r\n        <div style=\"background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; text-align: left;\">\r\n          <div style=\"margin-bottom: 10px; font-weight: bold;\">聚类分析结果</div>\r\n          <div style=\"margin-bottom: 10px;\">总聚类数: ${this.clusteringResults.clusters.length}</div>\r\n          <div style=\"margin-bottom: 5px; font-weight: bold;\">密度最高的聚类:</div>\r\n          ${clusters.map((cluster, index) => `\r\n            <div style=\"margin: 5px 0; padding: 8px; background: rgba(255,255,255,0.1); border-radius: 4px; font-size: 12px;\">\r\n              <div>聚类 #${cluster.cluster_id} - 密度: ${cluster.density.toFixed(4)}</div>\r\n              <div>中心: (${cluster.center_lat.toFixed(4)}, ${cluster.center_lng.toFixed(4)})</div>\r\n              <div>点数: ${cluster.point_count}</div>\r\n            </div>\r\n          `).join('')}\r\n        </div>\r\n      `\r\n    },\r\n    \r\n    displayODFlows() {\r\n      // 清除地图\r\n      this.map.clearMap()\r\n      \r\n      // 显示前20个流量最高的OD对\r\n      const topFlows = this.odResults.top_flows?.slice(0, 20) || []\r\n      \r\n      topFlows.forEach((flow, index) => {\r\n        const color = this.getFlowColor(flow.flow_count, topFlows[0].flow_count)\r\n        \r\n        // 起点标记\r\n        const originMarker = new AMap.Marker({\r\n          position: [flow.origin_lng, flow.origin_lat],\r\n          icon: new AMap.Icon({\r\n            size: new AMap.Size(12, 12),\r\n            image: `data:image/svg+xml;base64,${btoa(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 12 12\"><circle cx=\"6\" cy=\"6\" r=\"5\" fill=\"green\" stroke=\"white\" stroke-width=\"1\"/></svg>`)}`\r\n          })\r\n        })\r\n        \r\n        // 终点标记\r\n        const destMarker = new AMap.Marker({\r\n          position: [flow.destination_lng, flow.destination_lat],\r\n          icon: new AMap.Icon({\r\n            size: new AMap.Size(12, 12),\r\n            image: `data:image/svg+xml;base64,${btoa(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 12 12\"><circle cx=\"6\" cy=\"6\" r=\"5\" fill=\"red\" stroke=\"white\" stroke-width=\"1\"/></svg>`)}`\r\n          })\r\n        })\r\n        \r\n        // 流量线\r\n        const flowLine = new AMap.Polyline({\r\n          path: [\r\n            [flow.origin_lng, flow.origin_lat],\r\n            [flow.destination_lng, flow.destination_lat]\r\n          ],\r\n          strokeColor: color,\r\n          strokeWeight: Math.max(1, Math.min(8, flow.flow_count / topFlows[0].flow_count * 8)),\r\n          strokeOpacity: 0.7\r\n        })\r\n        \r\n        this.map.add([originMarker, destMarker, flowLine])\r\n      })\r\n    },\r\n    \r\n    getFlowColor(count, maxCount) {\r\n      const ratio = count / maxCount\r\n      if (ratio > 0.8) return '#FF0000'  // 红色\r\n      if (ratio > 0.6) return '#FF8000'  // 橙色\r\n      if (ratio > 0.4) return '#FFFF00'  // 黄色\r\n      if (ratio > 0.2) return '#80FF00'  // 绿黄色\r\n      return '#00FF00'  // 绿色\r\n    },\r\n    \r\n    // 时间轴控制方法\r\n    onTimeFrameChange(index) {\r\n      this.currentFrameIndex = index\r\n      this.displayCurrentFrame()\r\n    },\r\n    \r\n    previousFrame() {\r\n      if (this.currentFrameIndex > 0) {\r\n        this.currentFrameIndex--\r\n        this.displayCurrentFrame()\r\n      }\r\n    },\r\n    \r\n    nextFrame() {\r\n      if (this.currentFrameIndex < this.timeFrames.length - 1) {\r\n        this.currentFrameIndex++\r\n        this.displayCurrentFrame()\r\n      }\r\n    },\r\n    \r\n    togglePlayback() {\r\n      if (this.isPlaying) {\r\n        this.stopPlayback()\r\n      } else {\r\n        this.startPlayback()\r\n      }\r\n    },\r\n    \r\n    startPlayback() {\r\n      this.isPlaying = true\r\n      this.playbackTimer = setInterval(() => {\r\n        if (this.currentFrameIndex < this.timeFrames.length - 1) {\r\n          this.currentFrameIndex++\r\n          this.displayCurrentFrame()\r\n        } else {\r\n          this.stopPlayback()\r\n        }\r\n      }, this.playbackSpeed)\r\n    },\r\n    \r\n    stopPlayback() {\r\n      this.isPlaying = false\r\n      if (this.playbackTimer) {\r\n        clearInterval(this.playbackTimer)\r\n        this.playbackTimer = null\r\n      }\r\n    },\r\n    \r\n    // 交互方法\r\n    locateCluster(cluster) {\r\n      this.map.setCenter([cluster.center_lng, cluster.center_lat])\r\n      this.map.setZoom(15)\r\n    },\r\n    \r\n    showFlowOnMap(flow) {\r\n      const bounds = new AMap.Bounds()\r\n      bounds.extend([flow.origin_lng, flow.origin_lat])\r\n      bounds.extend([flow.destination_lng, flow.destination_lat])\r\n      this.map.setBounds(bounds)\r\n    },\r\n    \r\n    // 工具方法\r\n    formatNumber(num) {\r\n      if (typeof num !== 'number') return '0'\r\n      return num.toFixed(2)\r\n    },\r\n    \r\n    formatCoordinate(coord) {\r\n      return coord.toFixed(4)\r\n    },\r\n    \r\n    formatDuration(seconds) {\r\n      const hours = Math.floor(seconds / 3600)\r\n      const minutes = Math.floor((seconds % 3600) / 60)\r\n      if (hours > 0) {\r\n        return `${hours}小时${minutes}分钟`\r\n      }\r\n      return `${minutes}分钟`\r\n    },\r\n    \r\n    resetParams() {\r\n      this.analysisParams = {\r\n        startTime: '2013-09-13T08:00:00',\r\n        endTime: '2013-09-13T12:00:00'\r\n      }\r\n      this.heatmapParams = {\r\n        temporal_resolution: 15,\r\n        spatial_resolution: 0.001,\r\n        smoothing: true,\r\n        normalization: 'minmax'\r\n      }\r\n      this.clusteringParams = {\r\n        algorithm: 'dbscan',\r\n        data_type: 'pickup',\r\n        params: {}\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.spatiotemporal-analysis {\r\n  padding: 20px;\r\n  background: #f5f5f5;\r\n  min-height: 100vh;\r\n}\r\n\r\n.page-header {\r\n  text-align: center;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.page-title {\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n  color: #333;\r\n  margin: 0 0 10px 0;\r\n}\r\n\r\n.page-desc {\r\n  color: #666;\r\n  font-size: 16px;\r\n  margin: 0;\r\n}\r\n\r\n.control-panel {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.panel-section h3 {\r\n  margin: 0 0 15px 0;\r\n  color: #333;\r\n  font-size: 18px;\r\n}\r\n\r\n.form-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n  gap: 15px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.form-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.form-group label {\r\n  margin-bottom: 5px;\r\n  font-weight: bold;\r\n  color: #555;\r\n}\r\n\r\n.action-buttons {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.stats-cards {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\r\n  gap: 15px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.stat-card {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  text-align: center;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n}\r\n\r\n.stat-value {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  color: #2196F3;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.stat-label {\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n.map-section {\r\n  background: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  overflow: hidden;\r\n}\r\n\r\n.map-container {\r\n  position: relative;\r\n}\r\n\r\n.map-display {\r\n  height: 500px;\r\n  width: 100%;\r\n}\r\n\r\n.time-control-panel {\r\n  padding: 15px;\r\n  background: #f8f9fa;\r\n  border-top: 1px solid #eee;\r\n}\r\n\r\n.time-info {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.current-time {\r\n  font-weight: bold;\r\n  color: #2196F3;\r\n}\r\n\r\n.time-range {\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n.time-slider {\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.playback-controls {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.playback-speed {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  font-size: 14px;\r\n}\r\n\r\n.detailed-results {\r\n  margin-top: 20px;\r\n}\r\n\r\n.clustering-results, .od-results {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.cluster-list, .flow-list {\r\n  max-height: 400px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.cluster-item, .flow-item {\r\n  padding: 12px;\r\n  border: 1px solid #eee;\r\n  border-radius: 6px;\r\n  margin-bottom: 8px;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n}\r\n\r\n.cluster-item:hover, .flow-item:hover {\r\n  background: #f0f8ff;\r\n  border-color: #2196F3;\r\n}\r\n\r\n.cluster-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.cluster-id {\r\n  font-weight: bold;\r\n  color: #2196F3;\r\n}\r\n\r\n.cluster-density {\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n.cluster-info {\r\n  display: flex;\r\n  gap: 15px;\r\n  font-size: 14px;\r\n  color: #666;\r\n}\r\n\r\n.flow-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.flow-rank {\r\n  background: #2196F3;\r\n  color: white;\r\n  width: 30px;\r\n  height: 30px;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-weight: bold;\r\n  font-size: 14px;\r\n}\r\n\r\n.flow-info {\r\n  flex: 1;\r\n}\r\n\r\n.flow-count {\r\n  font-weight: bold;\r\n  color: #333;\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.flow-details {\r\n  display: flex;\r\n  gap: 15px;\r\n  font-size: 14px;\r\n  color: #666;\r\n}\r\n\r\n.top-flows h4 {\r\n  margin: 0 0 15px 0;\r\n  color: #333;\r\n}\r\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAyB;;EAQ7BA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAe;;EAEnBA,KAAK,EAAC;AAAW;;EAEfA,KAAK,EAAC;AAAY;;EAWlBA,KAAK,EAAC;AAAY;;EAYlBA,KAAK,EAAC;AAAY;;EAWlBA,KAAK,EAAC;AAAY;;EAYlBA,KAAK,EAAC;AAAY;;EAUlBA,KAAK,EAAC;AAAY;;EAalBA,KAAK,EAAC;AAAY;;EAUpBA,KAAK,EAAC;AAAgB;;;EAU1BA,KAAK,EAAC;;;EAEJA,KAAK,EAAC;AAAa;;EACjBA,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAY;;EAGpBA,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAY;;EAGpBA,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAY;;EAGpBA,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAY;;EAMtBA,KAAK,EAAC;AAAa;;EACjBA,KAAK,EAAC;AAAe;;;EAInBA,KAAK,EAAC;;;EACJA,KAAK,EAAC;AAAW;;EACdA,KAAK,EAAC;AAAc;;EACpBA,KAAK,EAAC;AAAY;;EAGrBA,KAAK,EAAC;AAAa;;EAUnBA,KAAK,EAAC;AAAmB;;EAavBA,KAAK,EAAC;AAAgB;;EAe9BA,KAAK,EAAC;AAAkB;;;EAEoCA,KAAK,EAAC;;;EAE9DA,KAAK,EAAC;AAAc;;;EAOhBA,KAAK,EAAC;AAAgB;;EACnBA,KAAK,EAAC;AAAY;;EAClBA,KAAK,EAAC;AAAiB;;EAE1BA,KAAK,EAAC;AAAc;;;EASyBA,KAAK,EAAC;;;EAEvDA,KAAK,EAAC;AAAW;;EAEfA,KAAK,EAAC;AAAW;;;EAObA,KAAK,EAAC;AAAW;;EACjBA,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAY;;EAClBA,KAAK,EAAC;AAAc;;;;;;;;;uBAnNzCC,mBAAA,CA8NM,OA9NNC,UA8NM,GA7NJC,mBAAA,UAAa,E,4BACbC,mBAAA,CAGM;IAHDJ,KAAK,EAAC;EAAa,IACtBI,mBAAA,CAAkC;IAA9BJ,KAAK,EAAC;EAAY,GAAC,QAAM,GAC7BI,mBAAA,CAAgD;IAA7CJ,KAAK,EAAC;EAAW,GAAC,yBAAuB,E,qBAG9CG,mBAAA,UAAa,EACbC,mBAAA,CA2FM,OA3FNC,UA2FM,GA1FJD,mBAAA,CAyFM,OAzFNE,UAyFM,G,4BAxFJF,mBAAA,CAAa,YAAT,MAAI,qBACRA,mBAAA,CA+EM,OA/ENG,UA+EM,GA9EJJ,mBAAA,UAAa,EACbC,mBAAA,CASM,OATNI,UASM,G,0BARJJ,mBAAA,CAAmB,eAAZ,MAAI,qBACXK,YAAA,CAMEC,yBAAA;gBALSC,KAAA,CAAAC,cAAc,CAACC,SAAS;+DAAxBF,KAAA,CAAAC,cAAc,CAACC,SAAS,GAAAC,MAAA;IACjCC,IAAI,EAAC,UAAU;IACfC,WAAW,EAAC,QAAQ;IACpBC,MAAM,EAAC,qBAAqB;IAC5B,cAAY,EAAC;6CAIjBb,mBAAA,CASM,OATNc,UASM,G,4BARJd,mBAAA,CAAmB,eAAZ,MAAI,qBACXK,YAAA,CAMEC,yBAAA;gBALSC,KAAA,CAAAC,cAAc,CAACO,OAAO;+DAAtBR,KAAA,CAAAC,cAAc,CAACO,OAAO,GAAAL,MAAA;IAC/BC,IAAI,EAAC,UAAU;IACfC,WAAW,EAAC,QAAQ;IACpBC,MAAM,EAAC,qBAAqB;IAC5B,cAAY,EAAC;6CAIjBd,mBAAA,UAAa,EACbC,mBAAA,CAQM,OARNgB,UAQM,G,4BAPJhB,mBAAA,CAAmB,eAAZ,MAAI,qBACXK,YAAA,CAKYY,oBAAA;gBALQV,KAAA,CAAAW,YAAY;+DAAZX,KAAA,CAAAW,YAAY,GAAAR,MAAA;IAAEE,WAAW,EAAC;;sBAC5C,MAA2C,CAA3CP,YAAA,CAA2Cc,oBAAA;MAAhCC,KAAK,EAAC,OAAO;MAACC,KAAK,EAAC;QAC/BhB,YAAA,CAA6Cc,oBAAA;MAAlCC,KAAK,EAAC,MAAM;MAACC,KAAK,EAAC;QAC9BhB,YAAA,CAA+Cc,oBAAA;MAApCC,KAAK,EAAC,OAAO;MAACC,KAAK,EAAC;QAC/BhB,YAAA,CAAgDc,oBAAA;MAArCC,KAAK,EAAC,MAAM;MAACC,KAAK,EAAC;;;uCAIlCtB,mBAAA,WAAc,EACdC,mBAAA,CASM,OATNsB,UASM,G,4BARJtB,mBAAA,CAAwB,eAAjB,WAAS,qBAChBK,YAAA,CAMEkB,0BAAA;gBALShB,KAAA,CAAAiB,aAAa,CAACC,mBAAmB;+DAAjClB,KAAA,CAAAiB,aAAa,CAACC,mBAAmB,GAAAf,MAAA;IACzCgB,GAAG,EAAE,CAAC;IACNC,GAAG,EAAE,GAAG;IACRC,IAAI,EAAE,CAAC;IACR,mBAAiB,EAAC;6CAItB7B,mBAAA,WAAc,EACdC,mBAAA,CAOM,OAPN6B,UAOM,G,4BANJ7B,mBAAA,CAAoB,eAAb,OAAK,qBACZK,YAAA,CAIYY,oBAAA;gBAJQV,KAAA,CAAAiB,aAAa,CAACM,kBAAkB;+DAAhCvB,KAAA,CAAAiB,aAAa,CAACM,kBAAkB,GAAApB,MAAA;;sBAClD,MAAkD,CAAlDL,YAAA,CAAkDc,oBAAA;MAAvCC,KAAK,EAAC,cAAc;MAAEC,KAAK,EAAE;QACxChB,YAAA,CAAgDc,oBAAA;MAArCC,KAAK,EAAC,aAAa;MAAEC,KAAK,EAAE;QACvChB,YAAA,CAAgDc,oBAAA;MAArCC,KAAK,EAAC,aAAa;MAAEC,KAAK,EAAE;;;uCAI3CtB,mBAAA,YAAe,E,gBACfC,mBAAA,CAUM,OAVN+B,WAUM,G,4BATJ/B,mBAAA,CAAmB,eAAZ,MAAI,qBACXK,YAAA,CAOYY,oBAAA;gBAPQV,KAAA,CAAAyB,gBAAgB,CAACC,SAAS;+DAA1B1B,KAAA,CAAAyB,gBAAgB,CAACC,SAAS,GAAAvB,MAAA;;sBAE1C,MAAmC,E,kBADrCb,mBAAA,CAKEqC,SAAA,QAAAC,WAAA,CAJe5B,KAAA,CAAA6B,mBAAmB,EAA3BC,IAAI;2BADbC,YAAA,CAKEnB,oBAAA;QAHCoB,GAAG,EAAEF,IAAI;QACTjB,KAAK,EAAEiB,IAAI,CAACG,WAAW;QACvBnB,KAAK,EAAEgB;;;;uEAPkB9B,KAAA,CAAAW,YAAY,mB,GAY5CnB,mBAAA,UAAa,E,gBACbC,mBAAA,CAOM,OAPNyC,WAOM,G,4BANJzC,mBAAA,CAAmB,eAAZ,MAAI,qBACXK,YAAA,CAIYY,oBAAA;gBAJQV,KAAA,CAAAyB,gBAAgB,CAACU,SAAS;+DAA1BnC,KAAA,CAAAyB,gBAAgB,CAACU,SAAS,GAAAhC,MAAA;;sBAC5C,MAAyC,CAAzCL,YAAA,CAAyCc,oBAAA;MAA9BC,KAAK,EAAC,MAAM;MAACC,KAAK,EAAC;QAC9BhB,YAAA,CAA0Cc,oBAAA;MAA/BC,KAAK,EAAC,MAAM;MAACC,KAAK,EAAC;QAC9BhB,YAAA,CAA4Cc,oBAAA;MAAjCC,KAAK,EAAC,KAAK;MAACC,KAAK,EAAC;;;uEALDd,KAAA,CAAAW,YAAY,mB,KAU9ClB,mBAAA,CAKM,OALN2C,WAKM,GAJJtC,YAAA,CAEYuC,oBAAA;IAFDjC,IAAI,EAAC,SAAS;IAAEkC,OAAK,EAAEC,QAAA,CAAAC,aAAa;IAAGC,OAAO,EAAEzC,KAAA,CAAAyC;;sBAAS,MAEpEC,MAAA,SAAAA,MAAA,Q,iBAFoE,QAEpE,E;;;6CACA5C,YAAA,CAAgDuC,oBAAA;IAApCC,OAAK,EAAEC,QAAA,CAAAI;EAAW;sBAAE,MAAID,MAAA,SAAAA,MAAA,Q,iBAAJ,MAAI,E;;;wCAK1ClD,mBAAA,YAAe,EACoBQ,KAAA,CAAA4C,eAAe,I,cAAlDtD,mBAAA,CAuHM,OAvHNuD,WAuHM,GAtHJrD,mBAAA,UAAa,EACbC,mBAAA,CAiBM,OAjBNqD,WAiBM,GAhBJrD,mBAAA,CAGM,OAHNsD,WAGM,GAFJtD,mBAAA,CAAoE,OAApEuD,WAAoE,EAAAC,gBAAA,CAAzCjD,KAAA,CAAA4C,eAAe,CAACM,WAAW,uB,4BACtDzD,mBAAA,CAAkC;IAA7BJ,KAAK,EAAC;EAAY,GAAC,MAAI,oB,GAE9BI,mBAAA,CAGM,OAHN0D,WAGM,GAFJ1D,mBAAA,CAAsE,OAAtE2D,WAAsE,EAAAH,gBAAA,CAA3CjD,KAAA,CAAA4C,eAAe,CAACS,aAAa,uB,4BACxD5D,mBAAA,CAAkC;IAA7BJ,KAAK,EAAC;EAAY,GAAC,MAAI,oB,GAE9BI,mBAAA,CAGM,OAHN6D,WAGM,GAFJ7D,mBAAA,CAAqE,OAArE8D,WAAqE,EAAAN,gBAAA,CAA1CjD,KAAA,CAAA4C,eAAe,CAACY,YAAY,uB,4BACvD/D,mBAAA,CAAkC;IAA7BJ,KAAK,EAAC;EAAY,GAAC,MAAI,oB,GAE9BI,mBAAA,CAGM,OAHNgE,WAGM,GAFJhE,mBAAA,CAA8E,OAA9EiE,WAA8E,EAAAT,gBAAA,CAAnDV,QAAA,CAAAoB,YAAY,CAAC3D,KAAA,CAAA4C,eAAe,CAACgB,YAAY,mB,4BACpEnE,mBAAA,CAAkC;IAA7BJ,KAAK,EAAC;EAAY,GAAC,MAAI,oB,KAIhCG,mBAAA,cAAiB,EACjBC,mBAAA,CA8CM,OA9CNoE,WA8CM,GA7CJpE,mBAAA,CA4CM,OA5CNqE,WA4CM,G,4BA3CJrE,mBAAA,CAAuD;IAAlDsE,EAAE,EAAC,oBAAoB;IAAC1E,KAAK,EAAC;8BAEnCG,mBAAA,YAAe,EACuBQ,KAAA,CAAAW,YAAY,kBAAkBX,KAAA,CAAAgE,UAAU,CAACC,MAAM,Q,cAArF3E,mBAAA,CAuCM,OAvCN4E,WAuCM,GAtCJzE,mBAAA,CAGM,OAHN0E,WAGM,GAFJ1E,mBAAA,CAAwD,QAAxD2E,WAAwD,EAAAnB,gBAAA,CAA1BV,QAAA,CAAA8B,gBAAgB,kBAC9C5E,mBAAA,CAAoD,QAApD6E,WAAoD,EAAArB,gBAAA,CAAxBV,QAAA,CAAAgC,cAAc,iB,GAG5C9E,mBAAA,CAQM,OARN+E,WAQM,GAPJ1E,YAAA,CAME2E,oBAAA;gBALSzE,KAAA,CAAA0E,iBAAiB;+DAAjB1E,KAAA,CAAA0E,iBAAiB,GAAAvE,MAAA;IACzBgB,GAAG,EAAE,CAAC;IACNC,GAAG,EAAEpB,KAAA,CAAAgE,UAAU,CAACC,MAAM;IACtB5C,IAAI,EAAE,CAAC;IACPsD,QAAM,EAAEpC,QAAA,CAAAqC;gEAIbnF,mBAAA,CAsBM,OAtBNoF,WAsBM,GArBJ/E,YAAA,CAUkBgF,0BAAA;sBAThB,MAEY,CAFZhF,YAAA,CAEYuC,oBAAA;MAFD0C,IAAI,EAAC,sBAAsB;MAAEzC,OAAK,EAAEC,QAAA,CAAAyC,aAAa;MAAGC,QAAQ,EAAEjF,KAAA,CAAA0E,iBAAiB;;wBAAQ,MAElGhC,MAAA,SAAAA,MAAA,Q,iBAFkG,OAElG,E;;;gDACA5C,YAAA,CAEYuC,oBAAA;MAFA0C,IAAI,EAAE/E,KAAA,CAAAkF,SAAS;MAAkD5C,OAAK,EAAEC,QAAA,CAAA4C;;wBAClF,MAA6B,C,kCAA1BnF,KAAA,CAAAkF,SAAS,+B;;4CAEdpF,YAAA,CAEYuC,oBAAA;MAFD0C,IAAI,EAAC,uBAAuB;MAAEzC,OAAK,EAAEC,QAAA,CAAA6C,SAAS;MAAGH,QAAQ,EAAEjF,KAAA,CAAA0E,iBAAiB,KAAK1E,KAAA,CAAAgE,UAAU,CAACC,MAAM;;wBAAM,MAEnHvB,MAAA,SAAAA,MAAA,Q,iBAFmH,OAEnH,E;;;;;MAGFjD,mBAAA,CAQM,OARN4F,WAQM,G,4BAPJ5F,mBAAA,CAAkB,cAAZ,OAAK,qBACXK,YAAA,CAKYY,oBAAA;gBALQV,KAAA,CAAAsF,aAAa;+DAAbtF,KAAA,CAAAsF,aAAa,GAAAnF,MAAA;IAAEoF,IAAI,EAAC;;sBACtC,MAAwC,CAAxCzF,YAAA,CAAwCc,oBAAA;MAA7BC,KAAK,EAAC,MAAM;MAAEC,KAAK,EAAE;QAChChB,YAAA,CAAsCc,oBAAA;MAA3BC,KAAK,EAAC,IAAI;MAAEC,KAAK,EAAE;QAC9BhB,YAAA,CAAqCc,oBAAA;MAA1BC,KAAK,EAAC,IAAI;MAAEC,KAAK,EAAE;QAC9BhB,YAAA,CAAqCc,oBAAA;MAA1BC,KAAK,EAAC,IAAI;MAAEC,KAAK,EAAE;;;oFAQ1CtB,mBAAA,UAAa,EACbC,mBAAA,CA+CM,OA/CN+F,WA+CM,GA9CJhG,mBAAA,UAAa,EACFQ,KAAA,CAAAW,YAAY,qBAAqBX,KAAA,CAAAyF,iBAAiB,I,cAA7DnG,mBAAA,CAmBM,OAnBNoG,WAmBM,G,4BAlBJjG,mBAAA,CAAe,YAAX,QAAM,qBACVA,mBAAA,CAgBM,OAhBNkG,WAgBM,I,kBAfJrG,mBAAA,CAcMqC,SAAA,QAAAC,WAAA,CAbc5B,KAAA,CAAAyF,iBAAiB,CAACG,QAAQ,EAArCC,OAAO;yBADhBvG,mBAAA,CAcM;MAZH0C,GAAG,EAAE6D,OAAO,CAACC,UAAU;MACxBzG,KAAK,EAAC,cAAc;MACnBiD,OAAK,EAAAnC,MAAA,IAAEoC,QAAA,CAAAwD,aAAa,CAACF,OAAO;QAE7BpG,mBAAA,CAGM,OAHNuG,WAGM,GAFJvG,mBAAA,CAA4D,QAA5DwG,WAA4D,EAAnC,MAAI,GAAAhD,gBAAA,CAAG4C,OAAO,CAACC,UAAU,kBAClDrG,mBAAA,CAA4E,QAA5EyG,WAA4E,EAA9C,MAAI,GAAAjD,gBAAA,CAAGV,QAAA,CAAAoB,YAAY,CAACkC,OAAO,CAACM,OAAO,kB,GAEnE1G,mBAAA,CAGM,OAHN2G,WAGM,GAFJ3G,mBAAA,CAA0C,cAApC,MAAI,GAAAwD,gBAAA,CAAG4C,OAAO,CAACQ,WAAW,kBAChC5G,mBAAA,CAAyG,cAAnG,OAAK,GAAAwD,gBAAA,CAAGV,QAAA,CAAA+D,gBAAgB,CAACT,OAAO,CAACU,UAAU,KAAI,IAAE,GAAAtD,gBAAA,CAAGV,QAAA,CAAA+D,gBAAgB,CAACT,OAAO,CAACW,UAAU,KAAI,GAAC,gB;2EAM1GhH,mBAAA,YAAe,EACJQ,KAAA,CAAAW,YAAY,sBAAsBX,KAAA,CAAAyG,SAAS,I,cAAtDnH,mBAAA,CAsBM,OAtBNoH,WAsBM,G,4BArBJjH,mBAAA,CAAe,YAAX,QAAM,qBACVA,mBAAA,CAmBM,OAnBNkH,WAmBM,G,4BAlBJlH,mBAAA,CAAsB,YAAlB,eAAa,qBACjBA,mBAAA,CAgBM,OAhBNmH,WAgBM,I,kBAfJtH,mBAAA,CAcMqC,SAAA,QAAAC,WAAA,CAboB5B,KAAA,CAAAyG,SAAS,CAACI,SAAS,EAAEC,KAAK,UAA1CC,IAAI,EAAEC,KAAK;yBADrB1H,mBAAA,CAcM;MAZH0C,GAAG,EAAEgF,KAAK;MACX3H,KAAK,EAAC,WAAW;MAChBiD,OAAK,EAAAnC,MAAA,IAAEoC,QAAA,CAAA0E,aAAa,CAACF,IAAI;QAE1BtH,mBAAA,CAA6C,OAA7CyH,WAA6C,EAAtB,GAAC,GAAAjE,gBAAA,CAAG+D,KAAK,sBAChCvH,mBAAA,CAMM,OANN0H,WAMM,GALJ1H,mBAAA,CAAuD,OAAvD2H,WAAuD,EAAAnE,gBAAA,CAA5B8D,IAAI,CAACM,UAAU,IAAG,MAAI,iBACjD5H,mBAAA,CAGM,OAHN6H,WAGM,GAFJ7H,mBAAA,CAA0D,cAApD,QAAM,GAAAwD,gBAAA,CAAGV,QAAA,CAAAoB,YAAY,CAACoD,IAAI,CAACQ,YAAY,KAAI,IAAE,iBACnD9H,mBAAA,CAA0D,cAApD,QAAM,GAAAwD,gBAAA,CAAGV,QAAA,CAAAiF,cAAc,CAACT,IAAI,CAACU,YAAY,kB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}