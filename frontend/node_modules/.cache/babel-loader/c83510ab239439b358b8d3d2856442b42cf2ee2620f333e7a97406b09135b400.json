{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { ref, computed, onMounted, onUnmounted, watch } from 'vue';\nimport { Thermometer, Activity, Play, Download, X, ChevronLeft, ChevronRight } from 'lucide-vue-next';\nimport { getHeatmapData, getTrafficVisualization } from '@/api/traffic';\n\n// 响应式数据\nconst minDate = \"2013-09-12\";\nconst maxDate = \"2013-09-18\";\n\n// 计算属性\n\nexport default {\n  __name: 'TrafficHeatmap',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const loading = ref(false);\n    const loadingMessage = ref('');\n    const playing = ref(false);\n    const heatmapData = ref([]);\n    const timeSlices = ref([]);\n    const currentTimeIndex = ref(0);\n    const heatmapVisible = ref(true);\n    const detailedData = ref([]);\n\n    // 分析参数\n    const analysisParams = ref({\n      date: '2013-09-13',\n      timeInterval: 60,\n      // 分钟\n      resolution: 0.001,\n      analysisType: 'density',\n      startTime: '06:00',\n      endTime: '22:00'\n    });\n\n    // 地图参数\n    const mapParams = ref({\n      style: 'dark'\n    });\n\n    // 地图相关\n    const mapContainerId = `heatmap-map-${Date.now()}`;\n    let map = null;\n    let heatmap = null;\n\n    // 时间限制\n    const currentHeatmapStats = computed(() => {\n      if (!heatmapData.value.length) return {\n        totalPoints: 0,\n        maxDensity: 0\n      };\n      const currentSlice = timeSlices.value[currentTimeIndex.value];\n      if (!currentSlice) return {\n        totalPoints: 0,\n        maxDensity: 0\n      };\n      return {\n        totalPoints: currentSlice.data.length,\n        maxDensity: Math.max(...currentSlice.data.map(p => p.count))\n      };\n    });\n    const overallStats = computed(() => {\n      if (!heatmapData.value.length) return [];\n      const totalPoints = heatmapData.value.length;\n      const avgDensity = heatmapData.value.reduce((sum, p) => sum + p.count, 0) / totalPoints;\n      const maxDensity = Math.max(...heatmapData.value.map(p => p.count));\n      return [{\n        label: '总数据点',\n        value: totalPoints\n      }, {\n        label: '平均密度',\n        value: avgDensity.toFixed(1)\n      }, {\n        label: '最大密度',\n        value: maxDensity\n      }, {\n        label: '覆盖区域',\n        value: `${(totalPoints * 0.001).toFixed(2)} km²`\n      }, {\n        label: '时间切片',\n        value: timeSlices.value.length\n      }];\n    });\n    const topHotspots = computed(() => {\n      if (!heatmapData.value.length) return [];\n      return heatmapData.value.sort((a, b) => b.count - a.count).slice(0, 5).map(point => ({\n        density: point.count,\n        coordinates: `${point.lat.toFixed(4)}, ${point.lng.toFixed(4)}`,\n        lat: point.lat,\n        lng: point.lng\n      }));\n    });\n    const timeDistributionBars = computed(() => {\n      if (!timeSlices.value.length) return [];\n      const maxCount = Math.max(...timeSlices.value.map(slice => slice.data.length));\n      return timeSlices.value.map(slice => ({\n        height: slice.data.length / maxCount * 100,\n        label: slice.label\n      }));\n    });\n\n    // 地图初始化\n    async function initMap() {\n      if (!window.AMap) {\n        await loadAMapAPI();\n      }\n      map = new window.AMap.Map(mapContainerId, {\n        center: [117.120, 36.651],\n        zoom: 10,\n        mapStyle: `amap://styles/${mapParams.value.style}`\n      });\n      map.plugin(['AMap.ToolBar', 'AMap.Scale'], function () {\n        map.addControl(new window.AMap.ToolBar());\n        map.addControl(new window.AMap.Scale());\n      });\n    }\n\n    // 加载高德地图API\n    function loadAMapAPI() {\n      return new Promise((resolve, reject) => {\n        if (window.AMap) {\n          resolve();\n          return;\n        }\n        const script = document.createElement('script');\n        script.src = 'https://webapi.amap.com/maps?v=2.0&key=ac9b745946df9aee02cf0515319407df&callback=initAMap';\n        window.initAMap = () => {\n          resolve();\n          delete window.initAMap;\n        };\n        script.onerror = reject;\n        document.head.appendChild(script);\n      });\n    }\n\n    // 生成热力图\n    async function generateHeatmap() {\n      loading.value = true;\n      loadingMessage.value = '正在生成热力图数据...';\n      try {\n        // 构建时间范围\n        const startDateTime = new Date(`${analysisParams.value.date}T${analysisParams.value.startTime}:00`);\n        const endDateTime = new Date(`${analysisParams.value.date}T${analysisParams.value.endTime}:00`);\n        const startTimeStamp = startDateTime.getTime() / 1000;\n        const endTimeStamp = endDateTime.getTime() / 1000;\n        console.log('生成热力图参数:', {\n          start: startTimeStamp,\n          end: endTimeStamp,\n          interval: analysisParams.value.timeInterval,\n          resolution: analysisParams.value.resolution\n        });\n\n        // 根据时间间隔生成时间切片\n        await generateTimeSlices(startTimeStamp, endTimeStamp);\n\n        // 生成热力图可视化\n        renderHeatmap();\n      } catch (error) {\n        console.error('生成热力图失败:', error);\n        alert('生成热力图失败，请检查参数设置');\n      } finally {\n        loading.value = false;\n      }\n    }\n\n    // 生成时间切片\n    async function generateTimeSlices(startTime, endTime) {\n      const intervalSeconds = analysisParams.value.timeInterval * 60;\n      const slices = [];\n      let currentTime = startTime;\n      while (currentTime < endTime) {\n        const sliceEndTime = Math.min(currentTime + intervalSeconds, endTime);\n        loadingMessage.value = `正在处理时间段: ${formatTimestamp(currentTime)} - ${formatTimestamp(sliceEndTime)}`;\n        try {\n          const response = await getTrafficVisualization(currentTime, sliceEndTime, 'heatmap', null, mapParams.value.style);\n          if (response.data.success && response.data.data) {\n            slices.push({\n              startTime: currentTime,\n              endTime: sliceEndTime,\n              label: `${formatTimestamp(currentTime)} - ${formatTimestamp(sliceEndTime)}`,\n              data: response.data.data\n            });\n\n            // 累积所有数据用于整体分析\n            heatmapData.value.push(...response.data.data);\n          }\n        } catch (error) {\n          console.error(`获取时间段 ${currentTime}-${sliceEndTime} 数据失败:`, error);\n        }\n        currentTime = sliceEndTime;\n      }\n      timeSlices.value = slices;\n      currentTimeIndex.value = 0;\n      console.log(`生成了 ${slices.length} 个时间切片`);\n    }\n\n    // 渲染热力图\n    function renderHeatmap() {\n      if (!map) return;\n\n      // 清除现有热力图\n      if (heatmap) {\n        heatmap.setMap(null);\n      }\n      const currentSlice = timeSlices.value[currentTimeIndex.value];\n      if (!currentSlice || !currentSlice.data.length) return;\n\n      // 创建热力图\n      map.plugin(['AMap.HeatMap'], function () {\n        heatmap = new window.AMap.HeatMap(map, {\n          radius: 25,\n          opacity: [0, 0.8],\n          gradient: {\n            0.5: 'blue',\n            0.65: 'rgb(117,211,248)',\n            0.7: 'rgb(0,255,0)',\n            0.9: 'yellow',\n            1.0: 'red'\n          }\n        });\n        heatmap.setDataSet({\n          data: currentSlice.data,\n          max: Math.max(...currentSlice.data.map(p => p.count))\n        });\n      });\n    }\n\n    // 时间段快速选择\n    function selectPeakHours(period) {\n      switch (period) {\n        case 'morning':\n          analysisParams.value.startTime = '07:00';\n          analysisParams.value.endTime = '09:00';\n          break;\n        case 'evening':\n          analysisParams.value.startTime = '17:00';\n          analysisParams.value.endTime = '19:00';\n          break;\n        case 'night':\n          analysisParams.value.startTime = '22:00';\n          analysisParams.value.endTime = '06:00';\n          break;\n        case 'all':\n          analysisParams.value.startTime = '00:00';\n          analysisParams.value.endTime = '23:59';\n          break;\n      }\n    }\n\n    // 时间轴控制\n    function prevTimeSlice() {\n      if (currentTimeIndex.value > 0) {\n        currentTimeIndex.value--;\n        updateTimeSlice();\n      }\n    }\n    function nextTimeSlice() {\n      if (currentTimeIndex.value < timeSlices.value.length - 1) {\n        currentTimeIndex.value++;\n        updateTimeSlice();\n      }\n    }\n    function updateTimeSlice() {\n      renderHeatmap();\n    }\n\n    // 时间轴播放\n    async function playTimeAnimation() {\n      if (playing.value || !timeSlices.value.length) return;\n      playing.value = true;\n      currentTimeIndex.value = 0;\n      const playInterval = setInterval(() => {\n        updateTimeSlice();\n        currentTimeIndex.value++;\n        if (currentTimeIndex.value >= timeSlices.value.length) {\n          currentTimeIndex.value = 0; // 循环播放\n        }\n      }, 1000); // 每秒切换一个时间段\n\n      // 10秒后停止播放\n      setTimeout(() => {\n        clearInterval(playInterval);\n        playing.value = false;\n      }, 10000);\n    }\n\n    // 地图样式控制\n    function changeMapStyle() {\n      if (map) {\n        map.setMapStyle(`amap://styles/${mapParams.value.style}`);\n      }\n    }\n    function toggleHeatmapLayer() {\n      if (heatmap) {\n        if (heatmapVisible.value) {\n          heatmap.hide();\n        } else {\n          heatmap.show();\n        }\n        heatmapVisible.value = !heatmapVisible.value;\n      }\n    }\n\n    // 清除热力图\n    function clearHeatmap() {\n      if (heatmap) {\n        heatmap.setMap(null);\n        heatmap = null;\n      }\n      heatmapData.value = [];\n      timeSlices.value = [];\n      detailedData.value = [];\n      currentTimeIndex.value = 0;\n    }\n\n    // 导出数据\n    function exportHeatmapData() {\n      if (!heatmapData.value.length) return;\n      const exportData = {\n        analysisParams: analysisParams.value,\n        timeSlices: timeSlices.value.map(slice => ({\n          ...slice,\n          dataCount: slice.data.length\n        })),\n        overallStats: overallStats.value,\n        topHotspots: topHotspots.value\n      };\n      const dataStr = JSON.stringify(exportData, null, 2);\n      const dataBlob = new Blob([dataStr], {\n        type: 'application/json'\n      });\n      const url = URL.createObjectURL(dataBlob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `heatmap_analysis_${analysisParams.value.date}_${Date.now()}.json`;\n      link.click();\n      URL.revokeObjectURL(url);\n    }\n\n    // 区域定位\n    function zoomToHotspot(hotspot) {\n      if (map) {\n        map.setZoomAndCenter(15, [hotspot.lng, hotspot.lat]);\n      }\n    }\n    function zoomToRegion(row) {\n      console.log('定位到区域:', row);\n    }\n\n    // 工具函数\n    function formatTimestamp(timestamp) {\n      return new Date(timestamp * 1000).toLocaleTimeString('zh-CN', {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n    function formatTimeSlice(slice) {\n      if (!slice) return '';\n      return `${formatTimestamp(slice.startTime)} - ${formatTimestamp(slice.endTime)}`;\n    }\n    function formatTime(timestamp) {\n      return new Date(timestamp * 1000).toLocaleTimeString('zh-CN');\n    }\n\n    // 生命周期\n    onMounted(() => {\n      setTimeout(() => {\n        initMap();\n      }, 500);\n    });\n    onUnmounted(() => {\n      if (map) {\n        map.destroy();\n      }\n    });\n\n    // 监听时间索引变化\n    watch(currentTimeIndex, () => {\n      updateTimeSlice();\n    });\n    const __returned__ = {\n      loading,\n      loadingMessage,\n      playing,\n      heatmapData,\n      timeSlices,\n      currentTimeIndex,\n      heatmapVisible,\n      detailedData,\n      analysisParams,\n      mapParams,\n      mapContainerId,\n      get map() {\n        return map;\n      },\n      set map(v) {\n        map = v;\n      },\n      get heatmap() {\n        return heatmap;\n      },\n      set heatmap(v) {\n        heatmap = v;\n      },\n      minDate,\n      maxDate,\n      currentHeatmapStats,\n      overallStats,\n      topHotspots,\n      timeDistributionBars,\n      initMap,\n      loadAMapAPI,\n      generateHeatmap,\n      generateTimeSlices,\n      renderHeatmap,\n      selectPeakHours,\n      prevTimeSlice,\n      nextTimeSlice,\n      updateTimeSlice,\n      playTimeAnimation,\n      changeMapStyle,\n      toggleHeatmapLayer,\n      clearHeatmap,\n      exportHeatmapData,\n      zoomToHotspot,\n      zoomToRegion,\n      formatTimestamp,\n      formatTimeSlice,\n      formatTime,\n      ref,\n      computed,\n      onMounted,\n      onUnmounted,\n      watch,\n      get Thermometer() {\n        return Thermometer;\n      },\n      get Activity() {\n        return Activity;\n      },\n      get Play() {\n        return Play;\n      },\n      get Download() {\n        return Download;\n      },\n      get X() {\n        return X;\n      },\n      get ChevronLeft() {\n        return ChevronLeft;\n      },\n      get ChevronRight() {\n        return ChevronRight;\n      },\n      get getHeatmapData() {\n        return getHeatmapData;\n      },\n      get getTrafficVisualization() {\n        return getTrafficVisualization;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","onUnmounted","watch","Thermometer","Activity","Play","Download","X","ChevronLeft","ChevronRight","getHeatmapData","getTrafficVisualization","minDate","maxDate","loading","loadingMessage","playing","heatmapData","timeSlices","currentTimeIndex","heatmapVisible","detailedData","analysisParams","date","timeInterval","resolution","analysisType","startTime","endTime","mapParams","style","mapContainerId","Date","now","map","heatmap","currentHeatmapStats","value","length","totalPoints","maxDensity","currentSlice","data","Math","max","p","count","overallStats","avgDensity","reduce","sum","label","toFixed","topHotspots","sort","a","b","slice","point","density","coordinates","lat","lng","timeDistributionBars","maxCount","height","initMap","window","AMap","loadAMapAPI","Map","center","zoom","mapStyle","plugin","addControl","ToolBar","Scale","Promise","resolve","reject","script","document","createElement","src","initAMap","onerror","head","appendChild","generateHeatmap","startDateTime","endDateTime","startTimeStamp","getTime","endTimeStamp","console","log","start","end","interval","generateTimeSlices","renderHeatmap","error","alert","intervalSeconds","slices","currentTime","sliceEndTime","min","formatTimestamp","response","success","push","setMap","HeatMap","radius","opacity","gradient","setDataSet","selectPeakHours","period","prevTimeSlice","updateTimeSlice","nextTimeSlice","playTimeAnimation","playInterval","setInterval","setTimeout","clearInterval","changeMapStyle","setMapStyle","toggleHeatmapLayer","hide","show","clearHeatmap","exportHeatmapData","exportData","dataCount","dataStr","JSON","stringify","dataBlob","Blob","type","url","URL","createObjectURL","link","href","download","click","revokeObjectURL","zoomToHotspot","hotspot","setZoomAndCenter","zoomToRegion","row","timestamp","toLocaleTimeString","hour","minute","formatTimeSlice","formatTime","destroy"],"sources":["E:/hhh/frontend/src/modules/trafficVisualization/TrafficHeatmap.vue"],"sourcesContent":["<template>\r\n  <div class=\"heatmap-analysis-container\">\r\n    <!-- 控制面板 -->\r\n    <div class=\"card-tech p-6 mb-6\">\r\n      <h2 class=\"text-xl font-semibold text-white mb-4 flex items-center\">\r\n        <Thermometer class=\"h-5 w-5 mr-2 text-cyan-400\" />\r\n        热力图分析\r\n      </h2>\r\n      \r\n      <!-- 分析参数配置 -->\r\n      <div class=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-4\">\r\n        <div class=\"space-y-2\">\r\n          <label class=\"text-sm text-blue-200\">分析日期</label>\r\n          <input \r\n            v-model=\"analysisParams.date\"\r\n            type=\"date\" \r\n            class=\"input-tech\"\r\n            :min=\"minDate\"\r\n            :max=\"maxDate\"\r\n          />\r\n        </div>\r\n        <div class=\"space-y-2\">\r\n          <label class=\"text-sm text-blue-200\">时间聚合间隔</label>\r\n          <select v-model=\"analysisParams.timeInterval\" class=\"input-tech\">\r\n            <option value=\"15\">15分钟</option>\r\n            <option value=\"30\">30分钟</option>\r\n            <option value=\"60\">1小时</option>\r\n            <option value=\"120\">2小时</option>\r\n            <option value=\"360\">6小时</option>\r\n            <option value=\"1440\">全天</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"space-y-2\">\r\n          <label class=\"text-sm text-blue-200\">热力图分辨率</label>\r\n          <select v-model=\"analysisParams.resolution\" class=\"input-tech\">\r\n            <option value=\"0.0005\">高精度 (0.5m)</option>\r\n            <option value=\"0.001\">标准 (1m)</option>\r\n            <option value=\"0.005\">中等 (5m)</option>\r\n            <option value=\"0.01\">粗糙 (10m)</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"space-y-2\">\r\n          <label class=\"text-sm text-blue-200\">分析类型</label>\r\n          <select v-model=\"analysisParams.analysisType\" class=\"input-tech\">\r\n            <option value=\"density\">车辆密度</option>\r\n            <option value=\"pickup\">上车热点</option>\r\n            <option value=\"dropoff\">下车热点</option>\r\n            <option value=\"speed\">平均速度</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- 时间段选择器 -->\r\n      <div class=\"mb-4\">\r\n        <div class=\"flex items-center justify-between mb-2\">\r\n          <label class=\"text-sm text-blue-200\">分析时间段</label>\r\n          <div class=\"flex space-x-2\">\r\n            <button @click=\"selectPeakHours('morning')\" class=\"btn-tech-small\">早高峰</button>\r\n            <button @click=\"selectPeakHours('evening')\" class=\"btn-tech-small\">晚高峰</button>\r\n            <button @click=\"selectPeakHours('night')\" class=\"btn-tech-small\">夜间</button>\r\n            <button @click=\"selectPeakHours('all')\" class=\"btn-tech-small\">全天</button>\r\n          </div>\r\n        </div>\r\n        <div class=\"grid grid-cols-2 gap-4\">\r\n          <div>\r\n            <input \r\n              v-model=\"analysisParams.startTime\"\r\n              type=\"time\" \r\n              class=\"input-tech\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <input \r\n              v-model=\"analysisParams.endTime\"\r\n              type=\"time\" \r\n              class=\"input-tech\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- 操作按钮 -->\r\n      <div class=\"flex space-x-4\">\r\n        <button \r\n          @click=\"generateHeatmap\"\r\n          :disabled=\"loading\"\r\n          class=\"btn-tech flex items-center text-white\"\r\n        >\r\n          <Activity class=\"h-4 w-4 mr-2\" />\r\n          {{ loading ? '生成中...' : '生成热力图' }}\r\n        </button>\r\n        <button \r\n          @click=\"playTimeAnimation\"\r\n          :disabled=\"!heatmapData.length || playing\"\r\n          class=\"btn-tech flex items-center text-white\"\r\n        >\r\n          <Play class=\"h-4 w-4 mr-2\" />\r\n          {{ playing ? '播放中...' : '时间轴播放' }}\r\n        </button>\r\n        <button \r\n          @click=\"exportHeatmapData\"\r\n          :disabled=\"!heatmapData.length\"\r\n          class=\"btn-tech-secondary flex items-center text-white\"\r\n        >\r\n          <Download class=\"h-4 w-4 mr-2\" />\r\n          导出数据\r\n        </button>\r\n        <button \r\n          @click=\"clearHeatmap\"\r\n          class=\"btn-tech-secondary flex items-center text-white\"\r\n        >\r\n          <X class=\"h-4 w-4 mr-2\" />\r\n          清除图层\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 热力图显示和统计信息 -->\r\n    <div class=\"grid grid-cols-1 lg:grid-cols-4 gap-6 mb-6\">\r\n      <!-- 热力图地图 -->\r\n      <div class=\"lg:col-span-3 card-tech p-6\">\r\n        <div class=\"flex items-center justify-between mb-4\">\r\n          <h3 class=\"text-lg font-semibold text-white\">热力图可视化</h3>\r\n          <div class=\"flex space-x-2\">\r\n            <select v-model=\"mapParams.style\" @change=\"changeMapStyle\" class=\"input-tech text-xs\">\r\n              <option value=\"dark\">暗色主题</option>\r\n              <option value=\"light\">亮色主题</option>\r\n              <option value=\"satellite\">卫星图</option>\r\n            </select>\r\n            <button @click=\"toggleHeatmapLayer\" class=\"btn-tech-small\">\r\n              {{ heatmapVisible ? '隐藏热力图' : '显示热力图' }}\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        <div \r\n          :id=\"mapContainerId\" \r\n          class=\"w-full h-96 bg-gray-800 rounded-lg border border-blue-800\"\r\n        ></div>\r\n        \r\n        <!-- 时间轴控制器 -->\r\n        <div v-if=\"timeSlices.length > 1\" class=\"mt-4\">\r\n          <div class=\"flex items-center space-x-4\">\r\n            <button @click=\"prevTimeSlice\" :disabled=\"currentTimeIndex === 0\" class=\"btn-tech-small\">\r\n              <ChevronLeft class=\"h-4 w-4\" />\r\n            </button>\r\n            <div class=\"flex-1\">\r\n              <input \r\n                type=\"range\" \r\n                :min=\"0\" \r\n                :max=\"timeSlices.length - 1\"\r\n                v-model=\"currentTimeIndex\"\r\n                @input=\"updateTimeSlice\"\r\n                class=\"w-full\"\r\n              />\r\n              <div class=\"text-center text-sm text-blue-200 mt-1\">\r\n                {{ formatTimeSlice(timeSlices[currentTimeIndex]) }}\r\n              </div>\r\n            </div>\r\n            <button @click=\"nextTimeSlice\" :disabled=\"currentTimeIndex === timeSlices.length - 1\" class=\"btn-tech-small\">\r\n              <ChevronRight class=\"h-4 w-4\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- 图例 -->\r\n        <div class=\"mt-4 flex items-center justify-between\">\r\n          <div class=\"flex items-center space-x-4\">\r\n            <span class=\"text-sm text-blue-200\">密度梯度:</span>\r\n            <div class=\"flex items-center space-x-1\">\r\n              <div class=\"w-4 h-4 bg-blue-500\"></div>\r\n              <span class=\"text-xs text-gray-400\">低</span>\r\n              <div class=\"w-4 h-4 bg-green-500\"></div>\r\n              <div class=\"w-4 h-4 bg-yellow-500\"></div>\r\n              <div class=\"w-4 h-4 bg-red-500\"></div>\r\n              <span class=\"text-xs text-gray-400\">高</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"text-sm text-blue-200\">\r\n            数据点: {{ currentHeatmapStats.totalPoints }} | \r\n            最大密度: {{ currentHeatmapStats.maxDensity }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- 统计面板 -->\r\n      <div class=\"card-tech p-6\">\r\n        <h3 class=\"text-lg font-semibold text-white mb-4\">分析统计</h3>\r\n        \r\n        <!-- 整体统计 -->\r\n        <div class=\"space-y-4 mb-6\">\r\n          <div v-for=\"stat in overallStats\" :key=\"stat.label\" class=\"flex justify-between\">\r\n            <span class=\"text-blue-200 text-sm\">{{ stat.label }}</span>\r\n            <span class=\"text-white font-semibold text-sm\">{{ stat.value }}</span>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- 热点区域排行 -->\r\n        <div class=\"mb-6\">\r\n          <h4 class=\"text-sm font-semibold text-blue-200 mb-3\">热点区域 TOP5</h4>\r\n          <div class=\"space-y-2\">\r\n            <div \r\n              v-for=\"(hotspot, index) in topHotspots\" \r\n              :key=\"index\"\r\n              @click=\"zoomToHotspot(hotspot)\"\r\n              class=\"p-2 bg-gray-700 rounded cursor-pointer hover:bg-gray-600 transition-colors\"\r\n            >\r\n              <div class=\"flex justify-between items-center\">\r\n                <span class=\"text-white text-xs\">区域 {{ index + 1 }}</span>\r\n                <span class=\"text-cyan-400 text-xs\">{{ hotspot.density }}</span>\r\n              </div>\r\n              <div class=\"text-xs text-gray-400\">\r\n                {{ hotspot.coordinates }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- 时间分布图表 -->\r\n        <div>\r\n          <h4 class=\"text-sm font-semibold text-blue-200 mb-3\">时间分布</h4>\r\n          <div class=\"h-32 bg-gray-700 rounded p-2\">\r\n            <!-- 简单的时间分布条形图 -->\r\n            <div class=\"flex items-end justify-between h-full\">\r\n              <div \r\n                v-for=\"(bar, index) in timeDistributionBars\" \r\n                :key=\"index\"\r\n                :style=\"{ height: bar.height + '%' }\"\r\n                class=\"bg-cyan-500 w-1 rounded-t\"\r\n                :title=\"bar.label\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 详细数据表格 -->\r\n    <div class=\"card-tech p-6\" v-if=\"detailedData.length > 0\">\r\n      <h3 class=\"text-lg font-semibold text-white mb-4\">详细数据</h3>\r\n      <div class=\"overflow-x-auto\">\r\n        <table class=\"w-full text-sm\">\r\n          <thead>\r\n            <tr class=\"border-b border-gray-600\">\r\n              <th class=\"text-left py-2 text-blue-200\">时间段</th>\r\n              <th class=\"text-left py-2 text-blue-200\">区域</th>\r\n              <th class=\"text-left py-2 text-blue-200\">密度值</th>\r\n              <th class=\"text-left py-2 text-blue-200\">数据点数</th>\r\n              <th class=\"text-left py-2 text-blue-200\">平均速度</th>\r\n              <th class=\"text-left py-2 text-blue-200\">操作</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr \r\n              v-for=\"(row, index) in detailedData.slice(0, 50)\" \r\n              :key=\"index\"\r\n              class=\"border-b border-gray-700 hover:bg-gray-700\"\r\n            >\r\n              <td class=\"py-2 text-white\">{{ formatTime(row.time) }}</td>\r\n              <td class=\"py-2 text-white\">{{ row.region }}</td>\r\n              <td class=\"py-2 text-white\">{{ row.density }}</td>\r\n              <td class=\"py-2 text-white\">{{ row.count }}</td>\r\n              <td class=\"py-2 text-white\">{{ row.avgSpeed || 'N/A' }}</td>\r\n              <td class=\"py-2\">\r\n                <button @click=\"zoomToRegion(row)\" class=\"text-cyan-400 hover:text-cyan-300 text-xs\">\r\n                  定位\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 加载状态 -->\r\n    <div v-if=\"loading\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n      <div class=\"bg-blue-900 p-6 rounded-lg text-white\">\r\n        <div class=\"flex items-center\">\r\n          <div class=\"animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-cyan-400 mr-3\"></div>\r\n          <span>{{ loadingMessage }}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted, onUnmounted, watch } from 'vue'\r\nimport { Thermometer, Activity, Play, Download, X, ChevronLeft, ChevronRight } from 'lucide-vue-next'\r\nimport { getHeatmapData, getTrafficVisualization } from '@/api/traffic'\r\n\r\n// 响应式数据\r\nconst loading = ref(false)\r\nconst loadingMessage = ref('')\r\nconst playing = ref(false)\r\nconst heatmapData = ref([])\r\nconst timeSlices = ref([])\r\nconst currentTimeIndex = ref(0)\r\nconst heatmapVisible = ref(true)\r\nconst detailedData = ref([])\r\n\r\n// 分析参数\r\nconst analysisParams = ref({\r\n  date: '2013-09-13',\r\n  timeInterval: 60, // 分钟\r\n  resolution: 0.001,\r\n  analysisType: 'density',\r\n  startTime: '06:00',\r\n  endTime: '22:00'\r\n})\r\n\r\n// 地图参数\r\nconst mapParams = ref({\r\n  style: 'dark'\r\n})\r\n\r\n// 地图相关\r\nconst mapContainerId = `heatmap-map-${Date.now()}`\r\nlet map = null\r\nlet heatmap = null\r\n\r\n// 时间限制\r\nconst minDate = \"2013-09-12\"\r\nconst maxDate = \"2013-09-18\"\r\n\r\n// 计算属性\r\nconst currentHeatmapStats = computed(() => {\r\n  if (!heatmapData.value.length) return { totalPoints: 0, maxDensity: 0 }\r\n  \r\n  const currentSlice = timeSlices.value[currentTimeIndex.value]\r\n  if (!currentSlice) return { totalPoints: 0, maxDensity: 0 }\r\n  \r\n  return {\r\n    totalPoints: currentSlice.data.length,\r\n    maxDensity: Math.max(...currentSlice.data.map(p => p.count))\r\n  }\r\n})\r\n\r\nconst overallStats = computed(() => {\r\n  if (!heatmapData.value.length) return []\r\n  \r\n  const totalPoints = heatmapData.value.length\r\n  const avgDensity = heatmapData.value.reduce((sum, p) => sum + p.count, 0) / totalPoints\r\n  const maxDensity = Math.max(...heatmapData.value.map(p => p.count))\r\n  \r\n  return [\r\n    { label: '总数据点', value: totalPoints },\r\n    { label: '平均密度', value: avgDensity.toFixed(1) },\r\n    { label: '最大密度', value: maxDensity },\r\n    { label: '覆盖区域', value: `${(totalPoints * 0.001).toFixed(2)} km²` },\r\n    { label: '时间切片', value: timeSlices.value.length }\r\n  ]\r\n})\r\n\r\nconst topHotspots = computed(() => {\r\n  if (!heatmapData.value.length) return []\r\n  \r\n  return heatmapData.value\r\n    .sort((a, b) => b.count - a.count)\r\n    .slice(0, 5)\r\n    .map(point => ({\r\n      density: point.count,\r\n      coordinates: `${point.lat.toFixed(4)}, ${point.lng.toFixed(4)}`,\r\n      lat: point.lat,\r\n      lng: point.lng\r\n    }))\r\n})\r\n\r\nconst timeDistributionBars = computed(() => {\r\n  if (!timeSlices.value.length) return []\r\n  \r\n  const maxCount = Math.max(...timeSlices.value.map(slice => slice.data.length))\r\n  \r\n  return timeSlices.value.map(slice => ({\r\n    height: (slice.data.length / maxCount) * 100,\r\n    label: slice.label\r\n  }))\r\n})\r\n\r\n// 地图初始化\r\nasync function initMap() {\r\n  if (!window.AMap) {\r\n    await loadAMapAPI()\r\n  }\r\n  \r\n  map = new window.AMap.Map(mapContainerId, {\r\n    center: [117.120, 36.651],\r\n    zoom: 10,\r\n    mapStyle: `amap://styles/${mapParams.value.style}`\r\n  })\r\n  \r\n  map.plugin(['AMap.ToolBar', 'AMap.Scale'], function() {\r\n    map.addControl(new window.AMap.ToolBar())\r\n    map.addControl(new window.AMap.Scale())\r\n  })\r\n}\r\n\r\n// 加载高德地图API\r\nfunction loadAMapAPI() {\r\n  return new Promise((resolve, reject) => {\r\n    if (window.AMap) {\r\n      resolve()\r\n      return\r\n    }\r\n    \r\n    const script = document.createElement('script')\r\n    script.src = 'https://webapi.amap.com/maps?v=2.0&key=ac9b745946df9aee02cf0515319407df&callback=initAMap'\r\n    \r\n    window.initAMap = () => {\r\n      resolve()\r\n      delete window.initAMap\r\n    }\r\n    \r\n    script.onerror = reject\r\n    document.head.appendChild(script)\r\n  })\r\n}\r\n\r\n// 生成热力图\r\nasync function generateHeatmap() {\r\n  loading.value = true\r\n  loadingMessage.value = '正在生成热力图数据...'\r\n  \r\n  try {\r\n    // 构建时间范围\r\n    const startDateTime = new Date(`${analysisParams.value.date}T${analysisParams.value.startTime}:00`)\r\n    const endDateTime = new Date(`${analysisParams.value.date}T${analysisParams.value.endTime}:00`)\r\n    \r\n    const startTimeStamp = startDateTime.getTime() / 1000\r\n    const endTimeStamp = endDateTime.getTime() / 1000\r\n    \r\n    console.log('生成热力图参数:', {\r\n      start: startTimeStamp,\r\n      end: endTimeStamp,\r\n      interval: analysisParams.value.timeInterval,\r\n      resolution: analysisParams.value.resolution\r\n    })\r\n    \r\n    // 根据时间间隔生成时间切片\r\n    await generateTimeSlices(startTimeStamp, endTimeStamp)\r\n    \r\n    // 生成热力图可视化\r\n    renderHeatmap()\r\n    \r\n  } catch (error) {\r\n    console.error('生成热力图失败:', error)\r\n    alert('生成热力图失败，请检查参数设置')\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// 生成时间切片\r\nasync function generateTimeSlices(startTime, endTime) {\r\n  const intervalSeconds = analysisParams.value.timeInterval * 60\r\n  const slices = []\r\n  \r\n  let currentTime = startTime\r\n  while (currentTime < endTime) {\r\n    const sliceEndTime = Math.min(currentTime + intervalSeconds, endTime)\r\n    \r\n    loadingMessage.value = `正在处理时间段: ${formatTimestamp(currentTime)} - ${formatTimestamp(sliceEndTime)}`\r\n    \r\n    try {\r\n      const response = await getTrafficVisualization(\r\n        currentTime, \r\n        sliceEndTime, \r\n        'heatmap',\r\n        null,\r\n        mapParams.value.style\r\n      )\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        slices.push({\r\n          startTime: currentTime,\r\n          endTime: sliceEndTime,\r\n          label: `${formatTimestamp(currentTime)} - ${formatTimestamp(sliceEndTime)}`,\r\n          data: response.data.data\r\n        })\r\n        \r\n        // 累积所有数据用于整体分析\r\n        heatmapData.value.push(...response.data.data)\r\n      }\r\n    } catch (error) {\r\n      console.error(`获取时间段 ${currentTime}-${sliceEndTime} 数据失败:`, error)\r\n    }\r\n    \r\n    currentTime = sliceEndTime\r\n  }\r\n  \r\n  timeSlices.value = slices\r\n  currentTimeIndex.value = 0\r\n  \r\n  console.log(`生成了 ${slices.length} 个时间切片`)\r\n}\r\n\r\n// 渲染热力图\r\nfunction renderHeatmap() {\r\n  if (!map) return\r\n  \r\n  // 清除现有热力图\r\n  if (heatmap) {\r\n    heatmap.setMap(null)\r\n  }\r\n  \r\n  const currentSlice = timeSlices.value[currentTimeIndex.value]\r\n  if (!currentSlice || !currentSlice.data.length) return\r\n  \r\n  // 创建热力图\r\n  map.plugin(['AMap.HeatMap'], function() {\r\n    heatmap = new window.AMap.HeatMap(map, {\r\n      radius: 25,\r\n      opacity: [0, 0.8],\r\n      gradient: {\r\n        0.5: 'blue',\r\n        0.65: 'rgb(117,211,248)',\r\n        0.7: 'rgb(0,255,0)',\r\n        0.9: 'yellow',\r\n        1.0: 'red'\r\n      }\r\n    })\r\n    \r\n    heatmap.setDataSet({\r\n      data: currentSlice.data,\r\n      max: Math.max(...currentSlice.data.map(p => p.count))\r\n    })\r\n  })\r\n}\r\n\r\n// 时间段快速选择\r\nfunction selectPeakHours(period) {\r\n  switch (period) {\r\n    case 'morning':\r\n      analysisParams.value.startTime = '07:00'\r\n      analysisParams.value.endTime = '09:00'\r\n      break\r\n    case 'evening':\r\n      analysisParams.value.startTime = '17:00'\r\n      analysisParams.value.endTime = '19:00'\r\n      break\r\n    case 'night':\r\n      analysisParams.value.startTime = '22:00'\r\n      analysisParams.value.endTime = '06:00'\r\n      break\r\n    case 'all':\r\n      analysisParams.value.startTime = '00:00'\r\n      analysisParams.value.endTime = '23:59'\r\n      break\r\n  }\r\n}\r\n\r\n// 时间轴控制\r\nfunction prevTimeSlice() {\r\n  if (currentTimeIndex.value > 0) {\r\n    currentTimeIndex.value--\r\n    updateTimeSlice()\r\n  }\r\n}\r\n\r\nfunction nextTimeSlice() {\r\n  if (currentTimeIndex.value < timeSlices.value.length - 1) {\r\n    currentTimeIndex.value++\r\n    updateTimeSlice()\r\n  }\r\n}\r\n\r\nfunction updateTimeSlice() {\r\n  renderHeatmap()\r\n}\r\n\r\n// 时间轴播放\r\nasync function playTimeAnimation() {\r\n  if (playing.value || !timeSlices.value.length) return\r\n  \r\n  playing.value = true\r\n  currentTimeIndex.value = 0\r\n  \r\n  const playInterval = setInterval(() => {\r\n    updateTimeSlice()\r\n    currentTimeIndex.value++\r\n    \r\n    if (currentTimeIndex.value >= timeSlices.value.length) {\r\n      currentTimeIndex.value = 0 // 循环播放\r\n    }\r\n  }, 1000) // 每秒切换一个时间段\r\n  \r\n  // 10秒后停止播放\r\n  setTimeout(() => {\r\n    clearInterval(playInterval)\r\n    playing.value = false\r\n  }, 10000)\r\n}\r\n\r\n// 地图样式控制\r\nfunction changeMapStyle() {\r\n  if (map) {\r\n    map.setMapStyle(`amap://styles/${mapParams.value.style}`)\r\n  }\r\n}\r\n\r\nfunction toggleHeatmapLayer() {\r\n  if (heatmap) {\r\n    if (heatmapVisible.value) {\r\n      heatmap.hide()\r\n    } else {\r\n      heatmap.show()\r\n    }\r\n    heatmapVisible.value = !heatmapVisible.value\r\n  }\r\n}\r\n\r\n// 清除热力图\r\nfunction clearHeatmap() {\r\n  if (heatmap) {\r\n    heatmap.setMap(null)\r\n    heatmap = null\r\n  }\r\n  heatmapData.value = []\r\n  timeSlices.value = []\r\n  detailedData.value = []\r\n  currentTimeIndex.value = 0\r\n}\r\n\r\n// 导出数据\r\nfunction exportHeatmapData() {\r\n  if (!heatmapData.value.length) return\r\n  \r\n  const exportData = {\r\n    analysisParams: analysisParams.value,\r\n    timeSlices: timeSlices.value.map(slice => ({\r\n      ...slice,\r\n      dataCount: slice.data.length\r\n    })),\r\n    overallStats: overallStats.value,\r\n    topHotspots: topHotspots.value\r\n  }\r\n  \r\n  const dataStr = JSON.stringify(exportData, null, 2)\r\n  const dataBlob = new Blob([dataStr], {type: 'application/json'})\r\n  const url = URL.createObjectURL(dataBlob)\r\n  \r\n  const link = document.createElement('a')\r\n  link.href = url\r\n  link.download = `heatmap_analysis_${analysisParams.value.date}_${Date.now()}.json`\r\n  link.click()\r\n  \r\n  URL.revokeObjectURL(url)\r\n}\r\n\r\n// 区域定位\r\nfunction zoomToHotspot(hotspot) {\r\n  if (map) {\r\n    map.setZoomAndCenter(15, [hotspot.lng, hotspot.lat])\r\n  }\r\n}\r\n\r\nfunction zoomToRegion(row) {\r\n  console.log('定位到区域:', row)\r\n}\r\n\r\n// 工具函数\r\nfunction formatTimestamp(timestamp) {\r\n  return new Date(timestamp * 1000).toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' })\r\n}\r\n\r\nfunction formatTimeSlice(slice) {\r\n  if (!slice) return ''\r\n  return `${formatTimestamp(slice.startTime)} - ${formatTimestamp(slice.endTime)}`\r\n}\r\n\r\nfunction formatTime(timestamp) {\r\n  return new Date(timestamp * 1000).toLocaleTimeString('zh-CN')\r\n}\r\n\r\n// 生命周期\r\nonMounted(() => {\r\n  setTimeout(() => {\r\n    initMap()\r\n  }, 500)\r\n})\r\n\r\nonUnmounted(() => {\r\n  if (map) {\r\n    map.destroy()\r\n  }\r\n})\r\n\r\n// 监听时间索引变化\r\nwatch(currentTimeIndex, () => {\r\n  updateTimeSlice()\r\n})\r\n</script> \r\n\r\n<style scoped>\r\n.heatmap-analysis-container {\r\n  padding: 20px;\r\n}\r\n\r\n.input-tech {\r\n  width: 100%;\r\n  padding: 8px 12px;\r\n  background: rgba(30, 58, 138, 0.3);\r\n  border: 1px solid rgba(59, 130, 246, 0.5);\r\n  border-radius: 6px;\r\n  color: white;\r\n  font-size: 14px;\r\n}\r\n\r\n.input-tech:focus {\r\n  outline: none;\r\n  border-color: #06b6d4;\r\n  box-shadow: 0 0 0 2px rgba(6, 182, 212, 0.2);\r\n}\r\n\r\n.btn-tech {\r\n  padding: 8px 16px;\r\n  background: linear-gradient(135deg, #0ea5e9, #06b6d4);\r\n  border: none;\r\n  border-radius: 6px;\r\n  color: white;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.btn-tech:hover {\r\n  transform: translateY(-1px);\r\n  box-shadow: 0 4px 12px rgba(6, 182, 212, 0.4);\r\n}\r\n\r\n.btn-tech:disabled {\r\n  opacity: 0.5;\r\n  cursor: not-allowed;\r\n  transform: none;\r\n}\r\n\r\n.btn-tech-secondary {\r\n  padding: 8px 16px;\r\n  background: rgba(75, 85, 99, 0.8);\r\n  border: 1px solid rgba(156, 163, 175, 0.3);\r\n  border-radius: 6px;\r\n  color: white;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.btn-tech-secondary:hover {\r\n  background: rgba(107, 114, 128, 0.8);\r\n}\r\n\r\n.btn-tech-small {\r\n  padding: 4px 8px;\r\n  font-size: 12px;\r\n  background: rgba(30, 58, 138, 0.8);\r\n  border: 1px solid rgba(59, 130, 246, 0.5);\r\n  border-radius: 4px;\r\n  color: white;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.btn-tech-small:hover {\r\n  background: rgba(37, 99, 235, 0.8);\r\n}\r\n\r\n.btn-tech-small:disabled {\r\n  opacity: 0.5;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.card-tech {\r\n  background: linear-gradient(135deg, rgba(30, 58, 138, 0.8), rgba(29, 78, 216, 0.6));\r\n  backdrop-filter: blur(10px);\r\n  border: 1px solid rgba(59, 130, 246, 0.2);\r\n  border-radius: 12px;\r\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\r\n}\r\n\r\n/* 时间轴滑块样式 */\r\ninput[type=\"range\"] {\r\n  width: 100%;\r\n  height: 6px;\r\n  border-radius: 3px;\r\n  background: rgba(59, 130, 246, 0.3);\r\n  outline: none;\r\n}\r\n\r\ninput[type=\"range\"]::-webkit-slider-thumb {\r\n  appearance: none;\r\n  width: 16px;\r\n  height: 16px;\r\n  border-radius: 50%;\r\n  background: #06b6d4;\r\n  cursor: pointer;\r\n}\r\n\r\ninput[type=\"range\"]::-moz-range-thumb {\r\n  width: 16px;\r\n  height: 16px;\r\n  border-radius: 50%;\r\n  background: #06b6d4;\r\n  cursor: pointer;\r\n  border: none;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}